{
  "language": "Solidity",
  "sources": {
    "@0xpolygonhermez/zkevm-contracts/contracts/interfaces/IBasePolygonZkEVMGlobalExitRoot.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.20;\n\ninterface IBasePolygonZkEVMGlobalExitRoot {\n    /**\n     * @dev Thrown when the caller is not the allowed contracts\n     */\n    error OnlyAllowedContracts();\n\n    function updateExitRoot(bytes32 newRollupExitRoot) external;\n\n    function globalExitRootMap(\n        bytes32 globalExitRootNum\n    ) external returns (uint256);\n}\n"
    },
    "@0xpolygonhermez/zkevm-contracts/contracts/interfaces/IBridgeMessageReceiver.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Define interface for PolygonZkEVM Bridge message receiver\n */\ninterface IBridgeMessageReceiver {\n    function onMessageReceived(\n        address originAddress,\n        uint32 originNetwork,\n        bytes memory data\n    ) external payable;\n}\n"
    },
    "@0xpolygonhermez/zkevm-contracts/contracts/interfaces/IPolygonZkEVMGlobalExitRoot.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.20;\nimport \"./IBasePolygonZkEVMGlobalExitRoot.sol\";\n\ninterface IPolygonZkEVMGlobalExitRoot is IBasePolygonZkEVMGlobalExitRoot {\n    function getLastGlobalExitRoot() external view returns (bytes32);\n}\n"
    },
    "@0xpolygonhermez/zkevm-contracts/contracts/lib/EmergencyManager.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract helper responsible to manage the emergency state\n */\ncontract EmergencyManager {\n    /**\n     * @dev Thrown when emergency state is active, and the function requires otherwise\n     */\n    error OnlyNotEmergencyState();\n\n    /**\n     * @dev Thrown when emergency state is not active, and the function requires otherwise\n     */\n    error OnlyEmergencyState();\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     */\n    uint256[10] private _gap;\n\n    // Indicates whether the emergency state is active or not\n    bool public isEmergencyState;\n\n    /**\n     * @dev Emitted when emergency state is activated\n     */\n    event EmergencyStateActivated();\n\n    /**\n     * @dev Emitted when emergency state is deactivated\n     */\n    event EmergencyStateDeactivated();\n\n    /**\n     * @notice Only allows a function to be callable if emergency state is unactive\n     */\n    modifier ifNotEmergencyState() {\n        if (isEmergencyState) {\n            revert OnlyNotEmergencyState();\n        }\n        _;\n    }\n\n    /**\n     * @notice Only allows a function to be callable if emergency state is active\n     */\n    modifier ifEmergencyState() {\n        if (!isEmergencyState) {\n            revert OnlyEmergencyState();\n        }\n        _;\n    }\n\n    /**\n     * @notice Activate emergency state\n     */\n    function _activateEmergencyState() internal virtual ifNotEmergencyState {\n        isEmergencyState = true;\n        emit EmergencyStateActivated();\n    }\n\n    /**\n     * @notice Deactivate emergency state\n     */\n    function _deactivateEmergencyState() internal virtual ifEmergencyState {\n        isEmergencyState = false;\n        emit EmergencyStateDeactivated();\n    }\n}\n"
    },
    "@0xpolygonhermez/zkevm-contracts/contracts/v2/interfaces/IPolygonZkEVMBridgeV2.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.20;\nimport \"../../interfaces/IBasePolygonZkEVMGlobalExitRoot.sol\";\n\ninterface IPolygonZkEVMBridgeV2 {\n    /**\n     * @dev Thrown when the destination network is invalid\n     */\n    error DestinationNetworkInvalid();\n\n    /**\n     * @dev Thrown when the amount does not match msg.value\n     */\n    error AmountDoesNotMatchMsgValue();\n\n    /**\n     * @dev Thrown when user is bridging tokens and is also sending a value\n     */\n    error MsgValueNotZero();\n\n    /**\n     * @dev Thrown when the Ether transfer on claimAsset fails\n     */\n    error EtherTransferFailed();\n\n    /**\n     * @dev Thrown when the message transaction on claimMessage fails\n     */\n    error MessageFailed();\n\n    /**\n     * @dev Thrown when the global exit root does not exist\n     */\n    error GlobalExitRootInvalid();\n\n    /**\n     * @dev Thrown when the smt proof does not match\n     */\n    error InvalidSmtProof();\n\n    /**\n     * @dev Thrown when an index is already claimed\n     */\n    error AlreadyClaimed();\n\n    /**\n     * @dev Thrown when the owner of permit does not match the sender\n     */\n    error NotValidOwner();\n\n    /**\n     * @dev Thrown when the spender of the permit does not match this contract address\n     */\n    error NotValidSpender();\n\n    /**\n     * @dev Thrown when the amount of the permit does not match\n     */\n    error NotValidAmount();\n\n    /**\n     * @dev Thrown when the permit data contains an invalid signature\n     */\n    error NotValidSignature();\n\n    /**\n     * @dev Thrown when sender is not the rollup manager\n     */\n    error OnlyRollupManager();\n\n    /**\n     * @dev Thrown when the permit data contains an invalid signature\n     */\n    error NativeTokenIsEther();\n\n    /**\n     * @dev Thrown when the permit data contains an invalid signature\n     */\n    error NoValueInMessagesOnGasTokenNetworks();\n\n    /**\n     * @dev Thrown when the permit data contains an invalid signature\n     */\n    error GasTokenNetworkMustBeZeroOnEther();\n\n    /**\n     * @dev Thrown when the wrapped token deployment fails\n     */\n    error FailedTokenWrappedDeployment();\n\n    function wrappedTokenToTokenInfo(\n        address destinationAddress\n    ) external view returns (uint32, address);\n\n    function updateGlobalExitRoot() external;\n\n    function activateEmergencyState() external;\n\n    function deactivateEmergencyState() external;\n\n    function bridgeAsset(\n        uint32 destinationNetwork,\n        address destinationAddress,\n        uint256 amount,\n        address token,\n        bool forceUpdateGlobalExitRoot,\n        bytes calldata permitData\n    ) external payable;\n\n    function bridgeMessage(\n        uint32 destinationNetwork,\n        address destinationAddress,\n        bool forceUpdateGlobalExitRoot,\n        bytes calldata metadata\n    ) external payable;\n\n    function bridgeMessageWETH(\n        uint32 destinationNetwork,\n        address destinationAddress,\n        uint256 amountWETH,\n        bool forceUpdateGlobalExitRoot,\n        bytes calldata metadata\n    ) external;\n\n    function claimAsset(\n        bytes32[32] calldata smtProofLocalExitRoot,\n        bytes32[32] calldata smtProofRollupExitRoot,\n        uint256 globalIndex,\n        bytes32 mainnetExitRoot,\n        bytes32 rollupExitRoot,\n        uint32 originNetwork,\n        address originTokenAddress,\n        uint32 destinationNetwork,\n        address destinationAddress,\n        uint256 amount,\n        bytes calldata metadata\n    ) external;\n\n    function claimMessage(\n        bytes32[32] calldata smtProofLocalExitRoot,\n        bytes32[32] calldata smtProofRollupExitRoot,\n        uint256 globalIndex,\n        bytes32 mainnetExitRoot,\n        bytes32 rollupExitRoot,\n        uint32 originNetwork,\n        address originAddress,\n        uint32 destinationNetwork,\n        address destinationAddress,\n        uint256 amount,\n        bytes calldata metadata\n    ) external;\n\n    function initialize(\n        uint32 _networkID,\n        address _gasTokenAddress,\n        uint32 _gasTokenNetwork,\n        IBasePolygonZkEVMGlobalExitRoot _globalExitRootManager,\n        address _polygonRollupManager,\n        bytes memory _gasTokenMetadata\n    ) external;\n\n    function getTokenMetadata(\n        address token\n    ) external view returns (bytes memory);\n}\n"
    },
    "@0xpolygonhermez/zkevm-contracts/contracts/v2/interfaces/IPolygonZkEVMGlobalExitRootV2.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.20;\nimport \"../../interfaces/IBasePolygonZkEVMGlobalExitRoot.sol\";\n\ninterface IPolygonZkEVMGlobalExitRootV2 is IBasePolygonZkEVMGlobalExitRoot {\n    function getLastGlobalExitRoot() external view returns (bytes32);\n\n    function getRoot() external view returns (bytes32);\n}\n"
    },
    "@0xpolygonhermez/zkevm-contracts/contracts/v2/lib/DepositContractBase.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.20;\n\n/**\n * This contract will be used as a helper for all the sparse merkle tree related functions\n * Based on the implementation of the deposit eth2.0 contract https://github.com/ethereum/consensus-specs/blob/dev/solidity_deposit_contract/deposit_contract.sol\n */\ncontract DepositContractBase {\n    /**\n     * @dev Thrown when the merkle tree is full\n     */\n    error MerkleTreeFull();\n\n    // Merkle tree levels\n    uint256 internal constant _DEPOSIT_CONTRACT_TREE_DEPTH = 32;\n\n    // This ensures `depositCount` will fit into 32-bits\n    uint256 internal constant _MAX_DEPOSIT_COUNT =\n        2 ** _DEPOSIT_CONTRACT_TREE_DEPTH - 1;\n\n    // Branch array which contains the necessary sibilings to compute the next root when a new\n    // leaf is inserted\n    bytes32[_DEPOSIT_CONTRACT_TREE_DEPTH] internal _branch;\n\n    // Counter of current deposits\n    uint256 public depositCount;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     */\n    uint256[10] private _gap;\n\n    /**\n     * @notice Computes and returns the merkle root\n     */\n    function getRoot() public view virtual returns (bytes32) {\n        bytes32 node;\n        uint256 size = depositCount;\n        bytes32 currentZeroHashHeight = 0;\n\n        for (\n            uint256 height = 0;\n            height < _DEPOSIT_CONTRACT_TREE_DEPTH;\n            height++\n        ) {\n            if (((size >> height) & 1) == 1)\n                node = keccak256(abi.encodePacked(_branch[height], node));\n            else\n                node = keccak256(abi.encodePacked(node, currentZeroHashHeight));\n\n            currentZeroHashHeight = keccak256(\n                abi.encodePacked(currentZeroHashHeight, currentZeroHashHeight)\n            );\n        }\n        return node;\n    }\n\n    /**\n     * @notice Add a new leaf to the merkle tree\n     * @param leaf Leaf\n     */\n    function _addLeaf(bytes32 leaf) internal {\n        bytes32 node = leaf;\n\n        // Avoid overflowing the Merkle tree (and prevent edge case in computing `_branch`)\n        if (depositCount >= _MAX_DEPOSIT_COUNT) {\n            revert MerkleTreeFull();\n        }\n\n        // Add deposit data root to Merkle tree (update a single `_branch` node)\n        uint256 size = ++depositCount;\n        for (\n            uint256 height = 0;\n            height < _DEPOSIT_CONTRACT_TREE_DEPTH;\n            height++\n        ) {\n            if (((size >> height) & 1) == 1) {\n                _branch[height] = node;\n                return;\n            }\n            node = keccak256(abi.encodePacked(_branch[height], node));\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Verify merkle proof\n     * @param leafHash Leaf hash\n     * @param smtProof Smt proof\n     * @param index Index of the leaf\n     * @param root Merkle root\n     */\n    function verifyMerkleProof(\n        bytes32 leafHash,\n        bytes32[_DEPOSIT_CONTRACT_TREE_DEPTH] calldata smtProof,\n        uint32 index,\n        bytes32 root\n    ) public pure returns (bool) {\n        return calculateRoot(leafHash, smtProof, index) == root;\n    }\n\n    /**\n     * @notice Calculate root from merkle proof\n     * @param leafHash Leaf hash\n     * @param smtProof Smt proof\n     * @param index Index of the leaf\n     */\n    function calculateRoot(\n        bytes32 leafHash,\n        bytes32[_DEPOSIT_CONTRACT_TREE_DEPTH] calldata smtProof,\n        uint32 index\n    ) public pure returns (bytes32) {\n        bytes32 node = leafHash;\n\n        // Compute root\n        for (\n            uint256 height = 0;\n            height < _DEPOSIT_CONTRACT_TREE_DEPTH;\n            height++\n        ) {\n            if (((index >> height) & 1) == 1)\n                node = keccak256(abi.encodePacked(smtProof[height], node));\n            else node = keccak256(abi.encodePacked(node, smtProof[height]));\n        }\n\n        return node;\n    }\n}\n"
    },
    "@0xpolygonhermez/zkevm-contracts/contracts/v2/lib/DepositContractV2.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"./DepositContractBase.sol\";\n\n/**\n * This contract will be used in the PolygonZkEVMBridge contract, it inherits the DepositContractBase and adds the logic\n * to calculate the leaf of the tree\n */\ncontract DepositContractV2 is ReentrancyGuardUpgradeable, DepositContractBase {\n    /**\n     * @notice Given the leaf data returns the leaf value\n     * @param leafType Leaf type -->  [0] transfer Ether / ERC20 tokens, [1] message\n     * @param originNetwork Origin Network\n     * @param originAddress [0] Origin token address, 0 address is reserved for ether, [1] msg.sender of the message\n     * @param destinationNetwork Destination network\n     * @param destinationAddress Destination address\n     * @param amount [0] Amount of tokens/ether, [1] Amount of ether\n     * @param metadataHash Hash of the metadata\n     */\n    function getLeafValue(\n        uint8 leafType,\n        uint32 originNetwork,\n        address originAddress,\n        uint32 destinationNetwork,\n        address destinationAddress,\n        uint256 amount,\n        bytes32 metadataHash\n    ) public pure returns (bytes32) {\n        return\n            keccak256(\n                abi.encodePacked(\n                    leafType,\n                    originNetwork,\n                    originAddress,\n                    destinationNetwork,\n                    destinationAddress,\n                    amount,\n                    metadataHash\n                )\n            );\n    }\n}\n"
    },
    "@0xpolygonhermez/zkevm-contracts/contracts/v2/lib/PolygonZkEVMGlobalExitRootBaseStorage.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.20;\nimport \"../interfaces/IPolygonZkEVMGlobalExitRootV2.sol\";\n\n/**\n * Since the current contract of PolygonZkEVMGlobalExitRoot will be upgraded to a PolygonZkEVMGlobalExitRootV2, and it will implement\n * the DepositContractBase, this base is needed to preserve the previous storage slots\n */\nabstract contract PolygonZkEVMGlobalExitRootBaseStorage is\n    IPolygonZkEVMGlobalExitRootV2\n{\n    // Rollup root, contains all exit roots of all rollups\n    bytes32 public lastRollupExitRoot;\n\n    // Mainnet exit root, this will be updated every time a deposit is made in mainnet\n    bytes32 public lastMainnetExitRoot;\n\n    // Store every global exit root: Root --> blockhash\n    // Note that previously recoded global exit roots in previous versions, timestamp was recorded instead of blockhash\n    mapping(bytes32 => uint256) public globalExitRootMap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../extensions/draft-IERC20PermitUpgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20PermitUpgradeable token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC4626.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4626.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\nimport {IERC20Metadata} from \"../token/ERC20/extensions/IERC20Metadata.sol\";\n\n/**\n * @dev Interface of the ERC4626 \"Tokenized Vault Standard\", as defined in\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\n */\ninterface IERC4626 is IERC20, IERC20Metadata {\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\n\n    event Withdraw(\n        address indexed sender,\n        address indexed receiver,\n        address indexed owner,\n        uint256 assets,\n        uint256 shares\n    );\n\n    /**\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n     *\n     * - MUST be an ERC-20 token contract.\n     * - MUST NOT revert.\n     */\n    function asset() external view returns (address assetTokenAddress);\n\n    /**\n     * @dev Returns the total amount of the underlying asset that is “managed” by Vault.\n     *\n     * - SHOULD include any compounding that occurs from yield.\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT revert.\n     */\n    function totalAssets() external view returns (uint256 totalManagedAssets);\n\n    /**\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n     * through a deposit call.\n     *\n     * - MUST return a limited value if receiver is subject to some deposit limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n     * - MUST NOT revert.\n     */\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n     *   in the same transaction.\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   deposit execution, and are accounted for during deposit.\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n     * - MUST return a limited value if receiver is subject to some mint limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n     * - MUST NOT revert.\n     */\n    function maxMint(address receiver) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n     *   same transaction.\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\n     */\n    function previewMint(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n     *   execution, and are accounted for during mint.\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n     * Vault, through a withdraw call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n     *   called\n     *   in the same transaction.\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   withdraw execution, and are accounted for during withdraw.\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n     * through a redeem call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n     *   same transaction.\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\n     */\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   redeem execution, and are accounted for during redeem.\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC4626.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20, IERC20Metadata, ERC20} from \"../ERC20.sol\";\nimport {SafeERC20} from \"../utils/SafeERC20.sol\";\nimport {IERC4626} from \"../../../interfaces/IERC4626.sol\";\nimport {Math} from \"../../../utils/math/Math.sol\";\n\n/**\n * @dev Implementation of the ERC4626 \"Tokenized Vault Standard\" as defined in\n * https://eips.ethereum.org/EIPS/eip-4626[EIP-4626].\n *\n * This extension allows the minting and burning of \"shares\" (represented using the ERC20 inheritance) in exchange for\n * underlying \"assets\" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends\n * the ERC20 standard. Any additional extensions included along it would affect the \"shares\" token represented by this\n * contract and not the \"assets\" token which is an independent contract.\n *\n * [CAUTION]\n * ====\n * In empty (or nearly empty) ERC-4626 vaults, deposits are at high risk of being stolen through frontrunning\n * with a \"donation\" to the vault that inflates the price of a share. This is variously known as a donation or inflation\n * attack and is essentially a problem of slippage. Vault deployers can protect against this attack by making an initial\n * deposit of a non-trivial amount of the asset, such that price manipulation becomes infeasible. Withdrawals may\n * similarly be affected by slippage. Users can protect against this attack as well as unexpected slippage in general by\n * verifying the amount received is as expected, using a wrapper that performs these checks such as\n * https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router].\n *\n * Since v4.9, this implementation uses virtual assets and shares to mitigate that risk. The `_decimalsOffset()`\n * corresponds to an offset in the decimal representation between the underlying asset's decimals and the vault\n * decimals. This offset also determines the rate of virtual shares to virtual assets in the vault, which itself\n * determines the initial exchange rate. While not fully preventing the attack, analysis shows that the default offset\n * (0) makes it non-profitable, as a result of the value being captured by the virtual shares (out of the attacker's\n * donation) matching the attacker's expected gains. With a larger offset, the attack becomes orders of magnitude more\n * expensive than it is profitable. More details about the underlying math can be found\n * xref:erc4626.adoc#inflation-attack[here].\n *\n * The drawback of this approach is that the virtual shares do capture (a very small) part of the value being accrued\n * to the vault. Also, if the vault experiences losses, the users try to exit the vault, the virtual shares and assets\n * will cause the first user to exit to experience reduced losses in detriment to the last users that will experience\n * bigger losses. Developers willing to revert back to the pre-v4.9 behavior just need to override the\n * `_convertToShares` and `_convertToAssets` functions.\n *\n * To learn more, check out our xref:ROOT:erc4626.adoc[ERC-4626 guide].\n * ====\n */\nabstract contract ERC4626 is ERC20, IERC4626 {\n    using Math for uint256;\n\n    IERC20 private immutable _asset;\n    uint8 private immutable _underlyingDecimals;\n\n    /**\n     * @dev Attempted to deposit more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxDeposit(address receiver, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to mint more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxMint(address receiver, uint256 shares, uint256 max);\n\n    /**\n     * @dev Attempted to withdraw more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to redeem more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\n\n    /**\n     * @dev Set the underlying asset contract. This must be an ERC20-compatible contract (ERC20 or ERC777).\n     */\n    constructor(IERC20 asset_) {\n        (bool success, uint8 assetDecimals) = _tryGetAssetDecimals(asset_);\n        _underlyingDecimals = success ? assetDecimals : 18;\n        _asset = asset_;\n    }\n\n    /**\n     * @dev Attempts to fetch the asset decimals. A return value of false indicates that the attempt failed in some way.\n     */\n    function _tryGetAssetDecimals(IERC20 asset_) private view returns (bool, uint8) {\n        (bool success, bytes memory encodedDecimals) = address(asset_).staticcall(\n            abi.encodeCall(IERC20Metadata.decimals, ())\n        );\n        if (success && encodedDecimals.length >= 32) {\n            uint256 returnedDecimals = abi.decode(encodedDecimals, (uint256));\n            if (returnedDecimals <= type(uint8).max) {\n                return (true, uint8(returnedDecimals));\n            }\n        }\n        return (false, 0);\n    }\n\n    /**\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This\n     * \"original\" value is cached during construction of the vault contract. If this read operation fails (e.g., the\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals.\n     *\n     * See {IERC20Metadata-decimals}.\n     */\n    function decimals() public view virtual override(IERC20Metadata, ERC20) returns (uint8) {\n        return _underlyingDecimals + _decimalsOffset();\n    }\n\n    /** @dev See {IERC4626-asset}. */\n    function asset() public view virtual returns (address) {\n        return address(_asset);\n    }\n\n    /** @dev See {IERC4626-totalAssets}. */\n    function totalAssets() public view virtual returns (uint256) {\n        return _asset.balanceOf(address(this));\n    }\n\n    /** @dev See {IERC4626-convertToShares}. */\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /** @dev See {IERC4626-convertToAssets}. */\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /** @dev See {IERC4626-maxDeposit}. */\n    function maxDeposit(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /** @dev See {IERC4626-maxMint}. */\n    function maxMint(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /** @dev See {IERC4626-maxWithdraw}. */\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Floor);\n    }\n\n    /** @dev See {IERC4626-maxRedeem}. */\n    function maxRedeem(address owner) public view virtual returns (uint256) {\n        return balanceOf(owner);\n    }\n\n    /** @dev See {IERC4626-previewDeposit}. */\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /** @dev See {IERC4626-previewMint}. */\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Ceil);\n    }\n\n    /** @dev See {IERC4626-previewWithdraw}. */\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Ceil);\n    }\n\n    /** @dev See {IERC4626-previewRedeem}. */\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /** @dev See {IERC4626-deposit}. */\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256) {\n        uint256 maxAssets = maxDeposit(receiver);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);\n        }\n\n        uint256 shares = previewDeposit(assets);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return shares;\n    }\n\n    /** @dev See {IERC4626-mint}.\n     *\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\n     * In this case, the shares will be minted without requiring any assets to be deposited.\n     */\n    function mint(uint256 shares, address receiver) public virtual returns (uint256) {\n        uint256 maxShares = maxMint(receiver);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxMint(receiver, shares, maxShares);\n        }\n\n        uint256 assets = previewMint(shares);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return assets;\n    }\n\n    /** @dev See {IERC4626-withdraw}. */\n    function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxAssets = maxWithdraw(owner);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\n        }\n\n        uint256 shares = previewWithdraw(assets);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return shares;\n    }\n\n    /** @dev See {IERC4626-redeem}. */\n    function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxShares = maxRedeem(owner);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\n        }\n\n        uint256 assets = previewRedeem(shares);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return assets;\n    }\n\n    /**\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\n     */\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return assets.mulDiv(totalSupply() + 10 ** _decimalsOffset(), totalAssets() + 1, rounding);\n    }\n\n    /**\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\n     */\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 10 ** _decimalsOffset(), rounding);\n    }\n\n    /**\n     * @dev Deposit/mint common workflow.\n     */\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\n        // If _asset is ERC777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\n        // assets are transferred and before the shares are minted, which is a valid state.\n        // slither-disable-next-line reentrancy-no-eth\n        SafeERC20.safeTransferFrom(_asset, caller, address(this), assets);\n        _mint(receiver, shares);\n\n        emit Deposit(caller, receiver, assets, shares);\n    }\n\n    /**\n     * @dev Withdraw/redeem common workflow.\n     */\n    function _withdraw(\n        address caller,\n        address receiver,\n        address owner,\n        uint256 assets,\n        uint256 shares\n    ) internal virtual {\n        if (caller != owner) {\n            _spendAllowance(owner, caller, shares);\n        }\n\n        // If _asset is ERC777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\n        // shares are burned and after the assets are transferred, which is a valid state.\n        _burn(owner, shares);\n        SafeERC20.safeTransfer(_asset, receiver, assets);\n\n        emit Withdraw(caller, receiver, owner, assets, shares);\n    }\n\n    function _decimalsOffset() internal view virtual returns (uint8) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/BridgedStakingStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/interfaces/IERC4626.sol\";\r\nimport \"@0xpolygonhermez/zkevm-contracts/contracts/v2/interfaces/IPolygonZkEVMBridgeV2.sol\";\r\nimport \"./interfaces/ISwitcher.sol\";\r\nimport \"./interfaces/IBridgingStrategy.sol\";\r\nimport \"./interfaces/IWETH9.sol\";\r\n\r\n/// @title ETH bridged staking\r\n/// @notice Bridging assets and messages between zkEVM and Ethereum via LxLy bridge\r\n/// @author a17\r\ncontract BridgedStakingStrategy is IBridgingStrategy {\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                         CONSTANTS                          */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    uint public constant SHUTTLE_FORCE_BRIDGE = 10e18;\r\n\r\n    uint public constant SHUTTLE_FORCE_CLAIM = 10e18;\r\n\r\n    uint public constant MAX_WAIT_TIME_FOR_BRIDGING = 86400;\r\n\r\n    uint public constant ENZYME_VAULT_REDEEM_TIMELOCK = 86400;\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                          STORAGE                           */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    /// @inheritdoc IBridgingStrategy\r\n    address public immutable asset;\r\n\r\n    /// @inheritdoc IBridgingStrategy\r\n    address public immutable switcher;\r\n\r\n    uint32 public destinationNetwork;\r\n\r\n    /// @inheritdoc IBridgingStrategy\r\n    address public destination;\r\n\r\n    /// @dev LxLy bridge endpoint\r\n    address public immutable bridge;\r\n\r\n    /// @inheritdoc IBridgingStrategy\r\n    uint public bridgedAssets;\r\n\r\n    /// @inheritdoc IBridgingStrategy\r\n    uint public pendingRequestedBridgingAssets;\r\n\r\n    uint public lastBridgeTime;\r\n\r\n    uint public lastEnzymeDepositTime;\r\n\r\n    bool internal _isWethWithdrawing;\r\n\r\n    mapping(address user => uint shares) public requests;\r\n\r\n    uint public totalRequestedVaultSharesForClaim;\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                          EVENTS                            */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    error DestinationIsNotSet();\r\n    error Already();\r\n    error NotEnoughBridgedAssets();\r\n    error NotAllAssetsAreBridged();\r\n    error CantBridge();\r\n    error NoClaimRequestForUser(address user);\r\n    error OnlySwitcherCanDoThis();\r\n    error OnlyGovernanceCanDoThis();\r\n    error OnlyBridgeCanDoThis();\r\n    error WaitForCurrentBridgingDone();\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                      INITIALIZATION                        */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    constructor(address switcher_, address bridge_, uint32 destinationNetwork_) {\r\n        switcher = switcher_;\r\n        bridge = bridge_;\r\n        destinationNetwork = destinationNetwork_;\r\n        asset = ISwitcher(switcher_).asset();\r\n    }\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                        CALLBACKS                           */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    receive() external payable {\r\n        if (!_isWethWithdrawing && pendingRequestedBridgingAssets > 0) {\r\n            IWETH9(asset).deposit{value: msg.value}();\r\n            if (msg.sender != bridge) {\r\n                revert OnlyBridgeCanDoThis();\r\n            }\r\n\r\n            pendingRequestedBridgingAssets = 0;\r\n        }\r\n    }\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                        MODIFIERS                           */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    modifier onlySwitcher() {\r\n        _requireSwitcher();\r\n        _;\r\n    }\r\n\r\n    modifier onlyGovernance() {\r\n        _requireGovernance();\r\n        _;\r\n    }\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                      RESTRICTED ACTIONS                    */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    function setDestination(address destination_) external onlyGovernance {\r\n        if (destination != address(0)) {\r\n            revert Already();\r\n        }\r\n        destination = destination_;\r\n        emit Destination(destination_);\r\n    }\r\n\r\n    /// @inheritdoc IBridgingStrategy\r\n    function requestClaimAllAssets() external onlySwitcher {\r\n        if (pendingRequestedBridgingAssets > 0) {\r\n            revert WaitForCurrentBridgingDone();\r\n        }\r\n        uint amount = type(uint).max;\r\n\r\n        IPolygonZkEVMBridgeV2(bridge).bridgeMessage(\r\n            destinationNetwork,\r\n            destination,\r\n            true,\r\n            abi.encodePacked(amount)\r\n        );\r\n\r\n        lastBridgeTime = block.timestamp;\r\n        pendingRequestedBridgingAssets = bridgedAssets;\r\n        bridgedAssets = 0;\r\n\r\n        emit BridgeRequestMessageToL1(amount);\r\n    }\r\n\r\n    /// @inheritdoc IBridgingStrategy\r\n    function withdrawAllToSwitcher() external onlySwitcher returns(uint amount) {\r\n        if (bridgedAssets > 0 || pendingRequestedBridgingAssets > 0) {\r\n            revert NotAllAssetsAreBridged();\r\n        }\r\n        amount = IERC20(asset).balanceOf(address (this));\r\n        IERC20(asset).transfer(switcher, amount);\r\n    }\r\n\r\n    /// @inheritdoc IBridgingStrategy\r\n    function withdrawToSwitcher(uint amount) external onlySwitcher {\r\n        uint withdrawAmount = amount;\r\n        if (IERC20(asset).balanceOf(address(this)) < withdrawAmount) {\r\n            revert NotEnoughBridgedAssets();\r\n        }\r\n        IERC20(asset).transfer(switcher, withdrawAmount);\r\n    }\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                         USER ACTIONS                       */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    /// @inheritdoc IBridgingStrategy\r\n    function requestClaimAssets(uint vaultSharesAmount) external {\r\n        IERC20(_getVault()).transferFrom(msg.sender, address(this), vaultSharesAmount);\r\n        requests[msg.sender] += vaultSharesAmount;\r\n        totalRequestedVaultSharesForClaim += vaultSharesAmount;\r\n        emit RequestAssets(msg.sender, vaultSharesAmount);\r\n    }\r\n\r\n    /// @inheritdoc IBridgingStrategy\r\n    function claimRequestedAssets(address[] calldata sharesHolders) external {\r\n        uint len = sharesHolders.length;\r\n        IERC4626 vault = IERC4626(_getVault());\r\n        uint[] memory gotAssets = new uint[](len);\r\n        uint totalSharesToBurn;\r\n        for (uint i; i < len; ++i) {\r\n            uint sharesToBurn = requests[sharesHolders[i]];\r\n            if (sharesToBurn == 0) {\r\n                revert NoClaimRequestForUser(sharesHolders[i]);\r\n            }\r\n            gotAssets[i] = vault.previewRedeem(sharesToBurn);\r\n            totalSharesToBurn += sharesToBurn;\r\n        }\r\n\r\n        vault.redeem(totalSharesToBurn, address(this), address(this));\r\n\r\n        for (uint i; i < len; ++i) {\r\n            IERC20(asset).transfer(sharesHolders[i], gotAssets[i]);\r\n        }\r\n    }\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                       PUBLIC ACTIONS                       */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    /// @inheritdoc IBridgingStrategy\r\n    function callBridge() external {\r\n        if (destination == address(0)) {\r\n            revert DestinationIsNotSet();\r\n        }\r\n\r\n        (bool need, bool toL1, uint amount) = needBridgingNow();\r\n\r\n        if (!need) {\r\n            revert CantBridge();\r\n        }\r\n\r\n        if (toL1) {\r\n            _isWethWithdrawing = true;\r\n            IWETH9(asset).withdraw(amount);\r\n            _isWethWithdrawing = false;\r\n\r\n            IPolygonZkEVMBridgeV2(bridge).bridgeAsset{value: amount}(\r\n                destinationNetwork,\r\n                destination,\r\n                amount,\r\n                address(0),\r\n                true,\r\n                bytes(\"0\")\r\n            );\r\n\r\n            lastBridgeTime = block.timestamp;\r\n            lastEnzymeDepositTime = block.timestamp;\r\n            bridgedAssets += amount;\r\n\r\n            emit BridgeAssetsToL1(amount);\r\n        } else {\r\n            IPolygonZkEVMBridgeV2(bridge).bridgeMessage(\r\n                destinationNetwork,\r\n                destination,\r\n                true,\r\n                abi.encodePacked(amount)\r\n            );\r\n\r\n            lastBridgeTime = block.timestamp;\r\n            bridgedAssets -= amount;\r\n            pendingRequestedBridgingAssets = amount;\r\n\r\n            emit BridgeRequestMessageToL1(amount);\r\n        }\r\n    }\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                      VIEW FUNCTIONS                        */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    /// @inheritdoc IBridgingStrategy\r\n    function totalAssets() external view returns (uint) {\r\n        return IERC20(asset).balanceOf(address (this)) + bridgedAssets + pendingRequestedBridgingAssets;\r\n    }\r\n\r\n    /// @inheritdoc IBridgingStrategy\r\n    function totalRequested() public view returns (uint) {\r\n        return IERC4626(_getVault()).convertToAssets(totalRequestedVaultSharesForClaim);\r\n    }\r\n\r\n    /// @inheritdoc IBridgingStrategy\r\n    function needBridgingNow() public view returns (bool need, bool toL1, uint amount) {\r\n        if (pendingRequestedBridgingAssets > 0) {\r\n            return (false, false, 0);\r\n        }\r\n\r\n        uint bal = IERC20(asset).balanceOf(address(this));\r\n        uint _totalRequested = totalRequested();\r\n\r\n        if (bal > _totalRequested) {\r\n            amount = bal - _totalRequested;\r\n            toL1 = true;\r\n\r\n            if (\r\n                amount >= SHUTTLE_FORCE_BRIDGE\r\n                || block.timestamp - lastBridgeTime >= MAX_WAIT_TIME_FOR_BRIDGING\r\n            ) {\r\n                need = true;\r\n            }\r\n        } else {\r\n            uint vaultBuffer = IERC20(asset).balanceOf(_getVault());\r\n            if (_totalRequested - bal > vaultBuffer) {\r\n                amount = _totalRequested - bal;\r\n                if (amount > bridgedAssets) {\r\n                    amount = bridgedAssets;\r\n                }\r\n                if (\r\n                    amount > 0\r\n                    && block.timestamp - lastEnzymeDepositTime >= ENZYME_VAULT_REDEEM_TIMELOCK\r\n                    && (\r\n                    amount >= SHUTTLE_FORCE_CLAIM\r\n                    || block.timestamp - lastBridgeTime >= MAX_WAIT_TIME_FOR_BRIDGING\r\n                )\r\n                ) {\r\n                    need = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                       INTERNAL LOGIC                       */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    function _getVault() internal view returns (address) {\r\n        return ISwitcher(switcher).vault();\r\n    }\r\n\r\n    function _requireSwitcher() internal view {\r\n        if (msg.sender != switcher) {\r\n            revert OnlySwitcherCanDoThis();\r\n        }\r\n    }\r\n\r\n    function _requireGovernance() internal view {\r\n        if (msg.sender != ISwitcher(switcher).governance()) {\r\n            revert OnlyGovernanceCanDoThis();\r\n        }\r\n    }\r\n\r\n}\r\n"
    },
    "contracts/EnzymeStaker.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@0xpolygonhermez/zkevm-contracts/contracts/v2/interfaces/IPolygonZkEVMBridgeV2.sol\";\r\nimport \"@0xpolygonhermez/zkevm-contracts/contracts/interfaces/IBridgeMessageReceiver.sol\";\r\nimport \"./interfaces/IDepositWrapper.sol\";\r\nimport \"./interfaces/IComptroller.sol\";\r\nimport \"./interfaces/IWETH9.sol\";\r\n\r\n/// @title Stake bridged ETH to Enzyme Diva Early Staker Vault\r\n/// @author a17\r\ncontract EnzymeStaker is IBridgeMessageReceiver {\r\n    address public immutable bridge;\r\n\r\n    address public immutable depositWrapper;\r\n\r\n    address public immutable comptroller;\r\n\r\n    address public immutable strategyL2;\r\n\r\n    uint24 internal immutable id;\r\n\r\n    uint32 internal immutable idL2;\r\n\r\n    address internal immutable weth;\r\n\r\n    bool internal isClaiming;\r\n\r\n    error ClaimByThisContractOnly();\r\n\r\n    event Setup(address bridge, address comptroller, address depositWrapper, address strategyL2, uint24 id, uint32 idL2, address weth);\r\n    event ClaimRedemption(uint amount, uint gotEther);\r\n\r\n    constructor(address bridge_, address comptroller_, address depositWrapper_, address strategyL2_, uint24 id_, uint24 idL2_, address weth_) {\r\n        bridge = bridge_;\r\n        depositWrapper = depositWrapper_;\r\n        comptroller = comptroller_;\r\n        strategyL2 = strategyL2_;\r\n        id = id_;\r\n        idL2 = idL2_;\r\n        weth = weth_;\r\n\r\n        emit Setup(bridge_, comptroller_, depositWrapper_, strategyL2_, id_, idL2_, weth_);\r\n    }\r\n\r\n    receive() external payable {\r\n        if (bridge == msg.sender) {\r\n            IDepositWrapper(depositWrapper).exchangeEthAndBuyShares{value: msg.value}(\r\n                comptroller,\r\n                1,\r\n                address(0),\r\n                address(0),\r\n                \"\",\r\n                0\r\n            );\r\n        }\r\n    }\r\n\r\n    function onMessageReceived(\r\n        address,\r\n        uint32,\r\n        bytes memory\r\n    ) external payable {\r\n        if (!isClaiming) {\r\n            revert ClaimByThisContractOnly();\r\n        }\r\n    }\r\n\r\n    function claimMessage(\r\n        bytes32[32] calldata smtProofLocalExitRoot,\r\n        bytes32[32] calldata smtProofRollupExitRoot,\r\n        uint globalIndex,\r\n        bytes32 mainnetExitRoot,\r\n        bytes32 rollupExitRoot,\r\n        bytes calldata metadata\r\n    ) external {\r\n        isClaiming = true;\r\n        IPolygonZkEVMBridgeV2(bridge).claimMessage(\r\n            smtProofLocalExitRoot,\r\n            smtProofRollupExitRoot,\r\n            globalIndex,\r\n            mainnetExitRoot,\r\n            rollupExitRoot,\r\n            idL2,\r\n            strategyL2,\r\n            id,\r\n            address(this),\r\n            0,\r\n            metadata\r\n        );\r\n        isClaiming = false;\r\n\r\n        uint amount = _toUint(metadata, 0);\r\n\r\n        IComptroller(comptroller).redeemSharesInKind(\r\n            address(this),\r\n            amount,\r\n            new address[](0),\r\n            new address[](0)\r\n        );\r\n\r\n        address _weth = weth;\r\n\r\n        uint balance = IERC20(_weth).balanceOf(address(this));\r\n        IWETH9(_weth).withdraw(balance);\r\n\r\n        IPolygonZkEVMBridgeV2(bridge).bridgeAsset{value: balance}(\r\n            idL2,\r\n            strategyL2,\r\n            balance,\r\n            address(0),\r\n            true,\r\n            bytes(\"0\")\r\n        );\r\n\r\n        emit ClaimRedemption(amount, balance);\r\n    }\r\n\r\n    function _toUint(bytes memory _bytes, uint _start) internal pure returns (uint out) {\r\n        assembly {\r\n            out := mload(add(add(_bytes, 0x20), _start))\r\n        }\r\n    }\r\n\r\n}\r\n"
    },
    "contracts/Gauge.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"./StakelessPoolBase.sol\";\r\nimport \"./interfaces/IGauge.sol\";\r\n\r\n/// @title Stakeless pool for vaults\r\n/// @author belbix\r\n/// @author a17\r\ncontract Gauge is StakelessPoolBase {\r\n    // *************************************************************\r\n    //                        VARIABLES\r\n    // *************************************************************\r\n\r\n    address public stakingToken;\r\n\r\n    // *************************************************************\r\n    //                        EVENTS\r\n    // *************************************************************\r\n\r\n    event StakingToken(address token);\r\n    event Deposit(address indexed account, uint amount);\r\n    event Withdraw(address indexed account, uint amount, bool full, uint veId);\r\n\r\n    // *************************************************************\r\n    //                        INIT\r\n    // *************************************************************\r\n\r\n    constructor(\r\n        address defaultRewardToken_,\r\n        uint duration_,\r\n        address governance_\r\n    ) StakelessPoolBase(defaultRewardToken_, duration_, governance_) {}\r\n\r\n    function setStakingToken(address stakingToken_) external {\r\n        require (stakingToken == address(0), \"Already\");\r\n        stakingToken = stakingToken_;\r\n        emit StakingToken(stakingToken_);\r\n    }\r\n\r\n    // *************************************************************\r\n    //                        CLAIMS\r\n    // *************************************************************\r\n\r\n    function getReward(address account, address[] memory tokens) external {\r\n        _getReward(account, tokens);\r\n    }\r\n\r\n    function getAllRewards(address account) external {\r\n        _getAllRewards(account);\r\n    }\r\n\r\n    function _getAllRewards(address account) internal {\r\n        address[] storage rts = rewardTokens;\r\n        uint length = rts.length;\r\n        address[] memory tokens = new address[](length + 1);\r\n        for (uint i; i < length; ++i) {\r\n            tokens[i] = rts[i];\r\n        }\r\n        tokens[length] = defaultRewardToken;\r\n        _getReward(account, tokens);\r\n    }\r\n\r\n    function _getReward(address account, address[] memory tokens) internal {\r\n        _getReward(account, tokens, account);\r\n    }\r\n\r\n    // *************************************************************\r\n    //                   VIRTUAL DEPOSIT/WITHDRAW\r\n    // *************************************************************\r\n\r\n    /// @dev Must be called from stakingToken when user balance changed.\r\n    function handleBalanceChange(address account) external {\r\n        address _stakingToken = msg.sender;\r\n        require(stakingToken == _stakingToken, \"Wrong staking token\");\r\n\r\n        uint stakedBalance = balanceOf[account];\r\n        uint actualBalance = IERC20(_stakingToken).balanceOf(account);\r\n        if (stakedBalance < actualBalance) {\r\n            _deposit(account, actualBalance - stakedBalance);\r\n        } else if (stakedBalance > actualBalance) {\r\n            _withdraw(account, stakedBalance - actualBalance, actualBalance == 0);\r\n        }\r\n    }\r\n\r\n    function _deposit(\r\n        address account,\r\n        uint amount\r\n    ) internal {\r\n        _registerBalanceIncreasing(account, amount);\r\n        emit Deposit(account, amount);\r\n    }\r\n\r\n    function _withdraw(\r\n        address account,\r\n        uint amount,\r\n        bool fullWithdraw\r\n    ) internal {\r\n        _registerBalanceDecreasing(account, amount);\r\n        emit Withdraw(\r\n            account,\r\n            amount,\r\n            fullWithdraw,\r\n            0\r\n        );\r\n    }\r\n\r\n    // *************************************************************\r\n    //                   REWARDS DISTRIBUTION\r\n    // *************************************************************\r\n\r\n    function notifyRewardAmount(address token, uint amount) external nonReentrant {\r\n        _notifyRewardAmount(token, amount, true);\r\n    }\r\n\r\n}\r\n"
    },
    "contracts/GaugeRewarder.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"./interfaces/IGauge.sol\";\r\nimport \"./interfaces/IRewardToken.sol\";\r\n\r\n/// @title Gauge rewards filler\r\n/// @dev Compatible with Gelato Solidity Functions service\r\n/// @author a17\r\ncontract GaugeRewarder {\r\n\r\n    address public immutable gauge;\r\n\r\n    address public immutable rewardToken;\r\n\r\n    uint public immutable duration;\r\n\r\n    uint public immutable rewardAmountPerDuration;\r\n\r\n    uint public lastExec;\r\n\r\n    error WaitFor(uint timestamp);\r\n\r\n    constructor(address gauge_, address rewardToken_, uint rewardAmountPerDuration_) {\r\n        gauge = gauge_;\r\n        rewardToken = rewardToken_;\r\n        duration = IGauge(gauge_).duration();\r\n        rewardAmountPerDuration = rewardAmountPerDuration_;\r\n        IERC20(rewardToken_).approve(gauge_, type(uint).max);\r\n    }\r\n\r\n    function checker() public view returns (bool canExec, bytes memory execPayload) {\r\n        canExec = (block.timestamp - lastExec) > duration && IRewardToken(rewardToken).minter() == address(this);\r\n        execPayload = abi.encodeCall(GaugeRewarder.addRewards, ());\r\n    }\r\n\r\n    function addRewards() external {\r\n        (bool canExec,) = checker();\r\n        if (!canExec) {\r\n            revert WaitFor(lastExec + duration);\r\n        }\r\n\r\n        address _rewardToken = rewardToken;\r\n        uint _rewardAmountPerDuration = rewardAmountPerDuration;\r\n        IRewardToken(_rewardToken).mint(rewardAmountPerDuration);\r\n        IGauge(gauge).notifyRewardAmount(_rewardToken, _rewardAmountPerDuration);\r\n        lastExec = block.timestamp;\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IBridgingStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\n/// @notice Strategy for staking an asset on another network\ninterface IBridgingStrategy {\n    event Destination(address contractL1);\n    event RequestAssets(address indexed owner, uint vaultSharesAmount);\n    event BridgeAssetsToL1(uint amount);\n    event BridgeRequestMessageToL1(uint amount);\n\n    /// @notice Underlying asset\n    function asset() external view returns (address);\n\n    /// @notice Linked switcher that manage strategy of the vault\n    function switcher() external view returns (address);\n\n    /// @notice Strategy contract on another network\n    function destination() external view returns (address);\n\n    /// @notice Total amount of assets under strategy management\n    function totalAssets() external view returns (uint);\n\n    /// @notice Amount of assets under strategy management on another network\n    function bridgedAssets() external view returns (uint);\n\n    /// @notice Total requested assets for withdraw from another network\n    function totalRequested() external view returns (uint);\n\n    /// @notice Assets in process of bridging\n    function pendingRequestedBridgingAssets() external view returns (uint);\n\n    /// @notice Is ready to call bridge\n    /// @return need Is need to call bridge now\n    /// @return toL1 Need bridge assets to L1\n    /// @return amount Amount of asset for bridging or request withdraw\n    function needBridgingNow() external view returns (bool need, bool toL1, uint amount);\n\n    /// @notice Withdraws all assets under strategy management to the Switcher\n    /// @dev Will only be executed if all assets have already been transferred to the current network\n    function withdrawAllToSwitcher() external returns(uint amount);\n\n    /// @notice Withdraws assets to the Switcher\n    function withdrawToSwitcher(uint amount) external;\n\n    /// @notice Bridge assets for staking on another network or request withdraw from it\n    function callBridge() external;\n\n    /// @notice Send message to another network for claiming all invested assets\n    /// Only Switcher can call it.\n    function requestClaimAllAssets() external;\n\n    /// @notice Transfer vault shares from user and put claim request to shuttle\n    /// Only vault shares owner can call it.\n    function requestClaimAssets(uint vaultSharesAmount) external;\n\n    /// @notice Claim requested and bridged from another network assets\n    function claimRequestedAssets(address[] calldata sharesHolders) external;\n\n}\n"
    },
    "contracts/interfaces/IComptroller.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\ninterface IComptroller {\r\n    /// @notice Redeems a specified amount of the sender's shares\r\n    /// for a proportionate slice of the vault's assets\r\n    /// @param _recipient The account that will receive the proportionate slice of assets\r\n    /// @param _sharesQuantity The quantity of shares to redeem\r\n    /// @param _additionalAssets Additional (non-tracked) assets to claim\r\n    /// @param _assetsToSkip Tracked assets to forfeit\r\n    /// @return payoutAssets_ The assets paid out to the _recipient\r\n    /// @return payoutAmounts_ The amount of each asset paid out to the _recipient\r\n    /// @dev Redeem all shares of the sender by setting _sharesQuantity to the max uint value.\r\n    /// Any claim to passed _assetsToSkip will be forfeited entirely. This should generally\r\n    /// only be exercised if a bad asset is causing redemption to fail.\r\n    /// This function should never fail without a way to bypass the failure, which is assured\r\n    /// through two mechanisms:\r\n    /// 1. The FeeManager is called with the try/catch pattern to assure that calls to it\r\n    /// can never block redemption.\r\n    /// 2. If a token fails upon transfer(), that token can be skipped (and its balance forfeited)\r\n    /// by explicitly specifying _assetsToSkip.\r\n    /// Because of these assurances, shares should always be redeemable, with the exception\r\n    /// of the timelock period on shares actions that must be respected.\r\n    function redeemSharesInKind(\r\n        address _recipient,\r\n        uint256 _sharesQuantity,\r\n        address[] calldata _additionalAssets,\r\n        address[] calldata _assetsToSkip\r\n    ) external returns (address[] memory payoutAssets_, uint256[] memory payoutAmounts_);\r\n\r\n}\r\n"
    },
    "contracts/interfaces/IDepositWrapper.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\ninterface IDepositWrapper {\r\n    /// @notice Exchanges ETH into a fund's denomination asset and then buys shares\r\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\r\n    /// @param _minSharesQuantity The minimum quantity of shares to buy with the sent ETH\r\n    /// @param _exchange The exchange on which to execute the swap to the denomination asset\r\n    /// @param _exchangeApproveTarget The address that should be given an allowance of WETH\r\n    /// for the given _exchange\r\n    /// @param _exchangeData The data with which to call the exchange to execute the swap\r\n    /// to the denomination asset\r\n    /// @param _exchangeMinReceived The minimum amount of the denomination asset\r\n    /// to receive in the trade for investment (not necessary for WETH)\r\n    /// @return sharesReceived_ The actual amount of shares received\r\n    /// @dev Use a reasonable _exchangeMinReceived always, in case the exchange\r\n    /// does not perform as expected (low incoming asset amount, blend of assets, etc).\r\n    /// If the fund's denomination asset is WETH, _exchange, _exchangeApproveTarget, _exchangeData,\r\n    /// and _exchangeMinReceived will be ignored.\r\n    function exchangeEthAndBuyShares(\r\n        address _comptrollerProxy,\r\n        uint _minSharesQuantity,\r\n        address _exchange,\r\n        address _exchangeApproveTarget,\r\n        bytes calldata _exchangeData,\r\n        uint _exchangeMinReceived\r\n    ) external payable returns (uint sharesReceived_);\r\n\r\n}\r\n"
    },
    "contracts/interfaces/IGauge.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\ninterface IGauge {\r\n\r\n    function duration() external view returns (uint);\r\n\r\n    function left(address rewardToken) external view returns (uint);\r\n\r\n    function getReward(address account, address[] memory tokens) external;\r\n\r\n    function getAllRewards(address account) external;\r\n\r\n    function handleBalanceChange(address account) external;\r\n\r\n    function notifyRewardAmount(address token, uint amount) external;\r\n\r\n    function setStakingToken(address stakingToken_) external;\r\n}"
    },
    "contracts/interfaces/IRewardToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\ninterface IRewardToken {\r\n    function minter() external view returns(address);\r\n\r\n    function mint(uint amount) external;\r\n\r\n}"
    },
    "contracts/interfaces/ISwitcher.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\ninterface ISwitcher {\r\n    event NewStrategy(address strategy);\r\n    event AnnouncedNewStrategy(address strategy);\r\n    event CancelAnnouncedStrategy(address strategy);\r\n    event PendingStrategy(address strategy);\r\n    event Invested(address indexed strategy, uint amount);\r\n    event WithdrawFromStrategy(address indexed strategy, uint amount);\r\n\r\n    error OnlyVaultCanDoThis();\r\n    error OnlyGovernanceCanDoThis();\r\n    error Already();\r\n    error NoNewStrategyAnnounced();\r\n    error Timelock();\r\n    error NotPending();\r\n    error AssetsHaveNotYetBeenBridged();\r\n    error StrategyIsNowSwitching();\r\n    error StrategyIsNotSwitchingNow();\r\n\r\n    /// @notice Underlying asset\r\n    function asset() external view returns (address);\r\n\r\n    /// @notice Linked vault\r\n    function vault() external view returns (address);\r\n\r\n    /// @notice Current active strategy\r\n    function strategy() external view returns (address);\r\n\r\n    /// @notice New strategy\r\n    function pendingStrategy() external view returns (address);\r\n\r\n    /// @notice Address that can manage strategies\r\n    function governance() external view returns (address);\r\n\r\n    /// @notice Total assets managed by Switcher\r\n    function totalAssets() external view returns (uint);\r\n\r\n//    function doHardWork() external;\r\n\r\n    /// @notice Invest all available assets to strategy\r\n    function investAll() external;\r\n\r\n    /// @notice Withdraws all underlying assets to the vault\r\n    function withdrawAllToVault() external;\r\n\r\n    /// @notice Withdraws underlying assets to the vault\r\n    function withdrawToVault(uint amount) external;\r\n\r\n    /// @notice First time setup method called by vault\r\n    function setup(address asset_) external;\r\n}\r\n"
    },
    "contracts/interfaces/IWETH9.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\ninterface IWETH9 {\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint wad) external;\r\n}"
    },
    "contracts/RewardToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"./interfaces/IRewardToken.sol\";\r\n\r\n/// @title Token for rewarding via gauge\r\ncontract RewardToken is ERC20, IRewardToken {\r\n    address public immutable governance;\r\n\r\n    address public minter;\r\n\r\n    bool public finished;\r\n\r\n    constructor(string memory name_, string memory symbol_, address governance_) ERC20(name_, symbol_) {\r\n        governance = governance_;\r\n    }\r\n\r\n    function setMinter(address minter_) external {\r\n        require(msg.sender == governance && !finished);\r\n        minter = minter_;\r\n    }\r\n\r\n    function setFinished() external {\r\n        require(msg.sender == governance);\r\n        finished = true;\r\n    }\r\n\r\n    function mint(uint amount) external {\r\n        require(msg.sender == minter && !finished);\r\n        _mint(msg.sender, amount);\r\n    }\r\n\r\n}\r\n"
    },
    "contracts/StakelessPoolBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\nimport \"./interfaces/IGauge.sol\";\r\n\r\n/// @title Simplified abstract stakeless pool for multiple rewards\r\n/// @author belbix\r\n/// @author a17\r\nabstract contract StakelessPoolBase is IGauge, ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n\r\n    // *************************************************************\r\n    //                        CONSTANTS\r\n    // *************************************************************\r\n\r\n    /// @dev Precision for internal calculations\r\n    uint internal constant _PRECISION = 10 ** 27;\r\n\r\n    // *************************************************************\r\n    //                        VARIABLES\r\n    // *************************************************************\r\n\r\n    address public governance;\r\n\r\n    /// @dev Rewards are released over this period\r\n    uint public duration;\r\n\r\n    /// @dev This token will be always allowed as reward\r\n    address public defaultRewardToken;\r\n\r\n    /// @dev Supply adjusted on derived balance logic. Use for rewards boost.\r\n    uint public derivedSupply;\r\n\r\n    /// @dev Account => Staking token virtual balance. Can be adjusted regarding rewards boost logic.\r\n    mapping(address => uint) public derivedBalances;\r\n\r\n    /// @dev Account => User virtual balance of staking token.\r\n    mapping(address => uint) public balanceOf;\r\n\r\n    /// @dev Total amount of attached staking tokens\r\n    uint public totalSupply;\r\n\r\n    /// @dev Reward token => Reward rate with precision _PRECISION\r\n    mapping(address => uint) public rewardRate;\r\n\r\n    /// @dev Reward token => Reward finish period in timestamp.\r\n    mapping(address => uint) public periodFinish;\r\n\r\n    /// @dev Reward token => Last updated time for reward token for internal calculations.\r\n    mapping(address => uint) public lastUpdateTime;\r\n\r\n    /// @dev Reward token => Part of SNX pool logic. Internal snapshot of reward per token value.\r\n    mapping(address => uint) public rewardPerTokenStored;\r\n\r\n    /// @dev Reward token => Account => amount. Already paid reward amount for snapshot calculation.\r\n    mapping(address => mapping(address => uint)) public userRewardPerTokenPaid;\r\n\r\n    /// @dev Reward token => Account => amount. Snapshot of user's reward per token.\r\n    mapping(address => mapping(address => uint)) public rewards;\r\n\r\n    /// @dev Allowed reward tokens for staking token\r\n    address[] public rewardTokens;\r\n\r\n    /// @dev Allowed reward tokens for staking token stored in map for fast check.\r\n    mapping(address => bool) public isRewardToken;\r\n\r\n    /// @notice account => recipient. All rewards for this account will receive recipient\r\n    mapping(address => address) public rewardsRedirect;\r\n\r\n    // *************************************************************\r\n    //                        EVENTS\r\n    // *************************************************************\r\n\r\n    event BalanceIncreased(address indexed account, uint amount);\r\n    event BalanceDecreased(address indexed account, uint amount);\r\n    event NotifyReward(address indexed from, address indexed reward, uint amount);\r\n    event ClaimRewards(address indexed account, address indexed reward, uint amount, address recepient);\r\n\r\n    // *************************************************************\r\n    //                        INIT\r\n    // *************************************************************\r\n\r\n    constructor(address defaultRewardToken_, uint duration_, address governance_) {\r\n        defaultRewardToken = defaultRewardToken_;\r\n        duration = duration_;\r\n        governance = governance_;\r\n    }\r\n\r\n    // *************************************************************\r\n    //                        RESTRICTIONS\r\n    // *************************************************************\r\n\r\n    modifier onlyAllowedContracts() {\r\n        _requireGov();\r\n        _;\r\n    }\r\n\r\n    // *************************************************************\r\n    //                            VIEWS\r\n    // *************************************************************\r\n\r\n    /// @dev Length of rewards tokens array for given token\r\n    function rewardTokensLength() external view returns (uint) {\r\n        return rewardTokens.length;\r\n    }\r\n\r\n    /// @dev Reward paid for token for the current period.\r\n    function rewardPerToken(address rewardToken) public view returns (uint) {\r\n        uint _derivedSupply = derivedSupply;\r\n        if (_derivedSupply == 0) {\r\n            return rewardPerTokenStored[rewardToken];\r\n        }\r\n\r\n        return rewardPerTokenStored[rewardToken]\r\n            +\r\n            (lastTimeRewardApplicable(rewardToken) - lastUpdateTime[rewardToken])\r\n            * rewardRate[rewardToken]\r\n            / _derivedSupply;\r\n    }\r\n\r\n    /// @dev Returns the last time the reward was modified or periodFinish if the reward has ended\r\n    function lastTimeRewardApplicable(address rewardToken) public view returns (uint) {\r\n        uint _periodFinish = periodFinish[rewardToken];\r\n        return block.timestamp < _periodFinish ? block.timestamp : _periodFinish;\r\n    }\r\n\r\n    /// @dev Balance of holder adjusted with specific rules for boost calculation.\r\n    ///      Supposed to be implemented in a parent contract\r\n    ///      Adjust user balance with some logic, like boost logic.\r\n    function derivedBalance(address account) public view virtual returns (uint) {\r\n        return balanceOf[account];\r\n    }\r\n\r\n    /// @dev Amount of reward tokens left for the current period\r\n    function left(address rewardToken) public view returns (uint) {\r\n        uint _periodFinish = periodFinish[rewardToken];\r\n        if (block.timestamp >= _periodFinish) return 0;\r\n        uint _remaining = _periodFinish - block.timestamp;\r\n        return _remaining * rewardRate[rewardToken] / _PRECISION;\r\n    }\r\n\r\n    /// @dev Approximate of earned rewards ready to claim\r\n    function earned(address rewardToken, address account) public view returns (uint) {\r\n        return derivedBalance(account)\r\n        * (rewardPerToken(rewardToken) - userRewardPerTokenPaid[rewardToken][account])\r\n        / _PRECISION\r\n            + rewards[rewardToken][account];\r\n    }\r\n\r\n    // *************************************************************\r\n    //                  OPERATOR ACTIONS\r\n    // *************************************************************\r\n\r\n    /// @dev Whitelist reward token for staking token. Only operator can do it.\r\n    function registerRewardToken(address rewardToken) external onlyAllowedContracts {\r\n        require(!isRewardToken[rewardToken], \"Already registered\");\r\n        isRewardToken[rewardToken] = true;\r\n        rewardTokens.push(rewardToken);\r\n    }\r\n\r\n    /// @dev Remove from whitelist reward token for staking token. Only operator can do it.\r\n    ///      We assume that the first token can not be removed.\r\n    function removeRewardToken(address rewardToken) external onlyAllowedContracts {\r\n        require(periodFinish[rewardToken] < block.timestamp, \"Rewards not ended\");\r\n        require(isRewardToken[rewardToken], \"Not reward token\");\r\n\r\n        isRewardToken[rewardToken] = false;\r\n        uint length = rewardTokens.length;\r\n        uint i = 0;\r\n        for (; i < length; i++) {\r\n            address t = rewardTokens[i];\r\n            if (t == rewardToken) {\r\n                break;\r\n            }\r\n        }\r\n        // if isRewardToken map and rewardTokens array changed accordingly the token always exist\r\n        rewardTokens[i] = rewardTokens[length - 1];\r\n        rewardTokens.pop();\r\n    }\r\n\r\n    /// @dev Account or governance can setup a redirect of all rewards.\r\n    ///      It needs for 3rd party contracts integrations.\r\n    function setRewardsRedirect(address account, address recipient) external {\r\n        require(msg.sender == account || msg.sender == governance, \"Not allowed\");\r\n        rewardsRedirect[account] = recipient;\r\n    }\r\n\r\n    // *************************************************************\r\n    //                      BALANCE\r\n    // *************************************************************\r\n\r\n    /// @dev Assume to be called when linked token balance changes.\r\n    function _registerBalanceIncreasing(\r\n        address account,\r\n        uint amount\r\n    ) internal virtual nonReentrant {\r\n        require(amount > 0, \"Zero amount\");\r\n\r\n        _increaseBalance(account, amount);\r\n        emit BalanceIncreased(account, amount);\r\n    }\r\n\r\n    function _increaseBalance(\r\n        address account,\r\n        uint amount\r\n    ) internal virtual {\r\n        _updateRewardForAllTokens(account);\r\n        totalSupply += amount;\r\n        balanceOf[account] += amount;\r\n        _updateDerivedBalance(account);\r\n    }\r\n\r\n    /// @dev Assume to be called when linked token balance changes.\r\n    function _registerBalanceDecreasing(\r\n        address account,\r\n        uint amount\r\n    ) internal nonReentrant virtual {\r\n        _decreaseBalance(account, amount);\r\n        emit BalanceDecreased(account, amount);\r\n    }\r\n\r\n    function _decreaseBalance(\r\n        address account,\r\n        uint amount\r\n    ) internal virtual {\r\n        _updateRewardForAllTokens(account);\r\n        totalSupply -= amount;\r\n        balanceOf[account] -= amount;\r\n        _updateDerivedBalance(account);\r\n    }\r\n\r\n    function _updateDerivedBalance(address account) internal {\r\n        uint __derivedBalance = derivedBalances[account];\r\n        derivedSupply -= __derivedBalance;\r\n        __derivedBalance = derivedBalance(account);\r\n        derivedBalances[account] = __derivedBalance;\r\n        derivedSupply += __derivedBalance;\r\n    }\r\n\r\n    // *************************************************************\r\n    //                          CLAIM\r\n    // *************************************************************\r\n\r\n    /// @dev Caller should implement restriction checks\r\n    function _getReward(\r\n        address account,\r\n        address[] memory rewardTokens_,\r\n        address recipient\r\n    ) internal nonReentrant virtual {\r\n        address newRecipient = rewardsRedirect[recipient];\r\n        if (newRecipient != address(0)) {\r\n            recipient = newRecipient;\r\n        }\r\n        require(recipient == msg.sender, \"Not allowed\");\r\n\r\n        _updateDerivedBalance(account);\r\n\r\n        uint len = rewardTokens_.length;\r\n\r\n        for (uint i; i < len; ++i) {\r\n            address rewardToken = rewardTokens_[i];\r\n            _updateReward(rewardToken, account);\r\n\r\n            uint _reward = rewards[rewardToken][account];\r\n            if (_reward > 0) {\r\n                rewards[rewardToken][account] = 0;\r\n                IERC20(rewardToken).safeTransfer(recipient, _reward);\r\n            }\r\n\r\n            emit ClaimRewards(account, rewardToken, _reward, recipient);\r\n        }\r\n    }\r\n\r\n    // *************************************************************\r\n    //                    REWARDS CALCULATIONS\r\n    // *************************************************************\r\n\r\n    function _updateRewardForAllTokens(address account) internal {\r\n        address[] memory rts = rewardTokens;\r\n        uint length = rts.length;\r\n        for (uint i; i < length; ++i) {\r\n            _updateReward(rts[i], account);\r\n        }\r\n        _updateReward(defaultRewardToken, account);\r\n    }\r\n\r\n    function _updateReward(address rewardToken, address account) internal {\r\n        uint _rewardPerTokenStored = rewardPerToken(rewardToken);\r\n        rewardPerTokenStored[rewardToken] = _rewardPerTokenStored;\r\n        lastUpdateTime[rewardToken] = lastTimeRewardApplicable(rewardToken);\r\n        if (account != address(0)) {\r\n            rewards[rewardToken][account] = earned(rewardToken, account);\r\n            userRewardPerTokenPaid[rewardToken][account] = _rewardPerTokenStored;\r\n        }\r\n    }\r\n\r\n    // *************************************************************\r\n    //                         NOTIFY\r\n    // *************************************************************\r\n\r\n    function _notifyRewardAmount(\r\n        address rewardToken,\r\n        uint amount,\r\n        bool transferRewards\r\n    ) internal virtual {\r\n        require(amount > 0, \"Zero amount\");\r\n        require(defaultRewardToken == rewardToken || isRewardToken[rewardToken], \"Token not allowed\");\r\n\r\n        _updateReward(rewardToken, address(0));\r\n        uint _duration = duration;\r\n\r\n        if (transferRewards) {\r\n            uint balanceBefore = IERC20(rewardToken).balanceOf(address(this));\r\n            IERC20(rewardToken).safeTransferFrom(msg.sender, address(this), amount);\r\n            // refresh amount if token was taxable\r\n            amount = IERC20(rewardToken).balanceOf(address(this)) - balanceBefore;\r\n        }\r\n        // if transferRewards=false need to wisely use it in implementation!\r\n\r\n        if (block.timestamp >= periodFinish[rewardToken]) {\r\n            rewardRate[rewardToken] = amount * _PRECISION / _duration;\r\n        } else {\r\n            uint _remaining = periodFinish[rewardToken] - block.timestamp;\r\n            uint _left = _remaining * rewardRate[rewardToken];\r\n            // rewards should not extend period infinity, only higher amount allowed\r\n            require(amount > _left / _PRECISION, \"Amount should be higher than remaining rewards\");\r\n            rewardRate[rewardToken] = (amount * _PRECISION + _left) / _duration;\r\n        }\r\n\r\n        lastUpdateTime[rewardToken] = block.timestamp;\r\n        periodFinish[rewardToken] = block.timestamp + _duration;\r\n        emit NotifyReward(msg.sender, rewardToken, amount);\r\n    }\r\n\r\n    // *************************************************************\r\n    //                         ACCESS\r\n    // *************************************************************\r\n\r\n    function _requireGov() internal view {\r\n        require (msg.sender == governance, \"Not allowed\");\r\n    }\r\n}\r\n"
    },
    "contracts/Switcher.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\r\nimport \"./interfaces/ISwitcher.sol\";\r\nimport \"./interfaces/IBridgingStrategy.sol\";\r\n\r\n/// @title Switches strategy of the vault\r\n/// @author a17\r\ncontract Switcher is ISwitcher {\r\n    using SafeERC20 for IERC20;\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                         CONSTANTS                          */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    uint public constant TIME_LOCK = 86400;\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                          STORAGE                           */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    /// @inheritdoc ISwitcher\r\n    address public asset;\r\n\r\n    /// @inheritdoc ISwitcher\r\n    address public vault;\r\n\r\n    /// @inheritdoc ISwitcher\r\n    address public immutable governance;\r\n\r\n    /// @inheritdoc ISwitcher\r\n    address public strategy;\r\n\r\n    address public pendingStrategy;\r\n\r\n    address public announcedPendingStrategy;\r\n\r\n    uint public announceTime;\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                      INITIALIZATION                        */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    constructor(address governance_) {\r\n        governance = governance_;\r\n    }\r\n\r\n    /// @inheritdoc ISwitcher\r\n    function setup(address asset_) external {\r\n        if (vault == address(0)) {\r\n            asset = asset_;\r\n            vault = msg.sender;\r\n        }\r\n    }\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                          MODIFIERS                         */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    modifier onlyVault() {\r\n        _requireVault();\r\n        _;\r\n    }\r\n\r\n    modifier onlyGovernance() {\r\n        _requireGovernance();\r\n        _;\r\n    }\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                      RESTRICTED ACTIONS                    */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    /// @inheritdoc ISwitcher\r\n    function investAll() external onlyVault {\r\n        _checkSwitching();\r\n        address _strategy = strategy;\r\n        address _asset = asset;\r\n        if (_strategy != address(0)) {\r\n            uint balance = IERC20(_asset).balanceOf(address(this));\r\n            IERC20(_asset).safeTransfer(_strategy, balance);\r\n            emit Invested(_strategy, balance);\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc ISwitcher\r\n    function withdrawAllToVault() external onlyVault {\r\n        _checkSwitching();\r\n        address _strategy = strategy;\r\n        address _asset = asset;\r\n        if (_strategy != address(0)) {\r\n            uint strategyBalance = IBridgingStrategy(_strategy).totalAssets();\r\n            if (strategyBalance != 0) {\r\n                uint withdrawAmount = IBridgingStrategy(_strategy).withdrawAllToSwitcher();\r\n                emit WithdrawFromStrategy(_strategy, withdrawAmount);\r\n            }\r\n        }\r\n\r\n        uint balanceAfter = IERC20(_asset).balanceOf(address(this));\r\n        if (balanceAfter > 0) {\r\n            IERC20(_asset).safeTransfer(vault, balanceAfter);\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc ISwitcher\r\n    function withdrawToVault(uint amount) external onlyVault {\r\n        _checkSwitching();\r\n        address _asset = asset;\r\n        address _vault = vault;\r\n\r\n        uint balance = IERC20(_asset).balanceOf(address(this));\r\n        if (balance < amount) {\r\n            uint remainingAmount = amount - balance;\r\n            address _strategy = strategy;\r\n\r\n            uint strategyBalance = IBridgingStrategy(_strategy).totalAssets();\r\n\r\n            if (strategyBalance != 0) {\r\n                // withdraw from strategy\r\n                uint withdrawAmount;\r\n                if (strategyBalance <= remainingAmount) {\r\n                    withdrawAmount = IBridgingStrategy(_strategy).withdrawAllToSwitcher();\r\n                } else {\r\n                    IBridgingStrategy(_strategy).withdrawToSwitcher(remainingAmount);\r\n                    withdrawAmount = remainingAmount;\r\n                }\r\n\r\n                emit WithdrawFromStrategy(_strategy, withdrawAmount);\r\n\r\n                uint currentBalance = IERC20(_asset).balanceOf(address(this));\r\n                // assume that we can not decrease switcher balance during withdraw process\r\n                uint withdrew = currentBalance - balance;\r\n                balance = currentBalance;\r\n\r\n                remainingAmount = withdrew < remainingAmount ? remainingAmount - withdrew : 0;\r\n            }\r\n        }\r\n\r\n        if (balance != 0) {\r\n            IERC20(_asset).safeTransfer(_vault, Math.min(amount, balance));\r\n        }\r\n    }\r\n\r\n    function initStrategy(address strategy_) external onlyGovernance {\r\n        if (strategy != address(0)) {\r\n            revert Already();\r\n        }\r\n        strategy = strategy_;\r\n        emit NewStrategy(strategy_);\r\n    }\r\n\r\n    function announceNewStrategy(address newStrategy_) external onlyGovernance {\r\n        if (announcedPendingStrategy != address(0)) {\r\n            revert Already();\r\n        }\r\n        announcedPendingStrategy = newStrategy_;\r\n        announceTime = block.timestamp;\r\n        emit AnnouncedNewStrategy(newStrategy_);\r\n    }\r\n\r\n    function cancelAnnouncedStrategy() external onlyGovernance {\r\n        address _announcedPendingStrategy = announcedPendingStrategy;\r\n        if (_announcedPendingStrategy != address(0)) {\r\n            announcedPendingStrategy = address(0);\r\n            emit CancelAnnouncedStrategy(_announcedPendingStrategy);\r\n        }\r\n    }\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                         USER ACTIONS                       */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    function startStrategySwitching() external {\r\n        address _announcedPendingStrategy = announcedPendingStrategy;\r\n        if (_announcedPendingStrategy == address(0)) {\r\n            revert NoNewStrategyAnnounced();\r\n        }\r\n        if (block.timestamp < announceTime + TIME_LOCK) {\r\n            revert Timelock();\r\n        }\r\n        pendingStrategy = _announcedPendingStrategy;\r\n        announcedPendingStrategy = address(0);\r\n        uint needRequest = IBridgingStrategy(strategy).bridgedAssets() - IBridgingStrategy(strategy).totalRequested();\r\n        if (needRequest > 0) {\r\n            IBridgingStrategy(strategy).requestClaimAllAssets();\r\n        }\r\n        emit PendingStrategy(_announcedPendingStrategy);\r\n    }\r\n\r\n    function finishStrategySwitching() external {\r\n        address _pendingStrategy = pendingStrategy;\r\n        if (_pendingStrategy == address(0)) {\r\n            revert StrategyIsNotSwitchingNow();\r\n        }\r\n        if (\r\n            IBridgingStrategy(strategy).bridgedAssets() > 0\r\n            || IBridgingStrategy(strategy).pendingRequestedBridgingAssets() > 0\r\n        ) {\r\n            revert AssetsHaveNotYetBeenBridged();\r\n        }\r\n\r\n        IBridgingStrategy(strategy).withdrawAllToSwitcher();\r\n\r\n        strategy = _pendingStrategy;\r\n        pendingStrategy = address(0);\r\n        emit NewStrategy(_pendingStrategy);\r\n    }\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                      VIEW FUNCTIONS                        */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    /// @inheritdoc ISwitcher\r\n    function totalAssets() public view override returns (uint) {\r\n        uint bal = IERC20(asset).balanceOf(address(this));\r\n        address _strategy = strategy;\r\n        return _strategy == address(0) ? bal : bal + IBridgingStrategy(_strategy).totalAssets();\r\n    }\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                       INTERNAL LOGIC                       */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    function _requireVault() internal view {\r\n        if (msg.sender != vault) {\r\n            revert OnlyVaultCanDoThis();\r\n        }\r\n    }\r\n\r\n    function _requireGovernance() internal view {\r\n        if (msg.sender != governance) {\r\n            revert OnlyGovernanceCanDoThis();\r\n        }\r\n    }\r\n\r\n    function _checkSwitching() internal view {\r\n        if (pendingStrategy != address(0)) {\r\n            revert StrategyIsNowSwitching();\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/test/MockComptroller.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {IComptroller} from \"../interfaces/IComptroller.sol\";\r\n\r\ncontract MockComptroller is IComptroller {\r\n\r\n    address public weth;\r\n\r\n    uint public totalUserShares;\r\n\r\n    mapping(address => uint) public userBalance;\r\n\r\n    constructor(address weth_) {\r\n        weth = weth_;\r\n    }\r\n\r\n    function redeemSharesInKind(\r\n        address _recipient,\r\n        uint256 _sharesQuantity,\r\n        address[] calldata,\r\n        address[] calldata\r\n    ) external returns (address[] memory payoutAssets_, uint256[] memory payoutAmounts_) {\r\n        uint _userBalance = userBalance[msg.sender];\r\n        if (_sharesQuantity == type(uint).max) {\r\n            _sharesQuantity = _userBalance;\r\n        } else {\r\n            require(_userBalance >= _sharesQuantity, \"Not enough balance\");\r\n        }\r\n        uint totalWethBalance = IERC20(weth).balanceOf(address(this));\r\n        uint forUser = totalWethBalance * _sharesQuantity / totalUserShares;\r\n        IERC20(weth).transfer(_recipient, forUser);\r\n        userBalance[msg.sender] = _userBalance - _sharesQuantity;\r\n        totalUserShares -= _sharesQuantity;\r\n        payoutAssets_ = new address[](0);\r\n        payoutAmounts_ = new uint[](0);\r\n    }\r\n\r\n    function addUserBalance(address user, uint amountShares) external {\r\n        userBalance[user] += amountShares;\r\n        totalUserShares += amountShares;\r\n    }\r\n}\r\n"
    },
    "contracts/test/MockDepositWrapper.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {IDepositWrapper} from \"../interfaces/IDepositWrapper.sol\";\r\nimport {IWETH9} from \"../interfaces/IWETH9.sol\";\r\nimport {MockComptroller} from \"./MockComptroller.sol\";\r\n\r\ncontract MockDepositWrapper is IDepositWrapper {\r\n    address public immutable comptroller;\r\n    address public immutable weth;\r\n\r\n    constructor(address comptroller_, address weth_) {\r\n        comptroller = comptroller_;\r\n        weth = weth_;\r\n    }\r\n\r\n    function exchangeEthAndBuyShares(\r\n        address _comptrollerProxy,\r\n        uint,\r\n        address,\r\n        address,\r\n        bytes calldata,\r\n        uint\r\n    ) external payable returns (uint sharesReceived_) {\r\n        IWETH9(weth).deposit{value: msg.value}();\r\n        uint fee = msg.value / 10000;\r\n        IERC20(weth).transfer(_comptrollerProxy, msg.value - fee);\r\n        sharesReceived_ = msg.value;\r\n        MockComptroller(_comptrollerProxy).addUserBalance(msg.sender, msg.value);\r\n    }\r\n}\r\n"
    },
    "contracts/test/MockERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract MockERC20 is ERC20 {\r\n    uint8 internal _decimals;\r\n\r\n    constructor(string memory name_, string memory symbol_, uint8 decimals_) ERC20(name_, symbol_) {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    function mint(uint amount) external {\r\n        _mint(msg.sender, amount);\r\n    }\r\n\r\n    function decimals() public view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n"
    },
    "contracts/test/MockStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"../interfaces/IBridgingStrategy.sol\";\r\nimport \"../interfaces/ISwitcher.sol\";\r\n\r\ncontract MockStrategy is IBridgingStrategy {\r\n    /// @inheritdoc IBridgingStrategy\r\n    address public asset;\r\n\r\n    /// @inheritdoc IBridgingStrategy\r\n    address public switcher;\r\n\r\n    /// @inheritdoc IBridgingStrategy\r\n    address public destination;\r\n\r\n    /// @inheritdoc IBridgingStrategy\r\n    uint public bridgedAssets;\r\n\r\n    /// @inheritdoc IBridgingStrategy\r\n    uint public totalRequested;\r\n\r\n    bool internal _isReadyToHardWork;\r\n\r\n    address internal _assetHolder;\r\n\r\n    bool internal _lossOnWithdraw;\r\n\r\n    error NotEnoughBridgedAssets();\r\n    error NotAllAssetsAreBridged();\r\n\r\n    constructor(address switcher_) {\r\n        switcher = switcher_;\r\n        asset = ISwitcher(switcher_).asset();\r\n    }\r\n\r\n    // mock methods\r\n\r\n    function setIsReadyToHardWork(bool value) external {\r\n        _isReadyToHardWork = value;\r\n    }\r\n\r\n    function setLossOnWithdraw(bool value) external {\r\n        _lossOnWithdraw = value;\r\n    }\r\n\r\n    function setTotalRequested(uint value) external {\r\n        totalRequested = value;\r\n    }\r\n\r\n    function setBridgedAssets(uint value) external {\r\n        bridgedAssets = value;\r\n    }\r\n\r\n    function lossMoney() external {\r\n        uint b = IERC20(asset).balanceOf(address (this));\r\n        IERC20(asset).transfer(address(1), b / 10);\r\n    }\r\n\r\n    function pendingRequestedBridgingAssets() external view returns (uint) {}\r\n\r\n    /// @inheritdoc IBridgingStrategy\r\n    function callBridge() external {}\r\n\r\n    /// @inheritdoc IBridgingStrategy\r\n    function needBridgingNow() public view returns (bool need, bool toL1, uint amount) {}\r\n\r\n    function isReadyToHardWork() external view returns (bool) {\r\n        return _isReadyToHardWork;\r\n    }\r\n\r\n    /// @inheritdoc IBridgingStrategy\r\n    function totalAssets() external view returns (uint) {\r\n        return IERC20(asset).balanceOf(address (this)) + bridgedAssets;\r\n    }\r\n\r\n    /// @inheritdoc IBridgingStrategy\r\n    function withdrawAllToSwitcher() external returns(uint amount) {\r\n        if (bridgedAssets > 0) {\r\n            revert NotAllAssetsAreBridged();\r\n        }\r\n        amount = IERC20(asset).balanceOf(address (this));\r\n        IERC20(asset).transfer(switcher, amount);\r\n    }\r\n\r\n    /// @inheritdoc IBridgingStrategy\r\n    function withdrawToSwitcher(uint amount) external {\r\n        uint withdrawAmount = amount;\r\n        if (_lossOnWithdraw) {\r\n            withdrawAmount -= amount / 100;\r\n            IERC20(asset).transfer(address(1), amount / 100);\r\n        }\r\n        IERC20(asset).transfer(switcher, withdrawAmount);\r\n    }\r\n\r\n    /// @inheritdoc IBridgingStrategy\r\n    function requestClaimAllAssets() external {}\r\n\r\n    /// @inheritdoc IBridgingStrategy\r\n    function requestClaimAssets(uint vaultSharesAmount) external {\r\n        // vault share price is 1.0\r\n        totalRequested += vaultSharesAmount;\r\n    }\r\n\r\n    /// @inheritdoc IBridgingStrategy\r\n    function claimRequestedAssets(address[] calldata sharesHolders) external {}\r\n}\r\n"
    },
    "contracts/test/WETH9.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport {IWETH9} from \"../interfaces/IWETH9.sol\";\r\n\r\ncontract WETH9 is ERC20, IWETH9 {\r\n    constructor() ERC20(\"Wrapped Ether\", \"WETH\") {}\r\n\r\n    receive() external payable {\r\n        deposit();\r\n    }\r\n\r\n    fallback() external payable {\r\n        deposit();\r\n    }\r\n\r\n    function deposit() public payable {\r\n        _mint(msg.sender, msg.value);\r\n    }\r\n\r\n    function withdraw(uint wad) public {\r\n        require(balanceOf(msg.sender) >= wad);\r\n        _burn(msg.sender, wad);\r\n        payable(msg.sender).transfer(wad);\r\n    }\r\n\r\n    function decimals() public pure override returns (uint8) {\r\n        return 18;\r\n    }\r\n}\r\n"
    },
    "contracts/ZkETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"./interfaces/ISwitcher.sol\";\nimport \"./interfaces/IGauge.sol\";\n\n/// @title Diva liquid staked Ether on zkEVM\n/// @author a17\ncontract ZkETH is ERC4626, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                         CONSTANTS                          */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Percent of assets that will always stay in this vault.\n    uint constant public BUFFER = 1_000;\n\n    /// @dev Denominator for buffer calculation. 100% of the buffer amount.\n    uint constant public BUFFER_DENOMINATOR = 100_000;\n\n    /// @dev A user should wait this block amounts before able to withdraw.\n    uint constant public WITHDRAW_REQUEST_BLOCKS = 5;\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                          STORAGE                           */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @notice The switcher manages the staking strategy\n    address public immutable switcher;\n\n    /// @notice Stakeless gauge for distributing rewards\n    address public immutable gauge;\n\n    /// @dev msg.sender => block when request sent. Should be cleared on deposit/withdraw action\n    ///      For simplification we are setup new withdraw request on each deposit/transfer\n    mapping(address => uint) public withdrawRequests;\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                          EVENTS                            */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    event Invest(uint amount);\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                       CUSTOM ERRORS                        */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    error WaitAFewBlocks();\n    error ZeroAmount();\n    error Slippage();\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                      INITIALIZATION                        */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    constructor(address weth, address switcher_, address gauge_) ERC20(\"Synthetic Diva ETH\", \"zkETH\") ERC4626(IERC20(weth)) {\n        switcher = switcher_;\n        gauge = gauge_;\n        ISwitcher(switcher_).setup(weth);\n        IGauge(gauge_).setStakingToken(address(this));\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                         USER ACTIONS                       */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @inheritdoc IERC4626\n    function deposit(uint assets, address receiver) public override nonReentrant returns (uint) {\n        uint shares = super.deposit(assets, receiver);\n        _afterDeposit(assets, shares, receiver);\n        return shares;\n    }\n\n    /// @inheritdoc IERC4626\n    function mint(uint shares, address receiver) public override nonReentrant returns (uint) {\n        uint assets = super.mint(shares, receiver);\n        _afterDeposit(assets, shares, receiver);\n        return assets;\n    }\n\n    /// @inheritdoc IERC4626\n    function withdraw(\n        uint assets,\n        address receiver,\n        address owner\n    ) public override nonReentrant returns (uint) {\n        uint maxAssets = maxWithdraw(owner);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\n        }\n\n        uint shares = previewWithdraw(assets);\n\n        _beforeWithdraw(assets, shares, owner);\n\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return shares;\n    }\n\n    /// @inheritdoc IERC4626\n    function redeem(\n        uint shares,\n        address receiver,\n        address owner\n    ) public override nonReentrant returns (uint) {\n        uint maxShares = maxRedeem(owner);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\n        }\n\n        uint assets = previewRedeem(shares);\n\n        if (assets == 0) {\n            revert ZeroAmount();\n        }\n\n        _beforeWithdraw(assets, shares, owner);\n\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return assets;\n    }\n\n    /// @dev Withdraw all available shares for tx sender.\n    ///      The revert is expected if the balance is higher than `maxRedeem`\n    ///      It suppose to be used only on UI - for on-chain interactions withdraw concrete amount with properly checks.\n    function withdrawAll() external {\n        redeem(balanceOf(msg.sender), msg.sender, msg.sender);\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                      VIEW FUNCTIONS                        */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Total amount of the underlying asset that is “managed” by Vault\n    function totalAssets() public view override returns (uint) {\n        return IERC20(asset()).balanceOf(address(this)) + ISwitcher(switcher).totalAssets();\n    }\n\n    /// @dev Price of 1 full share\n    function sharePrice() external view returns (uint) {\n        uint units = 10 ** uint256(decimals());\n        uint _totalSupply = totalSupply();\n        return _totalSupply == 0\n            ? units\n            : units * totalAssets() / _totalSupply;\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                       INTERNAL LOGIC                       */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Calculate available to invest amount and send this amount to strategy\n    function _afterDeposit(uint, /*assets*/ uint, /*shares*/ address receiver) internal {\n        withdrawRequests[receiver] = block.number;\n\n        IERC20 _asset = IERC20(asset());\n        uint toInvest = _availableToInvest(_asset);\n        // invest only when buffer is filled\n        if (toInvest != 0) {\n            _asset.transfer(switcher, toInvest);\n            ISwitcher(switcher).investAll();\n            emit Invest(toInvest);\n        }\n\n    }\n\n    /// @notice Returns amount of assets ready to invest to the switcher\n    function _availableToInvest(IERC20 asset_) internal view returns (uint) {\n        uint assetsInVault = asset_.balanceOf(address(this));\n        uint assetsInSwitcher = ISwitcher(switcher).totalAssets();\n        uint wantInvestTotal = (assetsInVault + assetsInSwitcher)\n            * (BUFFER_DENOMINATOR - BUFFER) / BUFFER_DENOMINATOR;\n        if (assetsInSwitcher >= wantInvestTotal) {\n            return 0;\n        }\n\n        uint remainingToInvest = wantInvestTotal - assetsInSwitcher;\n        return remainingToInvest <= assetsInVault ? remainingToInvest : assetsInVault;\n    }\n\n    /// @dev Internal hook for getting necessary assets from strategy.\n    function _beforeWithdraw(uint assets, uint shares, address owner) internal {\n        if (withdrawRequests[owner] + WITHDRAW_REQUEST_BLOCKS >= block.number) {\n            revert WaitAFewBlocks();\n        }\n        withdrawRequests[owner] = block.number;\n\n        IERC20 _asset = IERC20(asset());\n        uint balance = _asset.balanceOf(address(this));\n        // if not enough balance in the vault withdraw from strategies\n        if (balance < assets) {\n            _processWithdrawFromSwitcher(\n                assets,\n                shares,\n                totalSupply(),\n                balance\n            );\n        }\n        balance = _asset.balanceOf(address(this));\n        if (assets > balance) {\n            revert Slippage();\n        }\n    }\n\n    /// @dev Do necessary calculation for withdrawing from switcher and move assets to vault.\n    ///      If switcher not defined must not be called.\n    function _processWithdrawFromSwitcher(\n        uint assetsNeed,\n        uint shares,\n        uint totalSupply_,\n        uint assetsInVault\n    ) internal {\n        // withdraw everything from the switcher to accurately check the share value\n        if (shares == totalSupply_) {\n            ISwitcher(switcher).withdrawAllToVault();\n        } else {\n            uint assetsInSwitcher = ISwitcher(switcher).totalAssets();\n\n            // we should always have buffer amount inside the vault\n            // assume `assetsNeed` can not be higher than entire balance\n            uint expectedBuffer = (assetsInSwitcher + assetsInVault - assetsNeed) * BUFFER / BUFFER_DENOMINATOR;\n\n            // this code should not be called if `assetsInVault` higher than `assetsNeed`\n            uint missing = Math.min(expectedBuffer + assetsNeed - assetsInVault, assetsInSwitcher);\n            // if zero should be resolved on switcher side\n            ISwitcher(switcher).withdrawToVault(missing);\n        }\n    }\n\n    function _update(address from, address to, uint value) internal virtual override {\n        super._update(from, to, value);\n        withdrawRequests[from] = block.number;\n        withdrawRequests[to] = block.number;\n\n        IGauge _gauge = IGauge(gauge);\n        _gauge.handleBalanceChange(from);\n        _gauge.handleBalanceChange(to);\n    }\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 150
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}