{
  "language": "Solidity",
  "sources": {
    "@0xpolygonhermez/zkevm-contracts/contracts/interfaces/IBasePolygonZkEVMGlobalExitRoot.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.20;\n\ninterface IBasePolygonZkEVMGlobalExitRoot {\n    /**\n     * @dev Thrown when the caller is not the allowed contracts\n     */\n    error OnlyAllowedContracts();\n\n    function updateExitRoot(bytes32 newRollupExitRoot) external;\n\n    function globalExitRootMap(\n        bytes32 globalExitRootNum\n    ) external returns (uint256);\n}\n"
    },
    "@0xpolygonhermez/zkevm-contracts/contracts/v2/interfaces/IPolygonZkEVMBridgeV2.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.20;\nimport \"../../interfaces/IBasePolygonZkEVMGlobalExitRoot.sol\";\n\ninterface IPolygonZkEVMBridgeV2 {\n    /**\n     * @dev Thrown when the destination network is invalid\n     */\n    error DestinationNetworkInvalid();\n\n    /**\n     * @dev Thrown when the amount does not match msg.value\n     */\n    error AmountDoesNotMatchMsgValue();\n\n    /**\n     * @dev Thrown when user is bridging tokens and is also sending a value\n     */\n    error MsgValueNotZero();\n\n    /**\n     * @dev Thrown when the Ether transfer on claimAsset fails\n     */\n    error EtherTransferFailed();\n\n    /**\n     * @dev Thrown when the message transaction on claimMessage fails\n     */\n    error MessageFailed();\n\n    /**\n     * @dev Thrown when the global exit root does not exist\n     */\n    error GlobalExitRootInvalid();\n\n    /**\n     * @dev Thrown when the smt proof does not match\n     */\n    error InvalidSmtProof();\n\n    /**\n     * @dev Thrown when an index is already claimed\n     */\n    error AlreadyClaimed();\n\n    /**\n     * @dev Thrown when the owner of permit does not match the sender\n     */\n    error NotValidOwner();\n\n    /**\n     * @dev Thrown when the spender of the permit does not match this contract address\n     */\n    error NotValidSpender();\n\n    /**\n     * @dev Thrown when the amount of the permit does not match\n     */\n    error NotValidAmount();\n\n    /**\n     * @dev Thrown when the permit data contains an invalid signature\n     */\n    error NotValidSignature();\n\n    /**\n     * @dev Thrown when sender is not the rollup manager\n     */\n    error OnlyRollupManager();\n\n    /**\n     * @dev Thrown when the permit data contains an invalid signature\n     */\n    error NativeTokenIsEther();\n\n    /**\n     * @dev Thrown when the permit data contains an invalid signature\n     */\n    error NoValueInMessagesOnGasTokenNetworks();\n\n    /**\n     * @dev Thrown when the permit data contains an invalid signature\n     */\n    error GasTokenNetworkMustBeZeroOnEther();\n\n    /**\n     * @dev Thrown when the wrapped token deployment fails\n     */\n    error FailedTokenWrappedDeployment();\n\n    function wrappedTokenToTokenInfo(\n        address destinationAddress\n    ) external view returns (uint32, address);\n\n    function updateGlobalExitRoot() external;\n\n    function activateEmergencyState() external;\n\n    function deactivateEmergencyState() external;\n\n    function bridgeAsset(\n        uint32 destinationNetwork,\n        address destinationAddress,\n        uint256 amount,\n        address token,\n        bool forceUpdateGlobalExitRoot,\n        bytes calldata permitData\n    ) external payable;\n\n    function bridgeMessage(\n        uint32 destinationNetwork,\n        address destinationAddress,\n        bool forceUpdateGlobalExitRoot,\n        bytes calldata metadata\n    ) external payable;\n\n    function bridgeMessageWETH(\n        uint32 destinationNetwork,\n        address destinationAddress,\n        uint256 amountWETH,\n        bool forceUpdateGlobalExitRoot,\n        bytes calldata metadata\n    ) external;\n\n    function claimAsset(\n        bytes32[32] calldata smtProofLocalExitRoot,\n        bytes32[32] calldata smtProofRollupExitRoot,\n        uint256 globalIndex,\n        bytes32 mainnetExitRoot,\n        bytes32 rollupExitRoot,\n        uint32 originNetwork,\n        address originTokenAddress,\n        uint32 destinationNetwork,\n        address destinationAddress,\n        uint256 amount,\n        bytes calldata metadata\n    ) external;\n\n    function claimMessage(\n        bytes32[32] calldata smtProofLocalExitRoot,\n        bytes32[32] calldata smtProofRollupExitRoot,\n        uint256 globalIndex,\n        bytes32 mainnetExitRoot,\n        bytes32 rollupExitRoot,\n        uint32 originNetwork,\n        address originAddress,\n        uint32 destinationNetwork,\n        address destinationAddress,\n        uint256 amount,\n        bytes calldata metadata\n    ) external;\n\n    function initialize(\n        uint32 _networkID,\n        address _gasTokenAddress,\n        uint32 _gasTokenNetwork,\n        IBasePolygonZkEVMGlobalExitRoot _globalExitRootManager,\n        address _polygonRollupManager,\n        bytes memory _gasTokenMetadata\n    ) external;\n\n    function getTokenMetadata(\n        address token\n    ) external view returns (bytes memory);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC4626.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4626.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\nimport {IERC20Metadata} from \"../token/ERC20/extensions/IERC20Metadata.sol\";\n\n/**\n * @dev Interface of the ERC4626 \"Tokenized Vault Standard\", as defined in\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\n */\ninterface IERC4626 is IERC20, IERC20Metadata {\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\n\n    event Withdraw(\n        address indexed sender,\n        address indexed receiver,\n        address indexed owner,\n        uint256 assets,\n        uint256 shares\n    );\n\n    /**\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n     *\n     * - MUST be an ERC-20 token contract.\n     * - MUST NOT revert.\n     */\n    function asset() external view returns (address assetTokenAddress);\n\n    /**\n     * @dev Returns the total amount of the underlying asset that is “managed” by Vault.\n     *\n     * - SHOULD include any compounding that occurs from yield.\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT revert.\n     */\n    function totalAssets() external view returns (uint256 totalManagedAssets);\n\n    /**\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n     * through a deposit call.\n     *\n     * - MUST return a limited value if receiver is subject to some deposit limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n     * - MUST NOT revert.\n     */\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n     *   in the same transaction.\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   deposit execution, and are accounted for during deposit.\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n     * - MUST return a limited value if receiver is subject to some mint limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n     * - MUST NOT revert.\n     */\n    function maxMint(address receiver) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n     *   same transaction.\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\n     */\n    function previewMint(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n     *   execution, and are accounted for during mint.\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n     * Vault, through a withdraw call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n     *   called\n     *   in the same transaction.\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   withdraw execution, and are accounted for during withdraw.\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n     * through a redeem call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n     *   same transaction.\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\n     */\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   redeem execution, and are accounted for during redeem.\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/BridgedStakingStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/interfaces/IERC4626.sol\";\r\nimport \"@0xpolygonhermez/zkevm-contracts/contracts/v2/interfaces/IPolygonZkEVMBridgeV2.sol\";\r\nimport \"./interfaces/ISwitcher.sol\";\r\nimport \"./interfaces/IBridgingStrategy.sol\";\r\nimport \"./interfaces/IWETH9.sol\";\r\n\r\n/// @title ETH bridged staking\r\n/// @notice Bridging assets and messages between zkEVM and Ethereum via LxLy bridge\r\n/// @author a17\r\ncontract BridgedStakingStrategy is IBridgingStrategy {\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                         CONSTANTS                          */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    uint public constant SHUTTLE_FORCE_BRIDGE = 10e18;\r\n\r\n    uint public constant SHUTTLE_FORCE_CLAIM = 10e18;\r\n\r\n    uint public constant MAX_WAIT_TIME_FOR_BRIDGING = 86400;\r\n\r\n    uint public constant ENZYME_VAULT_REDEEM_TIMELOCK = 86400;\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                          STORAGE                           */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    /// @inheritdoc IBridgingStrategy\r\n    address public immutable asset;\r\n\r\n    /// @inheritdoc IBridgingStrategy\r\n    address public immutable switcher;\r\n\r\n    uint32 public immutable destinationNetwork;\r\n\r\n    /// @inheritdoc IBridgingStrategy\r\n    address public destination;\r\n\r\n    /// @dev LxLy bridge endpoint\r\n    address public immutable bridge;\r\n\r\n    /// @inheritdoc IBridgingStrategy\r\n    uint public bridgedAssets;\r\n\r\n    /// @inheritdoc IBridgingStrategy\r\n    uint public pendingRequestedBridgingAssets;\r\n\r\n    uint public lastBridgeTime;\r\n\r\n    uint public lastEnzymeDepositTime;\r\n\r\n    bool internal _isWethWithdrawing;\r\n\r\n    mapping(address user => uint shares) public requests;\r\n\r\n    uint public totalRequestedVaultSharesForClaim;\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                          EVENTS                            */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    error DestinationIsNotSet();\r\n    error Already();\r\n    error NotEnoughBridgedAssets();\r\n    error NotAllAssetsAreBridged();\r\n    error CantBridge();\r\n    error NoClaimRequestForUser(address user);\r\n    error OnlySwitcherCanDoThis();\r\n    error OnlyGovernanceCanDoThis();\r\n    error OnlyBridgeCanDoThis();\r\n    error WaitForCurrentBridgingDone();\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                      INITIALIZATION                        */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    constructor(address switcher_, address bridge_, uint32 destinationNetwork_) {\r\n        switcher = switcher_;\r\n        bridge = bridge_;\r\n        destinationNetwork = destinationNetwork_;\r\n        asset = ISwitcher(switcher_).asset();\r\n    }\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                        CALLBACKS                           */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    receive() external payable {\r\n        if (!_isWethWithdrawing && pendingRequestedBridgingAssets > 0) {\r\n            IWETH9(asset).deposit{value: msg.value}();\r\n            if (msg.sender != bridge) {\r\n                revert OnlyBridgeCanDoThis();\r\n            }\r\n\r\n            pendingRequestedBridgingAssets = 0;\r\n        }\r\n    }\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                        MODIFIERS                           */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    modifier onlySwitcher() {\r\n        _requireSwitcher();\r\n        _;\r\n    }\r\n\r\n    modifier onlyGovernance() {\r\n        _requireGovernance();\r\n        _;\r\n    }\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                      RESTRICTED ACTIONS                    */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    function setDestination(address destination_) external onlyGovernance {\r\n        if (destination != address(0)) {\r\n            revert Already();\r\n        }\r\n        destination = destination_;\r\n        emit Destination(destination_);\r\n    }\r\n\r\n    /// @inheritdoc IBridgingStrategy\r\n    function requestClaimAllAssets() external onlySwitcher {\r\n        if (pendingRequestedBridgingAssets > 0) {\r\n            revert WaitForCurrentBridgingDone();\r\n        }\r\n        uint amount = type(uint).max;\r\n\r\n        IPolygonZkEVMBridgeV2(bridge).bridgeMessage(\r\n            destinationNetwork,\r\n            destination,\r\n            true,\r\n            abi.encodePacked(amount)\r\n        );\r\n\r\n        lastBridgeTime = block.timestamp;\r\n        pendingRequestedBridgingAssets = bridgedAssets;\r\n        bridgedAssets = 0;\r\n\r\n        emit BridgeRequestMessageToL1(amount);\r\n    }\r\n\r\n    /// @inheritdoc IBridgingStrategy\r\n    function withdrawAllToSwitcher() external onlySwitcher returns(uint amount) {\r\n        if (bridgedAssets != 0 || pendingRequestedBridgingAssets != 0) {\r\n            revert NotAllAssetsAreBridged();\r\n        }\r\n        amount = IERC20(asset).balanceOf(address (this));\r\n        IERC20(asset).transfer(switcher, amount);\r\n    }\r\n\r\n    /// @inheritdoc IBridgingStrategy\r\n    function withdrawToSwitcher(uint amount) external onlySwitcher {\r\n        if (IERC20(asset).balanceOf(address(this)) < amount) {\r\n            revert NotEnoughBridgedAssets();\r\n        }\r\n        IERC20(asset).transfer(switcher, amount);\r\n    }\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                         USER ACTIONS                       */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    /// @inheritdoc IBridgingStrategy\r\n    function requestClaimAssets(uint vaultSharesAmount) external {\r\n        IERC20(_getVault()).transferFrom(msg.sender, address(this), vaultSharesAmount);\r\n        requests[msg.sender] += vaultSharesAmount;\r\n        totalRequestedVaultSharesForClaim += vaultSharesAmount;\r\n        emit RequestAssets(msg.sender, vaultSharesAmount);\r\n    }\r\n\r\n    /// @inheritdoc IBridgingStrategy\r\n    function claimRequestedAssets(address[] calldata sharesHolders) external {\r\n        uint len = sharesHolders.length;\r\n        IERC4626 vault = IERC4626(_getVault());\r\n        uint[] memory gotAssets = new uint[](len);\r\n        uint totalSharesToBurn;\r\n        for (uint i; i < len; ++i) {\r\n            uint sharesToBurn = requests[sharesHolders[i]];\r\n            if (sharesToBurn == 0) {\r\n                revert NoClaimRequestForUser(sharesHolders[i]);\r\n            }\r\n            gotAssets[i] = vault.previewRedeem(sharesToBurn);\r\n            totalSharesToBurn += sharesToBurn;\r\n        }\r\n\r\n        vault.redeem(totalSharesToBurn, address(this), address(this));\r\n\r\n        for (uint i; i < len; ++i) {\r\n            IERC20(asset).transfer(sharesHolders[i], gotAssets[i]);\r\n        }\r\n    }\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                       PUBLIC ACTIONS                       */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    /// @inheritdoc IBridgingStrategy\r\n    function callBridge() external {\r\n        if (destination == address(0)) {\r\n            revert DestinationIsNotSet();\r\n        }\r\n\r\n        (bool need, bool toL1, uint amount) = needBridgingNow();\r\n\r\n        if (!need) {\r\n            revert CantBridge();\r\n        }\r\n\r\n        if (toL1) {\r\n            _isWethWithdrawing = true;\r\n            IWETH9(asset).withdraw(amount);\r\n            _isWethWithdrawing = false;\r\n\r\n            IPolygonZkEVMBridgeV2(bridge).bridgeAsset{value: amount}(\r\n                destinationNetwork,\r\n                destination,\r\n                amount,\r\n                address(0),\r\n                true,\r\n                bytes(\"0\")\r\n            );\r\n\r\n            lastBridgeTime = block.timestamp;\r\n            lastEnzymeDepositTime = block.timestamp;\r\n            bridgedAssets += amount;\r\n\r\n            emit BridgeAssetsToL1(amount);\r\n        } else {\r\n            IPolygonZkEVMBridgeV2(bridge).bridgeMessage(\r\n                destinationNetwork,\r\n                destination,\r\n                true,\r\n                abi.encodePacked(amount)\r\n            );\r\n\r\n            lastBridgeTime = block.timestamp;\r\n            bridgedAssets -= amount;\r\n            pendingRequestedBridgingAssets = amount;\r\n\r\n            emit BridgeRequestMessageToL1(amount);\r\n        }\r\n    }\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                      VIEW FUNCTIONS                        */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    /// @inheritdoc IBridgingStrategy\r\n    function totalAssets() external view returns (uint) {\r\n        return IERC20(asset).balanceOf(address (this)) + bridgedAssets + pendingRequestedBridgingAssets;\r\n    }\r\n\r\n    /// @inheritdoc IBridgingStrategy\r\n    function totalRequested() public view returns (uint) {\r\n        return IERC4626(_getVault()).convertToAssets(totalRequestedVaultSharesForClaim);\r\n    }\r\n\r\n    /// @inheritdoc IBridgingStrategy\r\n    function needBridgingNow() public view returns (bool need, bool toL1, uint amount) {\r\n        if (pendingRequestedBridgingAssets > 0) {\r\n            return (false, false, 0);\r\n        }\r\n\r\n        uint bal = IERC20(asset).balanceOf(address(this));\r\n        uint _totalRequested = totalRequested();\r\n\r\n        if (bal > _totalRequested) {\r\n            amount = bal - _totalRequested;\r\n            toL1 = true;\r\n\r\n            if (\r\n                amount >= SHUTTLE_FORCE_BRIDGE\r\n                || block.timestamp - lastBridgeTime >= MAX_WAIT_TIME_FOR_BRIDGING\r\n            ) {\r\n                need = true;\r\n            }\r\n        } else {\r\n            uint vaultBuffer = IERC20(asset).balanceOf(_getVault());\r\n            if (_totalRequested - bal > vaultBuffer) {\r\n                amount = _totalRequested - bal;\r\n                if (amount > bridgedAssets) {\r\n                    amount = bridgedAssets;\r\n                }\r\n                if (\r\n                    amount > 0\r\n                    && block.timestamp - lastEnzymeDepositTime >= ENZYME_VAULT_REDEEM_TIMELOCK\r\n                    && (\r\n                    amount >= SHUTTLE_FORCE_CLAIM\r\n                    || block.timestamp - lastBridgeTime >= MAX_WAIT_TIME_FOR_BRIDGING\r\n                )\r\n                ) {\r\n                    need = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                       INTERNAL LOGIC                       */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    function _getVault() internal view returns (address) {\r\n        return ISwitcher(switcher).vault();\r\n    }\r\n\r\n    function _requireSwitcher() internal view {\r\n        if (msg.sender != switcher) {\r\n            revert OnlySwitcherCanDoThis();\r\n        }\r\n    }\r\n\r\n    function _requireGovernance() internal view {\r\n        if (msg.sender != ISwitcher(switcher).governance()) {\r\n            revert OnlyGovernanceCanDoThis();\r\n        }\r\n    }\r\n\r\n}\r\n"
    },
    "contracts/Gauge.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"./StakelessPoolBase.sol\";\r\nimport \"./interfaces/IGauge.sol\";\r\n\r\n/// @title Stakeless pool for vaults\r\n/// @author belbix\r\n/// @author a17\r\ncontract Gauge is StakelessPoolBase {\r\n    // *************************************************************\r\n    //                        VARIABLES\r\n    // *************************************************************\r\n\r\n    address public stakingToken;\r\n\r\n    // *************************************************************\r\n    //                        EVENTS\r\n    // *************************************************************\r\n\r\n    event StakingToken(address token);\r\n    event Deposit(address indexed account, uint amount);\r\n    event Withdraw(address indexed account, uint amount, bool full, uint veId);\r\n\r\n    // *************************************************************\r\n    //                        INIT\r\n    // *************************************************************\r\n\r\n    constructor(\r\n        address defaultRewardToken_,\r\n        uint duration_,\r\n        address governance_\r\n    ) StakelessPoolBase(defaultRewardToken_, duration_, governance_) {}\r\n\r\n    function setStakingToken(address stakingToken_) external {\r\n        require (stakingToken == address(0), \"Already\");\r\n        stakingToken = stakingToken_;\r\n        emit StakingToken(stakingToken_);\r\n    }\r\n\r\n    // *************************************************************\r\n    //                        CLAIMS\r\n    // *************************************************************\r\n\r\n    function getReward(address account, address[] memory tokens) external {\r\n        _getReward(account, tokens);\r\n    }\r\n\r\n    function getAllRewards(address account) external {\r\n        _getAllRewards(account);\r\n    }\r\n\r\n    function _getAllRewards(address account) internal {\r\n        address[] storage rts = rewardTokens;\r\n        uint length = rts.length;\r\n        address[] memory tokens = new address[](length + 1);\r\n        for (uint i; i < length; ++i) {\r\n            tokens[i] = rts[i];\r\n        }\r\n        tokens[length] = defaultRewardToken;\r\n        _getReward(account, tokens);\r\n    }\r\n\r\n    function _getReward(address account, address[] memory tokens) internal {\r\n        _getReward(account, tokens, account);\r\n    }\r\n\r\n    // *************************************************************\r\n    //                   VIRTUAL DEPOSIT/WITHDRAW\r\n    // *************************************************************\r\n\r\n    /// @dev Must be called from stakingToken when user balance changed.\r\n    function handleBalanceChange(address account) external {\r\n        address _stakingToken = msg.sender;\r\n        require(stakingToken == _stakingToken, \"Wrong staking token\");\r\n\r\n        uint stakedBalance = balanceOf[account];\r\n        uint actualBalance = IERC20(_stakingToken).balanceOf(account);\r\n        if (stakedBalance < actualBalance) {\r\n            _deposit(account, actualBalance - stakedBalance);\r\n        } else if (stakedBalance > actualBalance) {\r\n            _withdraw(account, stakedBalance - actualBalance, actualBalance == 0);\r\n        }\r\n    }\r\n\r\n    function _deposit(\r\n        address account,\r\n        uint amount\r\n    ) internal {\r\n        _registerBalanceIncreasing(account, amount);\r\n        emit Deposit(account, amount);\r\n    }\r\n\r\n    function _withdraw(\r\n        address account,\r\n        uint amount,\r\n        bool fullWithdraw\r\n    ) internal {\r\n        _registerBalanceDecreasing(account, amount);\r\n        emit Withdraw(\r\n            account,\r\n            amount,\r\n            fullWithdraw,\r\n            0\r\n        );\r\n    }\r\n\r\n    // *************************************************************\r\n    //                   REWARDS DISTRIBUTION\r\n    // *************************************************************\r\n\r\n    function notifyRewardAmount(address token, uint amount) external nonReentrant {\r\n        _notifyRewardAmount(token, amount, true);\r\n    }\r\n\r\n}\r\n"
    },
    "contracts/interfaces/IBridgingStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\n/// @notice Strategy for staking an asset on another network\ninterface IBridgingStrategy {\n    event Destination(address contractL1);\n    event RequestAssets(address indexed owner, uint vaultSharesAmount);\n    event BridgeAssetsToL1(uint amount);\n    event BridgeRequestMessageToL1(uint amount);\n\n    /// @notice Underlying asset\n    function asset() external view returns (address);\n\n    /// @notice Linked switcher that manage strategy of the vault\n    function switcher() external view returns (address);\n\n    /// @notice Strategy contract on another network\n    function destination() external view returns (address);\n\n    /// @notice Total amount of assets under strategy management\n    function totalAssets() external view returns (uint);\n\n    /// @notice Amount of assets under strategy management on another network\n    function bridgedAssets() external view returns (uint);\n\n    /// @notice Total requested assets for withdraw from another network\n    function totalRequested() external view returns (uint);\n\n    /// @notice Assets in process of bridging\n    function pendingRequestedBridgingAssets() external view returns (uint);\n\n    /// @notice Is ready to call bridge\n    /// @return need Is need to call bridge now\n    /// @return toL1 Need bridge assets to L1\n    /// @return amount Amount of asset for bridging or request withdraw\n    function needBridgingNow() external view returns (bool need, bool toL1, uint amount);\n\n    /// @notice Withdraws all assets under strategy management to the Switcher\n    /// @dev Will only be executed if all assets have already been transferred to the current network\n    function withdrawAllToSwitcher() external returns(uint amount);\n\n    /// @notice Withdraws assets to the Switcher\n    function withdrawToSwitcher(uint amount) external;\n\n    /// @notice Bridge assets for staking on another network or request withdraw from it\n    function callBridge() external;\n\n    /// @notice Send message to another network for claiming all invested assets\n    /// Only Switcher can call it.\n    function requestClaimAllAssets() external;\n\n    /// @notice Transfer vault shares from user and put claim request to shuttle\n    /// Only vault shares owner can call it.\n    function requestClaimAssets(uint vaultSharesAmount) external;\n\n    /// @notice Claim requested and bridged from another network assets\n    function claimRequestedAssets(address[] calldata sharesHolders) external;\n\n}\n"
    },
    "contracts/interfaces/IGauge.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\ninterface IGauge {\r\n\r\n    function duration() external view returns (uint);\r\n\r\n    function left(address rewardToken) external view returns (uint);\r\n\r\n    function getReward(address account, address[] memory tokens) external;\r\n\r\n    function getAllRewards(address account) external;\r\n\r\n    function handleBalanceChange(address account) external;\r\n\r\n    function notifyRewardAmount(address token, uint amount) external;\r\n\r\n    function setStakingToken(address stakingToken_) external;\r\n}"
    },
    "contracts/interfaces/ISwitcher.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\ninterface ISwitcher {\r\n    event NewStrategy(address strategy);\r\n    event AnnouncedNewStrategy(address strategy);\r\n    event CancelAnnouncedStrategy(address strategy);\r\n    event PendingStrategy(address strategy);\r\n    event Invested(address indexed strategy, uint amount);\r\n    event WithdrawFromStrategy(address indexed strategy, uint amount);\r\n\r\n    error OnlyVaultCanDoThis();\r\n    error OnlyGovernanceCanDoThis();\r\n    error Already();\r\n    error NoNewStrategyAnnounced();\r\n    error Timelock();\r\n    error NotPending();\r\n    error AssetsHaveNotYetBeenBridged();\r\n    error StrategyIsNowSwitching();\r\n    error StrategyIsNotSwitchingNow();\r\n\r\n    /// @notice Underlying asset\r\n    function asset() external view returns (address);\r\n\r\n    /// @notice Linked vault\r\n    function vault() external view returns (address);\r\n\r\n    /// @notice Current active strategy\r\n    function strategy() external view returns (address);\r\n\r\n    /// @notice New strategy\r\n    function pendingStrategy() external view returns (address);\r\n\r\n    /// @notice Address that can manage strategies\r\n    function governance() external view returns (address);\r\n\r\n    /// @notice Total assets managed by Switcher\r\n    function totalAssets() external view returns (uint);\r\n\r\n//    function doHardWork() external;\r\n\r\n    /// @notice Invest all available assets to strategy\r\n    function investAll() external;\r\n\r\n    /// @notice Withdraws all underlying assets to the vault\r\n    function withdrawAllToVault() external;\r\n\r\n    /// @notice Withdraws underlying assets to the vault\r\n    function withdrawToVault(uint amount) external;\r\n\r\n    /// @notice First time setup method called by vault\r\n    function setup(address asset_) external;\r\n}\r\n"
    },
    "contracts/interfaces/IWETH9.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\ninterface IWETH9 {\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint wad) external;\r\n}"
    },
    "contracts/StakelessPoolBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\nimport \"./interfaces/IGauge.sol\";\r\n\r\n/// @title Simplified abstract stakeless pool for multiple rewards\r\n/// @author belbix\r\n/// @author a17\r\nabstract contract StakelessPoolBase is IGauge, ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n\r\n    // *************************************************************\r\n    //                        CONSTANTS\r\n    // *************************************************************\r\n\r\n    /// @dev Precision for internal calculations\r\n    uint internal constant _PRECISION = 10 ** 27;\r\n\r\n    // *************************************************************\r\n    //                        VARIABLES\r\n    // *************************************************************\r\n\r\n    address public governance;\r\n\r\n    /// @dev Rewards are released over this period\r\n    uint public duration;\r\n\r\n    /// @dev This token will be always allowed as reward\r\n    address public defaultRewardToken;\r\n\r\n    /// @dev Supply adjusted on derived balance logic. Use for rewards boost.\r\n    uint public derivedSupply;\r\n\r\n    /// @dev Account => Staking token virtual balance. Can be adjusted regarding rewards boost logic.\r\n    mapping(address => uint) public derivedBalances;\r\n\r\n    /// @dev Account => User virtual balance of staking token.\r\n    mapping(address => uint) public balanceOf;\r\n\r\n    /// @dev Total amount of attached staking tokens\r\n    uint public totalSupply;\r\n\r\n    /// @dev Reward token => Reward rate with precision _PRECISION\r\n    mapping(address => uint) public rewardRate;\r\n\r\n    /// @dev Reward token => Reward finish period in timestamp.\r\n    mapping(address => uint) public periodFinish;\r\n\r\n    /// @dev Reward token => Last updated time for reward token for internal calculations.\r\n    mapping(address => uint) public lastUpdateTime;\r\n\r\n    /// @dev Reward token => Part of SNX pool logic. Internal snapshot of reward per token value.\r\n    mapping(address => uint) public rewardPerTokenStored;\r\n\r\n    /// @dev Reward token => Account => amount. Already paid reward amount for snapshot calculation.\r\n    mapping(address => mapping(address => uint)) public userRewardPerTokenPaid;\r\n\r\n    /// @dev Reward token => Account => amount. Snapshot of user's reward per token.\r\n    mapping(address => mapping(address => uint)) public rewards;\r\n\r\n    /// @dev Allowed reward tokens for staking token\r\n    address[] public rewardTokens;\r\n\r\n    /// @dev Allowed reward tokens for staking token stored in map for fast check.\r\n    mapping(address => bool) public isRewardToken;\r\n\r\n    /// @notice account => recipient. The recipient will receive all rewards for this account.\r\n    mapping(address => address) public rewardsRedirect;\r\n\r\n    // *************************************************************\r\n    //                        EVENTS\r\n    // *************************************************************\r\n\r\n    event BalanceIncreased(address indexed account, uint amount);\r\n    event BalanceDecreased(address indexed account, uint amount);\r\n    event NotifyReward(address indexed from, address indexed reward, uint amount);\r\n    event ClaimRewards(address indexed account, address indexed reward, uint amount, address recepient);\r\n\r\n    // *************************************************************\r\n    //                        ERRORS\r\n    // *************************************************************\r\n\r\n    error AlreadyRegistered();\r\n    error RewardsNotEnded();\r\n    error NotAllowed();\r\n    error NotRewardToken();\r\n\r\n    // *************************************************************\r\n    //                        INIT\r\n    // *************************************************************\r\n\r\n    constructor(address defaultRewardToken_, uint duration_, address governance_) {\r\n        defaultRewardToken = defaultRewardToken_;\r\n        duration = duration_;\r\n        governance = governance_;\r\n    }\r\n\r\n    // *************************************************************\r\n    //                        RESTRICTIONS\r\n    // *************************************************************\r\n\r\n    modifier onlyAllowedContracts() {\r\n        _requireGov();\r\n        _;\r\n    }\r\n\r\n    // *************************************************************\r\n    //                            VIEWS\r\n    // *************************************************************\r\n\r\n    /// @dev Length of rewards tokens array for given token\r\n    function rewardTokensLength() external view returns (uint) {\r\n        return rewardTokens.length;\r\n    }\r\n\r\n    /// @dev Reward paid for token for the current period.\r\n    function rewardPerToken(address rewardToken) public view returns (uint) {\r\n        uint _derivedSupply = derivedSupply;\r\n        if (_derivedSupply == 0) {\r\n            return rewardPerTokenStored[rewardToken];\r\n        }\r\n\r\n        return rewardPerTokenStored[rewardToken]\r\n            +\r\n            (lastTimeRewardApplicable(rewardToken) - lastUpdateTime[rewardToken])\r\n            * rewardRate[rewardToken]\r\n            / _derivedSupply;\r\n    }\r\n\r\n    /// @dev Returns the last time the reward was modified or periodFinish if the reward has ended\r\n    function lastTimeRewardApplicable(address rewardToken) public view returns (uint) {\r\n        uint _periodFinish = periodFinish[rewardToken];\r\n        return block.timestamp < _periodFinish ? block.timestamp : _periodFinish;\r\n    }\r\n\r\n    /// @dev Balance of holder adjusted with specific rules for boost calculation.\r\n    ///      Supposed to be implemented in a parent contract\r\n    ///      Adjust user balance with some logic, like boost logic.\r\n    function derivedBalance(address account) public view virtual returns (uint) {\r\n        return balanceOf[account];\r\n    }\r\n\r\n    /// @dev Amount of reward tokens left for the current period\r\n    function left(address rewardToken) public view returns (uint) {\r\n        uint _periodFinish = periodFinish[rewardToken];\r\n        if (block.timestamp >= _periodFinish) return 0;\r\n        uint _remaining = _periodFinish - block.timestamp;\r\n        return _remaining * rewardRate[rewardToken] / _PRECISION;\r\n    }\r\n\r\n    /// @dev Approximate of earned rewards ready to claim\r\n    function earned(address rewardToken, address account) public view returns (uint) {\r\n        return derivedBalance(account)\r\n        * (rewardPerToken(rewardToken) - userRewardPerTokenPaid[rewardToken][account])\r\n        / _PRECISION\r\n            + rewards[rewardToken][account];\r\n    }\r\n\r\n    // *************************************************************\r\n    //                  OPERATOR ACTIONS\r\n    // *************************************************************\r\n\r\n    /// @dev Whitelist reward token for staking token. Only operator can do it.\r\n    function registerRewardToken(address rewardToken) external onlyAllowedContracts {\r\n        if (isRewardToken[rewardToken]) {\r\n            revert AlreadyRegistered();\r\n        }\r\n        isRewardToken[rewardToken] = true;\r\n        rewardTokens.push(rewardToken);\r\n    }\r\n\r\n    /// @dev Remove from whitelist reward token for staking token. Only operator can do it.\r\n    ///      We assume that the first token can not be removed.\r\n    function removeRewardToken(address rewardToken) external onlyAllowedContracts {\r\n        if (periodFinish[rewardToken] >= block.timestamp) {\r\n            revert RewardsNotEnded();\r\n        }\r\n        if (!isRewardToken[rewardToken]) {\r\n            revert NotRewardToken();\r\n        }\r\n\r\n        isRewardToken[rewardToken] = false;\r\n        uint length = rewardTokens.length;\r\n        uint i = 0;\r\n        for (; i < length; i++) {\r\n            address t = rewardTokens[i];\r\n            if (t == rewardToken) {\r\n                break;\r\n            }\r\n        }\r\n        // if isRewardToken map and rewardTokens array changed accordingly the token always exist\r\n        rewardTokens[i] = rewardTokens[length - 1];\r\n        rewardTokens.pop();\r\n    }\r\n\r\n    /// @dev Account or governance can setup a redirect of all rewards.\r\n    ///      It needs for 3rd party contracts integrations.\r\n    function setRewardsRedirect(address account, address recipient) external {\r\n        require(msg.sender == account || msg.sender == governance, \"Not allowed\");\r\n        rewardsRedirect[account] = recipient;\r\n    }\r\n\r\n    // *************************************************************\r\n    //                      BALANCE\r\n    // *************************************************************\r\n\r\n    /// @dev Assume to be called when linked token balance changes.\r\n    function _registerBalanceIncreasing(\r\n        address account,\r\n        uint amount\r\n    ) internal virtual nonReentrant {\r\n        require(amount > 0, \"Zero amount\");\r\n\r\n        _increaseBalance(account, amount);\r\n        emit BalanceIncreased(account, amount);\r\n    }\r\n\r\n    function _increaseBalance(\r\n        address account,\r\n        uint amount\r\n    ) internal virtual {\r\n        _updateRewardForAllTokens(account);\r\n        totalSupply += amount;\r\n        balanceOf[account] += amount;\r\n        _updateDerivedBalance(account);\r\n    }\r\n\r\n    /// @dev Assume to be called when linked token balance changes.\r\n    function _registerBalanceDecreasing(\r\n        address account,\r\n        uint amount\r\n    ) internal nonReentrant virtual {\r\n        _decreaseBalance(account, amount);\r\n        emit BalanceDecreased(account, amount);\r\n    }\r\n\r\n    function _decreaseBalance(\r\n        address account,\r\n        uint amount\r\n    ) internal virtual {\r\n        _updateRewardForAllTokens(account);\r\n        totalSupply -= amount;\r\n        balanceOf[account] -= amount;\r\n        _updateDerivedBalance(account);\r\n    }\r\n\r\n    function _updateDerivedBalance(address account) internal {\r\n        uint __derivedBalance = derivedBalances[account];\r\n        derivedSupply -= __derivedBalance;\r\n        __derivedBalance = derivedBalance(account);\r\n        derivedBalances[account] = __derivedBalance;\r\n        derivedSupply += __derivedBalance;\r\n    }\r\n\r\n    // *************************************************************\r\n    //                          CLAIM\r\n    // *************************************************************\r\n\r\n    /// @dev Caller should implement restriction checks\r\n    function _getReward(\r\n        address account,\r\n        address[] memory rewardTokens_,\r\n        address recipient\r\n    ) internal nonReentrant virtual {\r\n        address newRecipient = rewardsRedirect[recipient];\r\n        if (newRecipient != address(0)) {\r\n            recipient = newRecipient;\r\n        }\r\n        require(recipient == msg.sender, \"Not allowed\");\r\n\r\n        _updateDerivedBalance(account);\r\n\r\n        uint len = rewardTokens_.length;\r\n\r\n        for (uint i; i < len; ++i) {\r\n            address rewardToken = rewardTokens_[i];\r\n            _updateReward(rewardToken, account);\r\n\r\n            uint _reward = rewards[rewardToken][account];\r\n            if (_reward > 0) {\r\n                rewards[rewardToken][account] = 0;\r\n                IERC20(rewardToken).safeTransfer(recipient, _reward);\r\n            }\r\n\r\n            emit ClaimRewards(account, rewardToken, _reward, recipient);\r\n        }\r\n    }\r\n\r\n    // *************************************************************\r\n    //                    REWARDS CALCULATIONS\r\n    // *************************************************************\r\n\r\n    function _updateRewardForAllTokens(address account) internal {\r\n        address[] memory rts = rewardTokens;\r\n        uint length = rts.length;\r\n        for (uint i; i < length; ++i) {\r\n            _updateReward(rts[i], account);\r\n        }\r\n        _updateReward(defaultRewardToken, account);\r\n    }\r\n\r\n    function _updateReward(address rewardToken, address account) internal {\r\n        uint _rewardPerTokenStored = rewardPerToken(rewardToken);\r\n        rewardPerTokenStored[rewardToken] = _rewardPerTokenStored;\r\n        lastUpdateTime[rewardToken] = lastTimeRewardApplicable(rewardToken);\r\n        if (account != address(0)) {\r\n            rewards[rewardToken][account] = earned(rewardToken, account);\r\n            userRewardPerTokenPaid[rewardToken][account] = _rewardPerTokenStored;\r\n        }\r\n    }\r\n\r\n    // *************************************************************\r\n    //                         NOTIFY\r\n    // *************************************************************\r\n\r\n    function _notifyRewardAmount(\r\n        address rewardToken,\r\n        uint amount,\r\n        bool transferRewards\r\n    ) internal virtual {\r\n        require(amount > 0, \"Zero amount\");\r\n        require(defaultRewardToken == rewardToken || isRewardToken[rewardToken], \"Token not allowed\");\r\n\r\n        _updateReward(rewardToken, address(0));\r\n        uint _duration = duration;\r\n\r\n        if (transferRewards) {\r\n            uint balanceBefore = IERC20(rewardToken).balanceOf(address(this));\r\n            IERC20(rewardToken).safeTransferFrom(msg.sender, address(this), amount);\r\n            // refresh amount if token was taxable\r\n            amount = IERC20(rewardToken).balanceOf(address(this)) - balanceBefore;\r\n        }\r\n        // if transferRewards=false need to wisely use it in implementation!\r\n\r\n        if (block.timestamp >= periodFinish[rewardToken]) {\r\n            rewardRate[rewardToken] = amount * _PRECISION / _duration;\r\n        } else {\r\n            uint _remaining = periodFinish[rewardToken] - block.timestamp;\r\n            uint _left = _remaining * rewardRate[rewardToken];\r\n            // rewards should not extend period infinity, only higher amount allowed\r\n            require(amount > _left / _PRECISION, \"Amount should be higher than remaining rewards\");\r\n            rewardRate[rewardToken] = (amount * _PRECISION + _left) / _duration;\r\n        }\r\n\r\n        lastUpdateTime[rewardToken] = block.timestamp;\r\n        periodFinish[rewardToken] = block.timestamp + _duration;\r\n        emit NotifyReward(msg.sender, rewardToken, amount);\r\n    }\r\n\r\n    // *************************************************************\r\n    //                         ACCESS\r\n    // *************************************************************\r\n\r\n    function _requireGov() internal view {\r\n        require (msg.sender == governance, \"Not allowed\");\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 150
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}