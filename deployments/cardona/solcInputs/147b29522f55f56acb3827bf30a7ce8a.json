{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/Gauge.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"./StakelessPoolBase.sol\";\r\n\r\n/// @title Stakeless pool for vaults\r\n/// @author belbix\r\n/// @author a17\r\ncontract Gauge is StakelessPoolBase {\r\n    // *************************************************************\r\n    //                        VARIABLES\r\n    // *************************************************************\r\n\r\n    address public stakingToken;\r\n\r\n    // *************************************************************\r\n    //                        EVENTS\r\n    // *************************************************************\r\n\r\n    event StakingToken(address token);\r\n    event Deposit(address indexed account, uint amount);\r\n    event Withdraw(address indexed account, uint amount, bool full, uint veId);\r\n\r\n    // *************************************************************\r\n    //                        ERRORS\r\n    // *************************************************************\r\n\r\n    error Already();\r\n    error WrongStakingToken();\r\n\r\n    // *************************************************************\r\n    //                        INIT\r\n    // *************************************************************\r\n\r\n    constructor(\r\n        address defaultRewardToken_,\r\n        uint duration_,\r\n        address governance_\r\n    ) StakelessPoolBase(defaultRewardToken_, duration_, governance_) {}\r\n\r\n    function setStakingToken(address stakingToken_) external {\r\n        if (stakingToken != address(0)) {\r\n            revert Already();\r\n        }\r\n        stakingToken = stakingToken_;\r\n        emit StakingToken(stakingToken_);\r\n    }\r\n\r\n    // *************************************************************\r\n    //                        CLAIMS\r\n    // *************************************************************\r\n\r\n    function getReward(address account, address[] memory tokens) external {\r\n        _getReward(account, tokens);\r\n    }\r\n\r\n    function getAllRewards(address account) external {\r\n        _getAllRewards(account);\r\n    }\r\n\r\n    function _getAllRewards(address account) internal {\r\n        address[] storage rts = rewardTokens;\r\n        uint length = rts.length;\r\n        address[] memory tokens = new address[](length + 1);\r\n        for (uint i; i < length; ++i) {\r\n            tokens[i] = rts[i];\r\n        }\r\n        tokens[length] = defaultRewardToken;\r\n        _getReward(account, tokens);\r\n    }\r\n\r\n    function _getReward(address account, address[] memory tokens) internal {\r\n        _getReward(account, tokens, account);\r\n    }\r\n\r\n    // *************************************************************\r\n    //                   VIRTUAL DEPOSIT/WITHDRAW\r\n    // *************************************************************\r\n\r\n    /// @dev Must be called from stakingToken when user balance changed.\r\n    function handleBalanceChange(address account) external {\r\n        address _stakingToken = msg.sender;\r\n        if (stakingToken != _stakingToken) {\r\n            revert WrongStakingToken();\r\n        }\r\n\r\n        uint stakedBalance = balanceOf[account];\r\n        uint actualBalance = IERC20(_stakingToken).balanceOf(account);\r\n        if (stakedBalance < actualBalance) {\r\n            _deposit(account, actualBalance - stakedBalance);\r\n        } else if (stakedBalance > actualBalance) {\r\n            _withdraw(account, stakedBalance - actualBalance, actualBalance == 0);\r\n        }\r\n    }\r\n\r\n    function _deposit(\r\n        address account,\r\n        uint amount\r\n    ) internal {\r\n        _registerBalanceIncreasing(account, amount);\r\n        emit Deposit(account, amount);\r\n    }\r\n\r\n    function _withdraw(\r\n        address account,\r\n        uint amount,\r\n        bool fullWithdraw\r\n    ) internal {\r\n        _registerBalanceDecreasing(account, amount);\r\n        emit Withdraw(\r\n            account,\r\n            amount,\r\n            fullWithdraw,\r\n            0\r\n        );\r\n    }\r\n\r\n    // *************************************************************\r\n    //                   REWARDS DISTRIBUTION\r\n    // *************************************************************\r\n\r\n    /// @dev Anybody is able to call this function\r\n    function notifyRewardAmount(address token, uint amount) external nonReentrant {\r\n        _notifyRewardAmount(token, amount, true);\r\n    }\r\n\r\n}\r\n"
    },
    "contracts/GaugeRewarder.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"./interfaces/IGauge.sol\";\r\nimport \"./interfaces/IRewardToken.sol\";\r\n\r\n/// @title Gauge rewards filler\r\n/// @dev Compatible with Gelato Solidity Functions service\r\n/// @author a17\r\ncontract GaugeRewarder {\r\n\r\n    address public immutable gauge;\r\n\r\n    address public immutable rewardToken;\r\n\r\n    uint public immutable duration;\r\n\r\n    uint public immutable rewardAmountPerDuration;\r\n\r\n    uint public lastExec;\r\n\r\n    error WaitFor(uint timestamp);\r\n\r\n    constructor(address gauge_, address rewardToken_, uint rewardAmountPerDuration_) {\r\n        gauge = gauge_;\r\n        rewardToken = rewardToken_;\r\n        duration = IGauge(gauge_).duration();\r\n        rewardAmountPerDuration = rewardAmountPerDuration_;\r\n        IERC20(rewardToken_).approve(gauge_, type(uint).max);\r\n    }\r\n\r\n    function checker() public view returns (bool canExec, bytes memory execPayload) {\r\n        canExec = (block.timestamp - lastExec) > duration && IRewardToken(rewardToken).minter() == address(this);\r\n        execPayload = abi.encodeCall(GaugeRewarder.addRewards, ());\r\n    }\r\n\r\n    function addRewards() external {\r\n        (bool canExec,) = checker();\r\n        if (!canExec) {\r\n            revert WaitFor(lastExec + duration);\r\n        }\r\n\r\n        uint _rewardAmountPerDuration = rewardAmountPerDuration;\r\n        IRewardToken(rewardToken).mint(rewardAmountPerDuration);\r\n        IGauge(gauge).notifyRewardAmount(rewardToken, _rewardAmountPerDuration);\r\n        lastExec = block.timestamp;\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IGauge.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\ninterface IGauge {\r\n\r\n    function duration() external view returns (uint);\r\n\r\n    function left(address rewardToken) external view returns (uint);\r\n\r\n    function getReward(address account, address[] memory tokens) external;\r\n\r\n    function getAllRewards(address account) external;\r\n\r\n    function handleBalanceChange(address account) external;\r\n\r\n    function notifyRewardAmount(address token, uint amount) external;\r\n\r\n    function setStakingToken(address stakingToken_) external;\r\n}"
    },
    "contracts/interfaces/IRewardToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\ninterface IRewardToken {\r\n    function minter() external view returns(address);\r\n\r\n    function mint(uint amount) external;\r\n\r\n}"
    },
    "contracts/StakelessPoolBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\nimport \"./interfaces/IGauge.sol\";\r\n\r\n/// @title Simplified abstract stakeless pool for multiple rewards\r\n/// @author belbix\r\n/// @author a17\r\nabstract contract StakelessPoolBase is IGauge, ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n\r\n    // *************************************************************\r\n    //                        CONSTANTS\r\n    // *************************************************************\r\n\r\n    /// @dev Precision for internal calculations\r\n    uint internal constant _PRECISION = 10 ** 27;\r\n\r\n    // *************************************************************\r\n    //                        VARIABLES\r\n    // *************************************************************\r\n\r\n    address public governance;\r\n\r\n    /// @dev Rewards are released over this period\r\n    uint public duration;\r\n\r\n    /// @dev This token will be always allowed as reward\r\n    address public defaultRewardToken;\r\n\r\n    /// @dev Supply adjusted on derived balance logic. Use for rewards boost.\r\n    uint public derivedSupply;\r\n\r\n    /// @dev Account => Staking token virtual balance. Can be adjusted regarding rewards boost logic.\r\n    mapping(address => uint) public derivedBalances;\r\n\r\n    /// @dev Account => User virtual balance of staking token.\r\n    mapping(address => uint) public balanceOf;\r\n\r\n    /// @dev Total amount of attached staking tokens\r\n    uint public totalSupply;\r\n\r\n    /// @dev Reward token => Reward rate with precision _PRECISION\r\n    mapping(address => uint) public rewardRate;\r\n\r\n    /// @dev Reward token => Reward finish period in timestamp.\r\n    mapping(address => uint) public periodFinish;\r\n\r\n    /// @dev Reward token => Last updated time for reward token for internal calculations.\r\n    mapping(address => uint) public lastUpdateTime;\r\n\r\n    /// @dev Reward token => Part of SNX pool logic. Internal snapshot of reward per token value.\r\n    mapping(address => uint) public rewardPerTokenStored;\r\n\r\n    /// @dev Reward token => Account => amount. Already paid reward amount for snapshot calculation.\r\n    mapping(address => mapping(address => uint)) public userRewardPerTokenPaid;\r\n\r\n    /// @dev Reward token => Account => amount. Snapshot of user's reward per token.\r\n    mapping(address => mapping(address => uint)) public rewards;\r\n\r\n    /// @dev Allowed reward tokens for staking token\r\n    address[] public rewardTokens;\r\n\r\n    /// @dev Allowed reward tokens for staking token stored in map for fast check.\r\n    mapping(address => bool) public isRewardToken;\r\n\r\n    /// @notice account => recipient. The recipient will receive all rewards for this account.\r\n    mapping(address => address) public rewardsRedirect;\r\n\r\n    // *************************************************************\r\n    //                        EVENTS\r\n    // *************************************************************\r\n\r\n    event BalanceIncreased(address indexed account, uint amount);\r\n    event BalanceDecreased(address indexed account, uint amount);\r\n    event NotifyReward(address indexed from, address indexed reward, uint amount);\r\n    event ClaimRewards(address indexed account, address indexed reward, uint amount, address recepient);\r\n\r\n    // *************************************************************\r\n    //                        ERRORS\r\n    // *************************************************************\r\n\r\n    error AlreadyRegistered();\r\n    error RewardsNotEnded();\r\n    error NotAllowed();\r\n    error NotRewardToken();\r\n    error ZeroAmount();\r\n    error AmountShouldBeHigherThanRemainingRewards();\r\n\r\n    // *************************************************************\r\n    //                        INIT\r\n    // *************************************************************\r\n\r\n    constructor(address defaultRewardToken_, uint duration_, address governance_) {\r\n        defaultRewardToken = defaultRewardToken_;\r\n        duration = duration_;\r\n        governance = governance_;\r\n    }\r\n\r\n    // *************************************************************\r\n    //                        RESTRICTIONS\r\n    // *************************************************************\r\n\r\n    modifier onlyAllowedContracts() {\r\n        _requireGov();\r\n        _;\r\n    }\r\n\r\n    // *************************************************************\r\n    //                            VIEWS\r\n    // *************************************************************\r\n\r\n    /// @dev Length of rewards tokens array for given token\r\n    function rewardTokensLength() external view returns (uint) {\r\n        return rewardTokens.length;\r\n    }\r\n\r\n    /// @dev Reward paid for token for the current period.\r\n    function rewardPerToken(address rewardToken) public view returns (uint) {\r\n        uint _derivedSupply = derivedSupply;\r\n        if (_derivedSupply == 0) {\r\n            return rewardPerTokenStored[rewardToken];\r\n        }\r\n\r\n        return rewardPerTokenStored[rewardToken]\r\n            +\r\n            (lastTimeRewardApplicable(rewardToken) - lastUpdateTime[rewardToken])\r\n            * rewardRate[rewardToken]\r\n            / _derivedSupply;\r\n    }\r\n\r\n    /// @dev Returns the last time the reward was modified or periodFinish if the reward has ended\r\n    function lastTimeRewardApplicable(address rewardToken) public view returns (uint) {\r\n        uint _periodFinish = periodFinish[rewardToken];\r\n        return block.timestamp < _periodFinish ? block.timestamp : _periodFinish;\r\n    }\r\n\r\n    /// @dev Balance of holder adjusted with specific rules for boost calculation.\r\n    ///      Supposed to be implemented in a parent contract\r\n    ///      Adjust user balance with some logic, like boost logic.\r\n    function derivedBalance(address account) public view virtual returns (uint) {\r\n        return balanceOf[account];\r\n    }\r\n\r\n    /// @dev Amount of reward tokens left for the current period\r\n    function left(address rewardToken) public view returns (uint) {\r\n        uint _periodFinish = periodFinish[rewardToken];\r\n        if (block.timestamp >= _periodFinish) return 0;\r\n        uint remaining = _periodFinish - block.timestamp;\r\n        return remaining * rewardRate[rewardToken] / _PRECISION;\r\n    }\r\n\r\n    /// @dev Approximate of earned rewards ready to claim\r\n    function earned(address rewardToken, address account) public view returns (uint) {\r\n        return derivedBalance(account)\r\n        * (rewardPerToken(rewardToken) - userRewardPerTokenPaid[rewardToken][account])\r\n        / _PRECISION\r\n            + rewards[rewardToken][account];\r\n    }\r\n\r\n    // *************************************************************\r\n    //                  OPERATOR ACTIONS\r\n    // *************************************************************\r\n\r\n    /// @dev Whitelist reward token for staking token. Only operator can do it.\r\n    function registerRewardToken(address rewardToken) external onlyAllowedContracts {\r\n        if (isRewardToken[rewardToken]) {\r\n            revert AlreadyRegistered();\r\n        }\r\n        isRewardToken[rewardToken] = true;\r\n        rewardTokens.push(rewardToken);\r\n    }\r\n\r\n    /// @dev Remove from whitelist reward token for staking token. Only operator can do it.\r\n    ///      We assume that the first token can not be removed.\r\n    function removeRewardToken(address rewardToken) external onlyAllowedContracts {\r\n        if (periodFinish[rewardToken] >= block.timestamp) {\r\n            revert RewardsNotEnded();\r\n        }\r\n        if (!isRewardToken[rewardToken]) {\r\n            revert NotRewardToken();\r\n        }\r\n\r\n        isRewardToken[rewardToken] = false;\r\n        uint length = rewardTokens.length;\r\n        uint i = 0;\r\n        for (; i < length; i++) {\r\n            address t = rewardTokens[i];\r\n            if (t == rewardToken) {\r\n                break;\r\n            }\r\n        }\r\n        // if isRewardToken map and rewardTokens array changed accordingly the token always exist\r\n        rewardTokens[i] = rewardTokens[length - 1];\r\n        rewardTokens.pop();\r\n    }\r\n\r\n    /// @dev Account or governance can setup a redirect of all rewards.\r\n    ///      It needs for 3rd party contracts integrations.\r\n    function setRewardsRedirect(address account, address recipient) external {\r\n        if (msg.sender != account && msg.sender != governance) {\r\n            revert NotAllowed();\r\n        }\r\n        rewardsRedirect[account] = recipient;\r\n    }\r\n\r\n    // *************************************************************\r\n    //                      BALANCE\r\n    // *************************************************************\r\n\r\n    /// @dev Assume to be called when linked token balance changes.\r\n    function _registerBalanceIncreasing(\r\n        address account,\r\n        uint amount\r\n    ) internal virtual nonReentrant {\r\n        if (amount == 0) {\r\n            revert ZeroAmount();\r\n        }\r\n\r\n        _increaseBalance(account, amount);\r\n        emit BalanceIncreased(account, amount);\r\n    }\r\n\r\n    function _increaseBalance(\r\n        address account,\r\n        uint amount\r\n    ) internal virtual {\r\n        _updateRewardForAllTokens(account);\r\n        totalSupply += amount;\r\n        balanceOf[account] += amount;\r\n        _updateDerivedBalance(account);\r\n    }\r\n\r\n    /// @dev Assume to be called when linked token balance changes.\r\n    function _registerBalanceDecreasing(\r\n        address account,\r\n        uint amount\r\n    ) internal nonReentrant virtual {\r\n        _decreaseBalance(account, amount);\r\n        emit BalanceDecreased(account, amount);\r\n    }\r\n\r\n    function _decreaseBalance(\r\n        address account,\r\n        uint amount\r\n    ) internal virtual {\r\n        _updateRewardForAllTokens(account);\r\n        totalSupply -= amount;\r\n        balanceOf[account] -= amount;\r\n        _updateDerivedBalance(account);\r\n    }\r\n\r\n    function _updateDerivedBalance(address account) internal {\r\n        uint __derivedBalance = derivedBalances[account];\r\n        derivedSupply -= __derivedBalance;\r\n        __derivedBalance = derivedBalance(account);\r\n        derivedBalances[account] = __derivedBalance;\r\n        derivedSupply += __derivedBalance;\r\n    }\r\n\r\n    // *************************************************************\r\n    //                          CLAIM\r\n    // *************************************************************\r\n\r\n    /// @dev Caller should implement restriction checks\r\n    function _getReward(\r\n        address account,\r\n        address[] memory rewardTokens_,\r\n        address recipient\r\n    ) internal nonReentrant virtual {\r\n        address newRecipient = rewardsRedirect[recipient];\r\n        if (newRecipient != address(0)) {\r\n            recipient = newRecipient;\r\n        }\r\n        if (recipient != msg.sender) {\r\n            revert NotAllowed();\r\n        }\r\n\r\n        _updateDerivedBalance(account);\r\n\r\n        uint len = rewardTokens_.length;\r\n\r\n        for (uint i; i < len; ++i) {\r\n            address rewardToken = rewardTokens_[i];\r\n            _updateReward(rewardToken, account);\r\n\r\n            uint _reward = rewards[rewardToken][account];\r\n            if (_reward != 0) {\r\n                rewards[rewardToken][account] = 0;\r\n                IERC20(rewardToken).transfer(recipient, _reward);\r\n            }\r\n\r\n            emit ClaimRewards(account, rewardToken, _reward, recipient);\r\n        }\r\n    }\r\n\r\n    // *************************************************************\r\n    //                    REWARDS CALCULATIONS\r\n    // *************************************************************\r\n\r\n    function _updateRewardForAllTokens(address account) internal {\r\n        address[] memory rts = rewardTokens;\r\n        uint length = rts.length;\r\n        for (uint i; i < length; ++i) {\r\n            _updateReward(rts[i], account);\r\n        }\r\n        _updateReward(defaultRewardToken, account);\r\n    }\r\n\r\n    function _updateReward(address rewardToken, address account) internal {\r\n        uint _rewardPerTokenStored = rewardPerToken(rewardToken);\r\n        rewardPerTokenStored[rewardToken] = _rewardPerTokenStored;\r\n        lastUpdateTime[rewardToken] = lastTimeRewardApplicable(rewardToken);\r\n        if (account != address(0)) {\r\n            rewards[rewardToken][account] = earned(rewardToken, account);\r\n            userRewardPerTokenPaid[rewardToken][account] = _rewardPerTokenStored;\r\n        }\r\n    }\r\n\r\n    // *************************************************************\r\n    //                         NOTIFY\r\n    // *************************************************************\r\n\r\n    /// @param transferRewards False mean that the given amount is already sent to the balance\r\n    function _notifyRewardAmount(\r\n        address rewardToken,\r\n        uint amount,\r\n        bool transferRewards\r\n    ) internal virtual {\r\n        if (amount == 0) {\r\n            revert ZeroAmount();\r\n        }\r\n        if (defaultRewardToken != rewardToken && !isRewardToken[rewardToken]) {\r\n            revert NotRewardToken();\r\n        }\r\n\r\n        _updateReward(rewardToken, address(0));\r\n        uint _duration = duration;\r\n\r\n        if (transferRewards) {\r\n            uint balanceBefore = IERC20(rewardToken).balanceOf(address(this));\r\n            IERC20(rewardToken).transferFrom(msg.sender, address(this), amount);\r\n            // refresh amount if token was taxable\r\n            amount = IERC20(rewardToken).balanceOf(address(this)) - balanceBefore;\r\n        }\r\n        // if transferRewards=false need to wisely use it in implementation!\r\n\r\n        if (block.timestamp >= periodFinish[rewardToken]) {\r\n            rewardRate[rewardToken] = amount * _PRECISION / _duration;\r\n        } else {\r\n            uint remaining = periodFinish[rewardToken] - block.timestamp;\r\n            uint _left = remaining * rewardRate[rewardToken];\r\n            // rewards should not extend period infinity, only higher amount allowed\r\n            if (amount <= _left / _PRECISION) {\r\n                revert AmountShouldBeHigherThanRemainingRewards();\r\n            }\r\n            rewardRate[rewardToken] = (amount * _PRECISION + _left) / _duration;\r\n        }\r\n\r\n        lastUpdateTime[rewardToken] = block.timestamp;\r\n        periodFinish[rewardToken] = block.timestamp + _duration;\r\n        emit NotifyReward(msg.sender, rewardToken, amount);\r\n    }\r\n\r\n    // *************************************************************\r\n    //                         ACCESS\r\n    // *************************************************************\r\n\r\n    function _requireGov() internal view {\r\n        if (msg.sender != governance) {\r\n            revert NotAllowed();\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 150
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}