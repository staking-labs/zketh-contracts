{
  "address": "0x3C888C84511f4C0a4F3Ea5eD1a16ad7F6514077e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "switcher_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bridge_",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "destinationNetwork_",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Already",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CantBridge",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DestinationIsNotSet",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "NoClaimRequestForUser",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAllAssetsAreBridged",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughBridgedAssets",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyGovernanceCanDoThis",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlySwitcherCanDoThis",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BridgeAssetsToL1",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BridgeRequestMessageToL1",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "contractL1",
          "type": "address"
        }
      ],
      "name": "Destination",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultSharesAmount",
          "type": "uint256"
        }
      ],
      "name": "RequestAssets",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ENZYME_VAULT_REDEEM_TIMELOCK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_WAIT_TIME_FOR_BRIDGING",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SHUTTLE_FORCE_BRIDGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SHUTTLE_FORCE_CLAIM",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridgedAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "callBridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "sharesHolders",
          "type": "address[]"
        }
      ],
      "name": "claimRequestedAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "destination",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "destinationNetwork",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastBridgeTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastEnzymeDepositTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "needBridgingNow",
      "outputs": [
        {
          "internalType": "bool",
          "name": "need",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "toL1",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingRequestedBridgingAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestClaimAllAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultSharesAmount",
          "type": "uint256"
        }
      ],
      "name": "requestClaimAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "requests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "destination_",
          "type": "address"
        }
      ],
      "name": "setDestination",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "switcher",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRequested",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRequestedVaultSharesForClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAllToSwitcher",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawToSwitcher",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x4e4f81798b9ac2f44ffea1b1794c61ba4d1ef6451f52d273cb070b0f0370e00f",
  "receipt": {
    "to": null,
    "from": "0x3d0c177E035C30bb8681e5859EB98d114b48b935",
    "contractAddress": "0x3C888C84511f4C0a4F3Ea5eD1a16ad7F6514077e",
    "transactionIndex": 0,
    "gasUsed": "1402236",
    "logsBloom": "0x
    "blockHash": "0x06e6ca2d641257c21af38e31f620eb55f0f63e3b1d80d87776af0bee47bfa73d",
    "transactionHash": "0x4e4f81798b9ac2f44ffea1b1794c61ba4d1ef6451f52d273cb070b0f0370e00f",
    "logs": [],
    "blockNumber": 1931412,
    "cumulativeGasUsed": "1402236",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb58De97355fb3cFF58db07b3dd5b7dd3e8898425",
    "0x528e26b25a34a4A5d0dbDa1d57D318153d2ED582",
    0
  ],
  "numDeployments": 1,
  "solcInputHash": "cd9d925b63ac700938c46a08eefd7125",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"switcher_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridge_\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"destinationNetwork_\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Already\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CantBridge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DestinationIsNotSet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"NoClaimRequestForUser\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAllAssetsAreBridged\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughBridgedAssets\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyGovernanceCanDoThis\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlySwitcherCanDoThis\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BridgeAssetsToL1\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BridgeRequestMessageToL1\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractL1\",\"type\":\"address\"}],\"name\":\"Destination\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultSharesAmount\",\"type\":\"uint256\"}],\"name\":\"RequestAssets\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ENZYME_VAULT_REDEEM_TIMELOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WAIT_TIME_FOR_BRIDGING\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SHUTTLE_FORCE_BRIDGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SHUTTLE_FORCE_CLAIM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgedAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"sharesHolders\",\"type\":\"address[]\"}],\"name\":\"claimRequestedAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destinationNetwork\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBridgeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastEnzymeDepositTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"needBridgingNow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"need\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"toL1\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingRequestedBridgingAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestClaimAllAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultSharesAmount\",\"type\":\"uint256\"}],\"name\":\"requestClaimAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination_\",\"type\":\"address\"}],\"name\":\"setDestination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"switcher\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRequestedVaultSharesForClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllToSwitcher\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToSwitcher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"a17\",\"kind\":\"dev\",\"methods\":{\"needBridgingNow()\":{\"returns\":{\"amount\":\"Amount of asset for bridging or request withdraw\",\"need\":\"Is need to call bridge now\",\"toL1\":\"Need bridge assets to L1\"}},\"withdrawAllToSwitcher()\":{\"details\":\"Will only be executed if all assets have already been transferred to the current network\"}},\"stateVariables\":{\"bridge\":{\"details\":\"LxLy bridge endpoint\"}},\"title\":\"ETH bridged staking\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"asset()\":{\"notice\":\"Underlying asset\"},\"bridgedAssets()\":{\"notice\":\"Amount of assets under strategy management on another network\"},\"callBridge()\":{\"notice\":\"Bridge assets for staking on another network or request withdraw from it\"},\"claimRequestedAssets(address[])\":{\"notice\":\"Claim requested and bridged from another network assets\"},\"destination()\":{\"notice\":\"Strategy contract on another network\"},\"needBridgingNow()\":{\"notice\":\"Is ready to call bridge\"},\"pendingRequestedBridgingAssets()\":{\"notice\":\"Assets in process of bridging\"},\"requestClaimAllAssets()\":{\"notice\":\"Send message to another network for claiming all invested assets Only Switcher can call it.\"},\"requestClaimAssets(uint256)\":{\"notice\":\"Transfer vault shares from user and put claim request to shuttle Only vault shares owner can call it.\"},\"switcher()\":{\"notice\":\"Linked switcher that manage strategy of the vault\"},\"totalAssets()\":{\"notice\":\"Total amount of assets under strategy management\"},\"totalRequested()\":{\"notice\":\"Total requested assets for withdraw from another network\"},\"withdrawAllToSwitcher()\":{\"notice\":\"Withdraws all assets under strategy management to the Switcher\"},\"withdrawToSwitcher(uint256)\":{\"notice\":\"Withdraws assets to the Switcher\"}},\"notice\":\"Bridging assets and messages between zkEVM and Ethereum via LxLy bridge\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BridgedStakingStrategy.sol\":\"BridgedStakingStrategy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":150},\"remappings\":[]},\"sources\":{\"@0xpolygonhermez/zkevm-contracts/contracts/interfaces/IBasePolygonZkEVMGlobalExitRoot.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.20;\\n\\ninterface IBasePolygonZkEVMGlobalExitRoot {\\n    /**\\n     * @dev Thrown when the caller is not the allowed contracts\\n     */\\n    error OnlyAllowedContracts();\\n\\n    function updateExitRoot(bytes32 newRollupExitRoot) external;\\n\\n    function globalExitRootMap(\\n        bytes32 globalExitRootNum\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x11812b6c81c5d9812bdf7061259a19f256787cac6e5e10d16e70e7dcfb3fb162\",\"license\":\"AGPL-3.0\"},\"@0xpolygonhermez/zkevm-contracts/contracts/v2/interfaces/IPolygonZkEVMBridgeV2.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.20;\\nimport \\\"../../interfaces/IBasePolygonZkEVMGlobalExitRoot.sol\\\";\\n\\ninterface IPolygonZkEVMBridgeV2 {\\n    /**\\n     * @dev Thrown when the destination network is invalid\\n     */\\n    error DestinationNetworkInvalid();\\n\\n    /**\\n     * @dev Thrown when the amount does not match msg.value\\n     */\\n    error AmountDoesNotMatchMsgValue();\\n\\n    /**\\n     * @dev Thrown when user is bridging tokens and is also sending a value\\n     */\\n    error MsgValueNotZero();\\n\\n    /**\\n     * @dev Thrown when the Ether transfer on claimAsset fails\\n     */\\n    error EtherTransferFailed();\\n\\n    /**\\n     * @dev Thrown when the message transaction on claimMessage fails\\n     */\\n    error MessageFailed();\\n\\n    /**\\n     * @dev Thrown when the global exit root does not exist\\n     */\\n    error GlobalExitRootInvalid();\\n\\n    /**\\n     * @dev Thrown when the smt proof does not match\\n     */\\n    error InvalidSmtProof();\\n\\n    /**\\n     * @dev Thrown when an index is already claimed\\n     */\\n    error AlreadyClaimed();\\n\\n    /**\\n     * @dev Thrown when the owner of permit does not match the sender\\n     */\\n    error NotValidOwner();\\n\\n    /**\\n     * @dev Thrown when the spender of the permit does not match this contract address\\n     */\\n    error NotValidSpender();\\n\\n    /**\\n     * @dev Thrown when the amount of the permit does not match\\n     */\\n    error NotValidAmount();\\n\\n    /**\\n     * @dev Thrown when the permit data contains an invalid signature\\n     */\\n    error NotValidSignature();\\n\\n    /**\\n     * @dev Thrown when sender is not the rollup manager\\n     */\\n    error OnlyRollupManager();\\n\\n    /**\\n     * @dev Thrown when the permit data contains an invalid signature\\n     */\\n    error NativeTokenIsEther();\\n\\n    /**\\n     * @dev Thrown when the permit data contains an invalid signature\\n     */\\n    error NoValueInMessagesOnGasTokenNetworks();\\n\\n    /**\\n     * @dev Thrown when the permit data contains an invalid signature\\n     */\\n    error GasTokenNetworkMustBeZeroOnEther();\\n\\n    /**\\n     * @dev Thrown when the wrapped token deployment fails\\n     */\\n    error FailedTokenWrappedDeployment();\\n\\n    function wrappedTokenToTokenInfo(\\n        address destinationAddress\\n    ) external view returns (uint32, address);\\n\\n    function updateGlobalExitRoot() external;\\n\\n    function activateEmergencyState() external;\\n\\n    function deactivateEmergencyState() external;\\n\\n    function bridgeAsset(\\n        uint32 destinationNetwork,\\n        address destinationAddress,\\n        uint256 amount,\\n        address token,\\n        bool forceUpdateGlobalExitRoot,\\n        bytes calldata permitData\\n    ) external payable;\\n\\n    function bridgeMessage(\\n        uint32 destinationNetwork,\\n        address destinationAddress,\\n        bool forceUpdateGlobalExitRoot,\\n        bytes calldata metadata\\n    ) external payable;\\n\\n    function bridgeMessageWETH(\\n        uint32 destinationNetwork,\\n        address destinationAddress,\\n        uint256 amountWETH,\\n        bool forceUpdateGlobalExitRoot,\\n        bytes calldata metadata\\n    ) external;\\n\\n    function claimAsset(\\n        bytes32[32] calldata smtProofLocalExitRoot,\\n        bytes32[32] calldata smtProofRollupExitRoot,\\n        uint256 globalIndex,\\n        bytes32 mainnetExitRoot,\\n        bytes32 rollupExitRoot,\\n        uint32 originNetwork,\\n        address originTokenAddress,\\n        uint32 destinationNetwork,\\n        address destinationAddress,\\n        uint256 amount,\\n        bytes calldata metadata\\n    ) external;\\n\\n    function claimMessage(\\n        bytes32[32] calldata smtProofLocalExitRoot,\\n        bytes32[32] calldata smtProofRollupExitRoot,\\n        uint256 globalIndex,\\n        bytes32 mainnetExitRoot,\\n        bytes32 rollupExitRoot,\\n        uint32 originNetwork,\\n        address originAddress,\\n        uint32 destinationNetwork,\\n        address destinationAddress,\\n        uint256 amount,\\n        bytes calldata metadata\\n    ) external;\\n\\n    function initialize(\\n        uint32 _networkID,\\n        address _gasTokenAddress,\\n        uint32 _gasTokenNetwork,\\n        IBasePolygonZkEVMGlobalExitRoot _globalExitRootManager,\\n        address _polygonRollupManager,\\n        bytes memory _gasTokenMetadata\\n    ) external;\\n\\n    function getTokenMetadata(\\n        address token\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x06203f66d0bd221e534be317664b0178cd8f706bb809008c6dbcc603111f404c\",\"license\":\"AGPL-3.0\"},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"contracts/BridgedStakingStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.24;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC4626.sol\\\";\\r\\nimport \\\"@0xpolygonhermez/zkevm-contracts/contracts/v2/interfaces/IPolygonZkEVMBridgeV2.sol\\\";\\r\\nimport \\\"./interfaces/ISwitcher.sol\\\";\\r\\nimport \\\"./interfaces/IBridgingStrategy.sol\\\";\\r\\nimport \\\"./interfaces/IWETH9.sol\\\";\\r\\n\\r\\n/// @title ETH bridged staking\\r\\n/// @notice Bridging assets and messages between zkEVM and Ethereum via LxLy bridge\\r\\n/// @author a17\\r\\ncontract BridgedStakingStrategy is IBridgingStrategy {\\r\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\r\\n    /*                         CONSTANTS                          */\\r\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\r\\n\\r\\n    uint public constant SHUTTLE_FORCE_BRIDGE = 10e18;\\r\\n\\r\\n    uint public constant SHUTTLE_FORCE_CLAIM = 10e18;\\r\\n\\r\\n    uint public constant MAX_WAIT_TIME_FOR_BRIDGING = 86400;\\r\\n\\r\\n    uint public constant ENZYME_VAULT_REDEEM_TIMELOCK = 86400;\\r\\n\\r\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\r\\n    /*                          STORAGE                           */\\r\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\r\\n\\r\\n    /// @inheritdoc IBridgingStrategy\\r\\n    address public immutable asset;\\r\\n\\r\\n    /// @inheritdoc IBridgingStrategy\\r\\n    address public immutable switcher;\\r\\n\\r\\n    uint32 public destinationNetwork;\\r\\n\\r\\n    /// @inheritdoc IBridgingStrategy\\r\\n    address public destination;\\r\\n\\r\\n    /// @dev LxLy bridge endpoint\\r\\n    address public immutable bridge;\\r\\n\\r\\n    /// @inheritdoc IBridgingStrategy\\r\\n    uint public bridgedAssets;\\r\\n\\r\\n    /// @inheritdoc IBridgingStrategy\\r\\n    uint public pendingRequestedBridgingAssets;\\r\\n\\r\\n    uint public lastBridgeTime;\\r\\n\\r\\n    uint public lastEnzymeDepositTime;\\r\\n\\r\\n    bool internal _isWethWithdrawing;\\r\\n\\r\\n    mapping(address user => uint shares) public requests;\\r\\n\\r\\n    uint public totalRequestedVaultSharesForClaim;\\r\\n\\r\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\r\\n    /*                          EVENTS                            */\\r\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\r\\n\\r\\n    error DestinationIsNotSet();\\r\\n    error Already();\\r\\n    error NotEnoughBridgedAssets();\\r\\n    error NotAllAssetsAreBridged();\\r\\n    error CantBridge();\\r\\n    error NoClaimRequestForUser(address user);\\r\\n    error OnlySwitcherCanDoThis();\\r\\n    error OnlyGovernanceCanDoThis();\\r\\n\\r\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\r\\n    /*                      INITIALIZATION                        */\\r\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\r\\n\\r\\n    constructor(address switcher_, address bridge_, uint32 destinationNetwork_) {\\r\\n        switcher = switcher_;\\r\\n        bridge = bridge_;\\r\\n        destinationNetwork = destinationNetwork_;\\r\\n        asset = ISwitcher(switcher_).asset();\\r\\n    }\\r\\n\\r\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\r\\n    /*                        CALLBACKS                           */\\r\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\r\\n\\r\\n    receive() external payable {\\r\\n        uint _pendingRequestedBridgingAssets = pendingRequestedBridgingAssets;\\r\\n        if (!_isWethWithdrawing && _pendingRequestedBridgingAssets > 0) {\\r\\n            IWETH9(asset).deposit{value: msg.value}();\\r\\n            if (msg.value <= _pendingRequestedBridgingAssets && ISwitcher(switcher).pendingStrategy() == address(0)) {\\r\\n                pendingRequestedBridgingAssets = _pendingRequestedBridgingAssets - msg.value;\\r\\n            } else {\\r\\n                pendingRequestedBridgingAssets = 0;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\r\\n    /*                        MODIFIERS                           */\\r\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\r\\n\\r\\n    modifier onlySwitcher() {\\r\\n        _requireSwitcher();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyGovernance() {\\r\\n        _requireGovernance();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\r\\n    /*                      RESTRICTED ACTIONS                    */\\r\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\r\\n\\r\\n    function setDestination(address destination_) external onlyGovernance {\\r\\n        if (destination != address(0)) {\\r\\n            revert Already();\\r\\n        }\\r\\n        destination = destination_;\\r\\n        emit Destination(destination_);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IBridgingStrategy\\r\\n    function requestClaimAllAssets() external onlySwitcher {\\r\\n        uint amount = type(uint).max;\\r\\n\\r\\n        IPolygonZkEVMBridgeV2(bridge).bridgeMessage(\\r\\n            destinationNetwork,\\r\\n            destination,\\r\\n            true,\\r\\n            abi.encodePacked(amount)\\r\\n        );\\r\\n\\r\\n        lastBridgeTime = block.timestamp;\\r\\n        pendingRequestedBridgingAssets += bridgedAssets;\\r\\n        bridgedAssets = 0;\\r\\n\\r\\n        emit BridgeRequestMessageToL1(amount);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IBridgingStrategy\\r\\n    function withdrawAllToSwitcher() external onlySwitcher returns(uint amount) {\\r\\n        if (bridgedAssets > 0 || pendingRequestedBridgingAssets > 0) {\\r\\n            revert NotAllAssetsAreBridged();\\r\\n        }\\r\\n        amount = IERC20(asset).balanceOf(address (this));\\r\\n        IERC20(asset).transfer(switcher, amount);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IBridgingStrategy\\r\\n    function withdrawToSwitcher(uint amount) external onlySwitcher {\\r\\n        uint withdrawAmount = amount;\\r\\n        if (IERC20(asset).balanceOf(address(this)) < withdrawAmount) {\\r\\n            revert NotEnoughBridgedAssets();\\r\\n        }\\r\\n        IERC20(asset).transfer(switcher, withdrawAmount);\\r\\n    }\\r\\n\\r\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\r\\n    /*                         USER ACTIONS                       */\\r\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\r\\n\\r\\n    /// @inheritdoc IBridgingStrategy\\r\\n    function requestClaimAssets(uint vaultSharesAmount) external {\\r\\n        IERC20(_getVault()).transferFrom(msg.sender, address(this), vaultSharesAmount);\\r\\n        requests[msg.sender] += vaultSharesAmount;\\r\\n        totalRequestedVaultSharesForClaim += vaultSharesAmount;\\r\\n\\r\\n        // todo send cross-chain message if need\\r\\n\\r\\n        emit RequestAssets(msg.sender, vaultSharesAmount);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IBridgingStrategy\\r\\n    function claimRequestedAssets(address[] calldata sharesHolders) external {\\r\\n        uint len = sharesHolders.length;\\r\\n        IERC4626 vault = IERC4626(_getVault());\\r\\n        uint[] memory gotAssets = new uint[](len);\\r\\n        uint totalSharesToBurn;\\r\\n        for (uint i; i < len; ++i) {\\r\\n            uint sharesToBurn = requests[sharesHolders[i]];\\r\\n            if (sharesToBurn == 0) {\\r\\n                revert NoClaimRequestForUser(sharesHolders[i]);\\r\\n            }\\r\\n            gotAssets[i] = vault.previewRedeem(sharesToBurn);\\r\\n            totalSharesToBurn += sharesToBurn;\\r\\n        }\\r\\n\\r\\n        vault.redeem(totalSharesToBurn, address(this), address(this));\\r\\n\\r\\n        for (uint i; i < len; ++i) {\\r\\n            IERC20(asset).transfer(sharesHolders[i], gotAssets[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\r\\n    /*                       PUBLIC ACTIONS                       */\\r\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\r\\n\\r\\n    /// @inheritdoc IBridgingStrategy\\r\\n    function callBridge() external {\\r\\n        if (destination == address(0)) {\\r\\n            revert DestinationIsNotSet();\\r\\n        }\\r\\n\\r\\n        (bool need, bool toL1, uint amount) = needBridgingNow();\\r\\n\\r\\n        if (!need) {\\r\\n            revert CantBridge();\\r\\n        }\\r\\n\\r\\n        if (toL1) {\\r\\n            _isWethWithdrawing = true;\\r\\n            IWETH9(asset).withdraw(amount);\\r\\n            _isWethWithdrawing = false;\\r\\n\\r\\n            IPolygonZkEVMBridgeV2(bridge).bridgeAsset{value: amount}(\\r\\n                destinationNetwork,\\r\\n                destination,\\r\\n                amount,\\r\\n                address(0),\\r\\n                true,\\r\\n                bytes(\\\"0\\\")\\r\\n            );\\r\\n\\r\\n            lastBridgeTime = block.timestamp;\\r\\n            lastEnzymeDepositTime = block.timestamp;\\r\\n            bridgedAssets += amount;\\r\\n\\r\\n            emit BridgeAssetsToL1(amount);\\r\\n        } else {\\r\\n            IPolygonZkEVMBridgeV2(bridge).bridgeMessage(\\r\\n                destinationNetwork,\\r\\n                destination,\\r\\n                true,\\r\\n                abi.encodePacked(amount)\\r\\n            );\\r\\n\\r\\n            lastBridgeTime = block.timestamp;\\r\\n            bridgedAssets -= amount;\\r\\n            pendingRequestedBridgingAssets += amount;\\r\\n\\r\\n            emit BridgeRequestMessageToL1(amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\r\\n    /*                      VIEW FUNCTIONS                        */\\r\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\r\\n\\r\\n    /// @inheritdoc IBridgingStrategy\\r\\n    function totalAssets() external view returns (uint) {\\r\\n        return IERC20(asset).balanceOf(address (this)) + bridgedAssets + pendingRequestedBridgingAssets;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IBridgingStrategy\\r\\n    function totalRequested() public view returns (uint) {\\r\\n        return IERC4626(_getVault()).convertToAssets(totalRequestedVaultSharesForClaim);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IBridgingStrategy\\r\\n    function needBridgingNow() public view returns (bool need, bool toL1, uint amount) {\\r\\n        uint bal = IERC20(asset).balanceOf(address(this)) + pendingRequestedBridgingAssets;\\r\\n        uint _totalRequested = totalRequested();\\r\\n\\r\\n        // todo add buffer\\r\\n        if (bal > _totalRequested) {\\r\\n            amount = bal - _totalRequested;\\r\\n            toL1 = true;\\r\\n\\r\\n            if (\\r\\n                amount >= SHUTTLE_FORCE_BRIDGE\\r\\n                || block.timestamp - lastBridgeTime >= MAX_WAIT_TIME_FOR_BRIDGING\\r\\n            ) {\\r\\n                need = true;\\r\\n            }\\r\\n        } else {\\r\\n            amount = _totalRequested - bal;\\r\\n            if (\\r\\n                amount > 0\\r\\n                && block.timestamp - lastEnzymeDepositTime >= ENZYME_VAULT_REDEEM_TIMELOCK\\r\\n                && (\\r\\n                    amount >= SHUTTLE_FORCE_CLAIM\\r\\n                    || block.timestamp - lastBridgeTime >= MAX_WAIT_TIME_FOR_BRIDGING\\r\\n                )\\r\\n            ) {\\r\\n                need = true;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\r\\n    /*                       INTERNAL LOGIC                       */\\r\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\r\\n\\r\\n    function _getVault() internal view returns (address) {\\r\\n        return ISwitcher(switcher).vault();\\r\\n    }\\r\\n\\r\\n    function _requireSwitcher() internal view {\\r\\n        if (msg.sender != switcher) {\\r\\n            revert OnlySwitcherCanDoThis();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _requireGovernance() internal view {\\r\\n        if (msg.sender != ISwitcher(switcher).governance()) {\\r\\n            revert OnlyGovernanceCanDoThis();\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xab5c374a43c039f6ed43c35588d5234f8c400a6c5a8cc77ffd0112e7f999b96e\",\"license\":\"MIT\"},\"contracts/interfaces/IBridgingStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Strategy for staking an asset on another network\\ninterface IBridgingStrategy {\\n    event Destination(address contractL1);\\n    event RequestAssets(address indexed owner, uint vaultSharesAmount);\\n    event BridgeAssetsToL1(uint amount);\\n    event BridgeRequestMessageToL1(uint amount);\\n\\n    /// @notice Underlying asset\\n    function asset() external view returns (address);\\n\\n    /// @notice Linked switcher that manage strategy of the vault\\n    function switcher() external view returns (address);\\n\\n    /// @notice Strategy contract on another network\\n    function destination() external view returns (address);\\n\\n    /// @notice Total amount of assets under strategy management\\n    function totalAssets() external view returns (uint);\\n\\n    /// @notice Amount of assets under strategy management on another network\\n    function bridgedAssets() external view returns (uint);\\n\\n    /// @notice Total requested assets for withdraw from another network\\n    function totalRequested() external view returns (uint);\\n\\n    /// @notice Assets in process of bridging\\n    function pendingRequestedBridgingAssets() external view returns (uint);\\n\\n    /// @notice Is ready to call bridge\\n    /// @return need Is need to call bridge now\\n    /// @return toL1 Need bridge assets to L1\\n    /// @return amount Amount of asset for bridging or request withdraw\\n    function needBridgingNow() external view returns (bool need, bool toL1, uint amount);\\n\\n    /// @notice Withdraws all assets under strategy management to the Switcher\\n    /// @dev Will only be executed if all assets have already been transferred to the current network\\n    function withdrawAllToSwitcher() external returns(uint amount);\\n\\n    /// @notice Withdraws assets to the Switcher\\n    function withdrawToSwitcher(uint amount) external;\\n\\n    /// @notice Bridge assets for staking on another network or request withdraw from it\\n    function callBridge() external;\\n\\n    /// @notice Send message to another network for claiming all invested assets\\n    /// Only Switcher can call it.\\n    function requestClaimAllAssets() external;\\n\\n    /// @notice Transfer vault shares from user and put claim request to shuttle\\n    /// Only vault shares owner can call it.\\n    function requestClaimAssets(uint vaultSharesAmount) external;\\n\\n    /// @notice Claim requested and bridged from another network assets\\n    function claimRequestedAssets(address[] calldata sharesHolders) external;\\n\\n}\\n\",\"keccak256\":\"0xec829836466feee073c4972f0926aae4efad7338dad9f1a6295a79abd5701d1d\",\"license\":\"MIT\"},\"contracts/interfaces/ISwitcher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.24;\\r\\n\\r\\ninterface ISwitcher {\\r\\n    event NewStrategy(address strategy);\\r\\n    event AnnouncedNewStrategy(address strategy);\\r\\n    event CancelAnnouncedStrategy(address strategy);\\r\\n    event PendingStrategy(address strategy);\\r\\n    event Invested(address indexed strategy, uint amount);\\r\\n    event WithdrawFromStrategy(address indexed strategy, uint amount);\\r\\n\\r\\n    error OnlyVaultCanDoThis();\\r\\n    error OnlyGovernanceCanDoThis();\\r\\n    error Already();\\r\\n    error NoNewStrategyAnnounced();\\r\\n    error Timelock();\\r\\n    error NotPending();\\r\\n    error AssetsHaveNotYetBeenBridged();\\r\\n    error StrategyIsNowSwitching();\\r\\n    error StrategyIsNotSwitchingNow();\\r\\n\\r\\n    /// @notice Underlying asset\\r\\n    function asset() external view returns (address);\\r\\n\\r\\n    /// @notice Linked vault\\r\\n    function vault() external view returns (address);\\r\\n\\r\\n    /// @notice Current active strategy\\r\\n    function strategy() external view returns (address);\\r\\n\\r\\n    /// @notice New strategy\\r\\n    function pendingStrategy() external view returns (address);\\r\\n\\r\\n    /// @notice Address that can manage strategies\\r\\n    function governance() external view returns (address);\\r\\n\\r\\n    /// @notice Total assets managed by Switcher\\r\\n    function totalAssets() external view returns (uint);\\r\\n\\r\\n//    function doHardWork() external;\\r\\n\\r\\n    /// @notice Invest all available assets to strategy\\r\\n    function investAll() external;\\r\\n\\r\\n    /// @notice Withdraws all underlying assets to the vault\\r\\n    function withdrawAllToVault() external;\\r\\n\\r\\n    /// @notice Withdraws underlying assets to the vault\\r\\n    function withdrawToVault(uint amount) external;\\r\\n\\r\\n    /// @notice First time setup method called by vault\\r\\n    function setup(address asset_) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x2416d7a19a9b6287e8e87c11c793f96e74804a2dfdd542da24f1cc308f5f67af\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.24;\\r\\n\\r\\ninterface IWETH9 {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function withdraw(uint wad) external;\\r\\n}\",\"keccak256\":\"0x1c89c0632e2c924f2b8b032cb3e0d91af4b47c28e4d5ddec8d9208fd24b1e5e5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b5060405162001a5c38038062001a5c8339810160408190526200003491620000f4565b6001600160a01b0383811660a081905290831660c0526000805463ffffffff191663ffffffff8416179055604080516338d52e0f60e01b815290516338d52e0f916004808201926020929091908290030181865afa1580156200009b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000c191906200014a565b6001600160a01b0316608052506200016f915050565b80516001600160a01b0381168114620000ef57600080fd5b919050565b6000806000606084860312156200010a57600080fd5b6200011584620000d7565b92506200012560208501620000d7565b9150604084015163ffffffff811681146200013f57600080fd5b809150509250925092565b6000602082840312156200015d57600080fd5b6200016882620000d7565b9392505050565b60805160a05160c05161183f6200021d6000396000818161058e0152818161101c0152818161121401526113230152600081816102060152818161055a01528181610a3401528181610f3a0152818161140a015281816114c1015261154c01526000818161017c015281816103ee015281816105ba015281816107f9015281816109a701528181610a6601528181610cfd01528181610e8e01528181610f69015261117c015261183f6000f3fe60806040526004361061015a5760003560e01c8063507477af116100c1578063936371ba1161007a578063936371ba146104d7578063a78a9b4a146104f7578063adde08001461050c578063b269681d14610521578063bc4462de14610548578063e1471ab914610449578063e78cea921461057c57600080fd5b8063507477af1461044957806357339c2914610460578063614e48f71461047557806374adad1d1461049557806382dce0b4146102fa578063880b678d146104c257600080fd5b80632bcf6ffd116101135780632bcf6ffd1461035857806330b8615c1461038a5780633707546e146103aa57806338d52e0f146103dc5780633ae4075b1461041d57806348865d7e1461043357600080fd5b806301e1d114146102b25780630a0a05e6146102da5780630c8996ce146102fa578063143d72811461031657806318780bcb1461032c57806327eb25101461034257600080fd5b366102ad5760025460055460ff161580156101755750600081115b156102ab577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156101d557600080fd5b505af11580156101e9573d6000803e3d6000fd5b5050505050803411158015610291575060006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663465fc5d26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610262573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028691906115a2565b6001600160a01b0316145b156102a5576102a034826115dc565b600255005b60006002555b005b600080fd5b3480156102be57600080fd5b506102c76105b0565b6040519081526020015b60405180910390f35b3480156102e657600080fd5b506102ab6102f53660046115f5565b61065e565b34801561030657600080fd5b506102c7678ac7230489e8000081565b34801561032257600080fd5b506102c760015481565b34801561033857600080fd5b506102c760045481565b34801561034e57600080fd5b506102c760025481565b34801561036457600080fd5b506000546103759063ffffffff1681565b60405163ffffffff90911681526020016102d1565b34801561039657600080fd5b506102ab6103a5366004611612565b6106f7565b3480156103b657600080fd5b506103bf6107ee565b6040805193151584529115156020840152908201526060016102d1565b3480156103e857600080fd5b506104107f000000000000000000000000000000000000000000000000000000000000000081565b6040516102d1919061162b565b34801561042957600080fd5b506102c760035481565b34801561043f57600080fd5b506102c760075481565b34801561045557600080fd5b506102c76201518081565b34801561046c57600080fd5b506102c7610955565b34801561048157600080fd5b506102ab61049036600461163f565b610ad9565b3480156104a157600080fd5b506102c76104b03660046115f5565b60066020526000908152604090205481565b3480156104ce57600080fd5b506102c7610df1565b3480156104e357600080fd5b506102ab6104f2366004611612565b610e6b565b34801561050357600080fd5b506102ab610fdb565b34801561051857600080fd5b506102ab6110ea565b34801561052d57600080fd5b5060005461041090600160201b90046001600160a01b031681565b34801561055457600080fd5b506104107f000000000000000000000000000000000000000000000000000000000000000081565b34801561058857600080fd5b506104107f000000000000000000000000000000000000000000000000000000000000000081565b60006002546001547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610604919061162b565b602060405180830381865afa158015610621573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064591906116b4565b61064f91906116cd565b61065991906116cd565b905090565b610666611408565b600054600160201b90046001600160a01b03161561069757604051633008ba1360e11b815260040160405180910390fd5b60008054640100000000600160c01b031916600160201b6001600160a01b038416021790556040517f1ee14f322e4fd8a87a4be8216285bc5d4701b95e7dfa4ab84bac65c4b9cc5ba5906106ec90839061162b565b60405180910390a150565b6106ff6114bd565b6040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b0391909116906323b872dd906064016020604051808303816000875af1158015610754573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077891906116e0565b5033600090815260066020526040812080548392906107989084906116cd565b9250508190555080600760008282546107b191906116cd565b909155505060405181815233907f6c704fb9d54f64b01bae7a4940ee85bb1a8cceabd6405c270fd9b19d49a310609060200160405180910390a250565b6000806000806002547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610843919061162b565b602060405180830381865afa158015610860573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088491906116b4565b61088e91906116cd565b9050600061089a610df1565b9050808211156108ea576108ae81836115dc565b925060019350678ac7230489e80000831015806108db575062015180600354426108d891906115dc565b10155b156108e557600194505b61094e565b6108f482826115dc565b92506000831180156109165750620151806004544261091391906115dc565b10155b80156109445750678ac7230489e80000831015806109445750620151806003544261094191906115dc565b10155b1561094e57600194505b5050909192565b600061095f611541565b6000600154118061097257506000600254115b1561099057604051638e0d838f60e01b815260040160405180910390fd5b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906109dc90309060040161162b565b602060405180830381865afa1580156109f9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1d91906116b4565b60405163a9059cbb60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390529192507f00000000000000000000000000000000000000000000000000000000000000009091169063a9059cbb906044016020604051808303816000875af1158015610ab1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad591906116e0565b5090565b806000610ae46114bd565b905060008267ffffffffffffffff811115610b0157610b01611702565b604051908082528060200260200182016040528015610b2a578160200160208202803683370190505b5090506000805b84811015610c7657600060066000898985818110610b5157610b51611718565b9050602002016020810190610b6691906115f5565b6001600160a01b03166001600160a01b0316815260200190815260200160002054905080600003610bdb57878783818110610ba357610ba3611718565b9050602002016020810190610bb891906115f5565b60405163683a2f7760e01b8152600401610bd2919061162b565b60405180910390fd5b60405163266d6a8360e11b8152600481018290526001600160a01b03861690634cdad50690602401602060405180830381865afa158015610c20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4491906116b4565b848381518110610c5657610c56611718565b6020908102919091010152610c6b81846116cd565b925050600101610b31565b50604051635d043b2960e11b815260048101829052306024820181905260448201526001600160a01b0384169063ba087652906064016020604051808303816000875af1158015610ccb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cef91906116b4565b5060005b84811015610de8577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb888884818110610d3c57610d3c611718565b9050602002016020810190610d5191906115f5565b858481518110610d6357610d63611718565b60200260200101516040518363ffffffff1660e01b8152600401610d9c9291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af1158015610dbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ddf91906116e0565b50600101610cf3565b50505050505050565b6000610dfb6114bd565b6001600160a01b03166307a2d13a6007546040518263ffffffff1660e01b8152600401610e2a91815260200190565b602060405180830381865afa158015610e47573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065991906116b4565b610e73611541565b6040516370a0823160e01b8152819081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610ec390309060040161162b565b602060405180830381865afa158015610ee0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0491906116b4565b1015610f2357604051634fa2deef60e01b815260040160405180910390fd5b60405163a9059cbb60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015610fb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd691906116e0565b505050565b610fe3611541565b6000546040805160001960208083018290528351808403909101815282840193849052630481fe6f60e31b909352926001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169363240ff378936110659363ffffffff811693600160201b9091041691600191604401611774565b600060405180830381600087803b15801561107f57600080fd5b505af1158015611093573d6000803e3d6000fd5b5050426003555050600154600280546000906110b09084906116cd565b909155505060006001556040518181527fa83462975c7595803f3c969e5f13a6c17afee5363e4e8473b25e70e3fea57b33906020016106ec565b600054600160201b90046001600160a01b031661111a576040516343971d5760e01b815260040160405180910390fd5b60008060006111276107ee565b9250925092508261114b576040516305c1739360e31b815260040160405180910390fd5b81156112ee576005805460ff19166001179055604051632e1a7d4d60e01b8152600481018290526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d90602401600060405180830381600087803b1580156111c057600080fd5b505af11580156111d4573d6000803e3d6000fd5b50506005805460ff191690555050600080546040805180820182526001808252600360fc1b6020830152915163cd58657960e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169563cd5865799588956112619563ffffffff831695600160201b909304909416938793926004016117b6565b6000604051808303818588803b15801561127a57600080fd5b505af115801561128e573d6000803e3d6000fd5b50504260038190556004555050600180548392506000906112b09084906116cd565b90915550506040518181527f019c36e19393857475613d5ff0cb896db2eac1812679d659490ca7471d3d3eee906020015b60405180910390a1505050565b6000546040805160208082018590528251808303909101815281830192839052630481fe6f60e31b9092526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169363240ff3789361136f9363ffffffff831693600160201b9093049092169160019190604401611774565b600060405180830381600087803b15801561138957600080fd5b505af115801561139d573d6000803e3d6000fd5b505050504260038190555080600160008282546113ba91906115dc565b9250508190555080600260008282546113d391906116cd565b90915550506040518181527fa83462975c7595803f3c969e5f13a6c17afee5363e4e8473b25e70e3fea57b33906020016112e1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635aa6e6756040518163ffffffff1660e01b8152600401602060405180830381865afa158015611466573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148a91906115a2565b6001600160a01b0316336001600160a01b0316146114bb576040516343c0578f60e11b815260040160405180910390fd5b565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561151d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065991906115a2565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146114bb57604051632ec57f6d60e11b815260040160405180910390fd5b6001600160a01b038116811461159f57600080fd5b50565b6000602082840312156115b457600080fd5b81516115bf8161158a565b9392505050565b634e487b7160e01b600052601160045260246000fd5b818103818111156115ef576115ef6115c6565b92915050565b60006020828403121561160757600080fd5b81356115bf8161158a565b60006020828403121561162457600080fd5b5035919050565b6001600160a01b0391909116815260200190565b6000806020838503121561165257600080fd5b823567ffffffffffffffff8082111561166a57600080fd5b818501915085601f83011261167e57600080fd5b81358181111561168d57600080fd5b8660208260051b85010111156116a257600080fd5b60209290920196919550909350505050565b6000602082840312156116c657600080fd5b5051919050565b808201808211156115ef576115ef6115c6565b6000602082840312156116f257600080fd5b815180151581146115bf57600080fd5b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b8181101561175457602081850181015186830182015201611738565b506000602082860101526020601f19601f83011685010191505092915050565b63ffffffff851681526001600160a01b038416602082015282151560408201526080606082018190526000906117ac9083018461172e565b9695505050505050565b63ffffffff871681526001600160a01b0386811660208301526040820186905284166060820152821515608082015260c060a082018190526000906117fd9083018461172e565b9897505050505050505056fea2646970667358221220d44a02351c798da8042f5ba57e055a4cc092dd9240537b94379cab04c9d269a664736f6c63430008180033",
  "deployedBytecode": "0x60806040526004361061015a5760003560e01c8063507477af116100c1578063936371ba1161007a578063936371ba146104d7578063a78a9b4a146104f7578063adde08001461050c578063b269681d14610521578063bc4462de14610548578063e1471ab914610449578063e78cea921461057c57600080fd5b8063507477af1461044957806357339c2914610460578063614e48f71461047557806374adad1d1461049557806382dce0b4146102fa578063880b678d146104c257600080fd5b80632bcf6ffd116101135780632bcf6ffd1461035857806330b8615c1461038a5780633707546e146103aa57806338d52e0f146103dc5780633ae4075b1461041d57806348865d7e1461043357600080fd5b806301e1d114146102b25780630a0a05e6146102da5780630c8996ce146102fa578063143d72811461031657806318780bcb1461032c57806327eb25101461034257600080fd5b366102ad5760025460055460ff161580156101755750600081115b156102ab577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156101d557600080fd5b505af11580156101e9573d6000803e3d6000fd5b5050505050803411158015610291575060006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663465fc5d26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610262573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028691906115a2565b6001600160a01b0316145b156102a5576102a034826115dc565b600255005b60006002555b005b600080fd5b3480156102be57600080fd5b506102c76105b0565b6040519081526020015b60405180910390f35b3480156102e657600080fd5b506102ab6102f53660046115f5565b61065e565b34801561030657600080fd5b506102c7678ac7230489e8000081565b34801561032257600080fd5b506102c760015481565b34801561033857600080fd5b506102c760045481565b34801561034e57600080fd5b506102c760025481565b34801561036457600080fd5b506000546103759063ffffffff1681565b60405163ffffffff90911681526020016102d1565b34801561039657600080fd5b506102ab6103a5366004611612565b6106f7565b3480156103b657600080fd5b506103bf6107ee565b6040805193151584529115156020840152908201526060016102d1565b3480156103e857600080fd5b506104107f000000000000000000000000000000000000000000000000000000000000000081565b6040516102d1919061162b565b34801561042957600080fd5b506102c760035481565b34801561043f57600080fd5b506102c760075481565b34801561045557600080fd5b506102c76201518081565b34801561046c57600080fd5b506102c7610955565b34801561048157600080fd5b506102ab61049036600461163f565b610ad9565b3480156104a157600080fd5b506102c76104b03660046115f5565b60066020526000908152604090205481565b3480156104ce57600080fd5b506102c7610df1565b3480156104e357600080fd5b506102ab6104f2366004611612565b610e6b565b34801561050357600080fd5b506102ab610fdb565b34801561051857600080fd5b506102ab6110ea565b34801561052d57600080fd5b5060005461041090600160201b90046001600160a01b031681565b34801561055457600080fd5b506104107f000000000000000000000000000000000000000000000000000000000000000081565b34801561058857600080fd5b506104107f000000000000000000000000000000000000000000000000000000000000000081565b60006002546001547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610604919061162b565b602060405180830381865afa158015610621573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064591906116b4565b61064f91906116cd565b61065991906116cd565b905090565b610666611408565b600054600160201b90046001600160a01b03161561069757604051633008ba1360e11b815260040160405180910390fd5b60008054640100000000600160c01b031916600160201b6001600160a01b038416021790556040517f1ee14f322e4fd8a87a4be8216285bc5d4701b95e7dfa4ab84bac65c4b9cc5ba5906106ec90839061162b565b60405180910390a150565b6106ff6114bd565b6040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b0391909116906323b872dd906064016020604051808303816000875af1158015610754573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077891906116e0565b5033600090815260066020526040812080548392906107989084906116cd565b9250508190555080600760008282546107b191906116cd565b909155505060405181815233907f6c704fb9d54f64b01bae7a4940ee85bb1a8cceabd6405c270fd9b19d49a310609060200160405180910390a250565b6000806000806002547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610843919061162b565b602060405180830381865afa158015610860573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088491906116b4565b61088e91906116cd565b9050600061089a610df1565b9050808211156108ea576108ae81836115dc565b925060019350678ac7230489e80000831015806108db575062015180600354426108d891906115dc565b10155b156108e557600194505b61094e565b6108f482826115dc565b92506000831180156109165750620151806004544261091391906115dc565b10155b80156109445750678ac7230489e80000831015806109445750620151806003544261094191906115dc565b10155b1561094e57600194505b5050909192565b600061095f611541565b6000600154118061097257506000600254115b1561099057604051638e0d838f60e01b815260040160405180910390fd5b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906109dc90309060040161162b565b602060405180830381865afa1580156109f9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1d91906116b4565b60405163a9059cbb60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390529192507f00000000000000000000000000000000000000000000000000000000000000009091169063a9059cbb906044016020604051808303816000875af1158015610ab1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad591906116e0565b5090565b806000610ae46114bd565b905060008267ffffffffffffffff811115610b0157610b01611702565b604051908082528060200260200182016040528015610b2a578160200160208202803683370190505b5090506000805b84811015610c7657600060066000898985818110610b5157610b51611718565b9050602002016020810190610b6691906115f5565b6001600160a01b03166001600160a01b0316815260200190815260200160002054905080600003610bdb57878783818110610ba357610ba3611718565b9050602002016020810190610bb891906115f5565b60405163683a2f7760e01b8152600401610bd2919061162b565b60405180910390fd5b60405163266d6a8360e11b8152600481018290526001600160a01b03861690634cdad50690602401602060405180830381865afa158015610c20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4491906116b4565b848381518110610c5657610c56611718565b6020908102919091010152610c6b81846116cd565b925050600101610b31565b50604051635d043b2960e11b815260048101829052306024820181905260448201526001600160a01b0384169063ba087652906064016020604051808303816000875af1158015610ccb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cef91906116b4565b5060005b84811015610de8577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb888884818110610d3c57610d3c611718565b9050602002016020810190610d5191906115f5565b858481518110610d6357610d63611718565b60200260200101516040518363ffffffff1660e01b8152600401610d9c9291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af1158015610dbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ddf91906116e0565b50600101610cf3565b50505050505050565b6000610dfb6114bd565b6001600160a01b03166307a2d13a6007546040518263ffffffff1660e01b8152600401610e2a91815260200190565b602060405180830381865afa158015610e47573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065991906116b4565b610e73611541565b6040516370a0823160e01b8152819081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190610ec390309060040161162b565b602060405180830381865afa158015610ee0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0491906116b4565b1015610f2357604051634fa2deef60e01b815260040160405180910390fd5b60405163a9059cbb60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015610fb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd691906116e0565b505050565b610fe3611541565b6000546040805160001960208083018290528351808403909101815282840193849052630481fe6f60e31b909352926001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169363240ff378936110659363ffffffff811693600160201b9091041691600191604401611774565b600060405180830381600087803b15801561107f57600080fd5b505af1158015611093573d6000803e3d6000fd5b5050426003555050600154600280546000906110b09084906116cd565b909155505060006001556040518181527fa83462975c7595803f3c969e5f13a6c17afee5363e4e8473b25e70e3fea57b33906020016106ec565b600054600160201b90046001600160a01b031661111a576040516343971d5760e01b815260040160405180910390fd5b60008060006111276107ee565b9250925092508261114b576040516305c1739360e31b815260040160405180910390fd5b81156112ee576005805460ff19166001179055604051632e1a7d4d60e01b8152600481018290526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d90602401600060405180830381600087803b1580156111c057600080fd5b505af11580156111d4573d6000803e3d6000fd5b50506005805460ff191690555050600080546040805180820182526001808252600360fc1b6020830152915163cd58657960e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169563cd5865799588956112619563ffffffff831695600160201b909304909416938793926004016117b6565b6000604051808303818588803b15801561127a57600080fd5b505af115801561128e573d6000803e3d6000fd5b50504260038190556004555050600180548392506000906112b09084906116cd565b90915550506040518181527f019c36e19393857475613d5ff0cb896db2eac1812679d659490ca7471d3d3eee906020015b60405180910390a1505050565b6000546040805160208082018590528251808303909101815281830192839052630481fe6f60e31b9092526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169363240ff3789361136f9363ffffffff831693600160201b9093049092169160019190604401611774565b600060405180830381600087803b15801561138957600080fd5b505af115801561139d573d6000803e3d6000fd5b505050504260038190555080600160008282546113ba91906115dc565b9250508190555080600260008282546113d391906116cd565b90915550506040518181527fa83462975c7595803f3c969e5f13a6c17afee5363e4e8473b25e70e3fea57b33906020016112e1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635aa6e6756040518163ffffffff1660e01b8152600401602060405180830381865afa158015611466573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148a91906115a2565b6001600160a01b0316336001600160a01b0316146114bb576040516343c0578f60e11b815260040160405180910390fd5b565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561151d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065991906115a2565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146114bb57604051632ec57f6d60e11b815260040160405180910390fd5b6001600160a01b038116811461159f57600080fd5b50565b6000602082840312156115b457600080fd5b81516115bf8161158a565b9392505050565b634e487b7160e01b600052601160045260246000fd5b818103818111156115ef576115ef6115c6565b92915050565b60006020828403121561160757600080fd5b81356115bf8161158a565b60006020828403121561162457600080fd5b5035919050565b6001600160a01b0391909116815260200190565b6000806020838503121561165257600080fd5b823567ffffffffffffffff8082111561166a57600080fd5b818501915085601f83011261167e57600080fd5b81358181111561168d57600080fd5b8660208260051b85010111156116a257600080fd5b60209290920196919550909350505050565b6000602082840312156116c657600080fd5b5051919050565b808201808211156115ef576115ef6115c6565b6000602082840312156116f257600080fd5b815180151581146115bf57600080fd5b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b8181101561175457602081850181015186830182015201611738565b506000602082860101526020601f19601f83011685010191505092915050565b63ffffffff851681526001600160a01b038416602082015282151560408201526080606082018190526000906117ac9083018461172e565b9695505050505050565b63ffffffff871681526001600160a01b0386811660208301526040820186905284166060820152821515608082015260c060a082018190526000906117fd9083018461172e565b9897505050505050505056fea2646970667358221220d44a02351c798da8042f5ba57e055a4cc092dd9240537b94379cab04c9d269a664736f6c63430008180033",
  "devdoc": {
    "author": "a17",
    "kind": "dev",
    "methods": {
      "needBridgingNow()": {
        "returns": {
          "amount": "Amount of asset for bridging or request withdraw",
          "need": "Is need to call bridge now",
          "toL1": "Need bridge assets to L1"
        }
      },
      "withdrawAllToSwitcher()": {
        "details": "Will only be executed if all assets have already been transferred to the current network"
      }
    },
    "stateVariables": {
      "bridge": {
        "details": "LxLy bridge endpoint"
      }
    },
    "title": "ETH bridged staking",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "asset()": {
        "notice": "Underlying asset"
      },
      "bridgedAssets()": {
        "notice": "Amount of assets under strategy management on another network"
      },
      "callBridge()": {
        "notice": "Bridge assets for staking on another network or request withdraw from it"
      },
      "claimRequestedAssets(address[])": {
        "notice": "Claim requested and bridged from another network assets"
      },
      "destination()": {
        "notice": "Strategy contract on another network"
      },
      "needBridgingNow()": {
        "notice": "Is ready to call bridge"
      },
      "pendingRequestedBridgingAssets()": {
        "notice": "Assets in process of bridging"
      },
      "requestClaimAllAssets()": {
        "notice": "Send message to another network for claiming all invested assets Only Switcher can call it."
      },
      "requestClaimAssets(uint256)": {
        "notice": "Transfer vault shares from user and put claim request to shuttle Only vault shares owner can call it."
      },
      "switcher()": {
        "notice": "Linked switcher that manage strategy of the vault"
      },
      "totalAssets()": {
        "notice": "Total amount of assets under strategy management"
      },
      "totalRequested()": {
        "notice": "Total requested assets for withdraw from another network"
      },
      "withdrawAllToSwitcher()": {
        "notice": "Withdraws all assets under strategy management to the Switcher"
      },
      "withdrawToSwitcher(uint256)": {
        "notice": "Withdraws assets to the Switcher"
      }
    },
    "notice": "Bridging assets and messages between zkEVM and Ethereum via LxLy bridge",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4967,
        "contract": "contracts/BridgedStakingStrategy.sol:BridgedStakingStrategy",
        "label": "destinationNetwork",
        "offset": 0,
        "slot": "0",
        "type": "t_uint32"
      },
      {
        "astId": 4970,
        "contract": "contracts/BridgedStakingStrategy.sol:BridgedStakingStrategy",
        "label": "destination",
        "offset": 4,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4976,
        "contract": "contracts/BridgedStakingStrategy.sol:BridgedStakingStrategy",
        "label": "bridgedAssets",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4979,
        "contract": "contracts/BridgedStakingStrategy.sol:BridgedStakingStrategy",
        "label": "pendingRequestedBridgingAssets",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 4981,
        "contract": "contracts/BridgedStakingStrategy.sol:BridgedStakingStrategy",
        "label": "lastBridgeTime",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4983,
        "contract": "contracts/BridgedStakingStrategy.sol:BridgedStakingStrategy",
        "label": "lastEnzymeDepositTime",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 4985,
        "contract": "contracts/BridgedStakingStrategy.sol:BridgedStakingStrategy",
        "label": "_isWethWithdrawing",
        "offset": 0,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 4989,
        "contract": "contracts/BridgedStakingStrategy.sol:BridgedStakingStrategy",
        "label": "requests",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4991,
        "contract": "contracts/BridgedStakingStrategy.sol:BridgedStakingStrategy",
        "label": "totalRequestedVaultSharesForClaim",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}