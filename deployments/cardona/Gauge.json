{
  "address": "0xE0D142466d1BF88FE23D5D265d76068077E4D6F0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "defaultRewardToken_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "duration_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "governance_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BalanceDecreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BalanceIncreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "reward",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recepient",
          "type": "address"
        }
      ],
      "name": "ClaimRewards",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "reward",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NotifyReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "StakingToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "full",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "veId",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultRewardToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "derivedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "derivedBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "derivedSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "duration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAllRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "handleBalanceChange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isRewardToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        }
      ],
      "name": "lastTimeRewardApplicable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        }
      ],
      "name": "left",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "notifyRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "periodFinish",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        }
      ],
      "name": "registerRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        }
      ],
      "name": "removeRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        }
      ],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardPerTokenStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardTokensLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardsRedirect",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "setRewardsRedirect",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingToken_",
          "type": "address"
        }
      ],
      "name": "setStakingToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRewardPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x079af24e53405672ef7e9ede92da0f9df6fe8a4ff05fdc408def022d5a5f11a8",
  "receipt": {
    "to": null,
    "from": "0x3d0c177E035C30bb8681e5859EB98d114b48b935",
    "contractAddress": "0xE0D142466d1BF88FE23D5D265d76068077E4D6F0",
    "transactionIndex": 0,
    "gasUsed": "1675815",
    "logsBloom": "0x
    "blockHash": "0xb2c54c942100fb27d99d6b1d71d384698f793156bc850dd48f0eb89e3ea640c7",
    "transactionHash": "0x079af24e53405672ef7e9ede92da0f9df6fe8a4ff05fdc408def022d5a5f11a8",
    "logs": [],
    "blockNumber": 1931406,
    "cumulativeGasUsed": "1675815",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE3f1d1B8ea9721FF0399cF6c2990A4bE5e4fc023",
    "604800",
    "0x3d0c177E035C30bb8681e5859EB98d114b48b935"
  ],
  "numDeployments": 1,
  "solcInputHash": "cd9d925b63ac700938c46a08eefd7125",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"defaultRewardToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"duration_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BalanceDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BalanceIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recepient\",\"type\":\"address\"}],\"name\":\"ClaimRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NotifyReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"StakingToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"full\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"veId\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultRewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"derivedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"derivedBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"derivedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAllRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"handleBalanceChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRewardToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"left\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"registerRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"removeRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokensLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardsRedirect\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"setRewardsRedirect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingToken_\",\"type\":\"address\"}],\"name\":\"setStakingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"belbixa17\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"derivedBalance(address)\":{\"details\":\"Balance of holder adjusted with specific rules for boost calculation.      Supposed to be implemented in a parent contract      Adjust user balance with some logic, like boost logic.\"},\"earned(address,address)\":{\"details\":\"Approximate of earned rewards ready to claim\"},\"handleBalanceChange(address)\":{\"details\":\"Must be called from stakingToken when user balance changed.\"},\"lastTimeRewardApplicable(address)\":{\"details\":\"Returns the last time the reward was modified or periodFinish if the reward has ended\"},\"left(address)\":{\"details\":\"Amount of reward tokens left for the current period\"},\"registerRewardToken(address)\":{\"details\":\"Whitelist reward token for staking token. Only operator can do it.\"},\"removeRewardToken(address)\":{\"details\":\"Remove from whitelist reward token for staking token. Only operator can do it.      We assume that the first token can not be removed.\"},\"rewardPerToken(address)\":{\"details\":\"Reward paid for token for the current period.\"},\"rewardTokensLength()\":{\"details\":\"Length of rewards tokens array for given token\"},\"setRewardsRedirect(address,address)\":{\"details\":\"Account or governance can setup a redirect of all rewards.      It needs for 3rd party contracts integrations.\"}},\"title\":\"Stakeless pool for vaults\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"rewardsRedirect(address)\":{\"notice\":\"account => recipient. All rewards for this account will receive recipient\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Gauge.sol\":\"Gauge\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":150},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/Gauge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.24;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./StakelessPoolBase.sol\\\";\\r\\nimport \\\"./interfaces/IGauge.sol\\\";\\r\\n\\r\\n/// @title Stakeless pool for vaults\\r\\n/// @author belbix\\r\\n/// @author a17\\r\\ncontract Gauge is StakelessPoolBase {\\r\\n    // *************************************************************\\r\\n    //                        VARIABLES\\r\\n    // *************************************************************\\r\\n\\r\\n    address public stakingToken;\\r\\n\\r\\n    // *************************************************************\\r\\n    //                        EVENTS\\r\\n    // *************************************************************\\r\\n\\r\\n    event StakingToken(address token);\\r\\n    event Deposit(address indexed account, uint amount);\\r\\n    event Withdraw(address indexed account, uint amount, bool full, uint veId);\\r\\n\\r\\n    // *************************************************************\\r\\n    //                        INIT\\r\\n    // *************************************************************\\r\\n\\r\\n    constructor(\\r\\n        address defaultRewardToken_,\\r\\n        uint duration_,\\r\\n        address governance_\\r\\n    ) StakelessPoolBase(defaultRewardToken_, duration_, governance_) {}\\r\\n\\r\\n    function setStakingToken(address stakingToken_) external {\\r\\n        require (stakingToken == address(0), \\\"Already\\\");\\r\\n        stakingToken = stakingToken_;\\r\\n        emit StakingToken(stakingToken_);\\r\\n    }\\r\\n\\r\\n    // *************************************************************\\r\\n    //                        CLAIMS\\r\\n    // *************************************************************\\r\\n\\r\\n    function getReward(address account, address[] memory tokens) external {\\r\\n        _getReward(account, tokens);\\r\\n    }\\r\\n\\r\\n    function getAllRewards(address account) external {\\r\\n        _getAllRewards(account);\\r\\n    }\\r\\n\\r\\n    function _getAllRewards(address account) internal {\\r\\n        address[] storage rts = rewardTokens;\\r\\n        uint length = rts.length;\\r\\n        address[] memory tokens = new address[](length + 1);\\r\\n        for (uint i; i < length; ++i) {\\r\\n            tokens[i] = rts[i];\\r\\n        }\\r\\n        tokens[length] = defaultRewardToken;\\r\\n        _getReward(account, tokens);\\r\\n    }\\r\\n\\r\\n    function _getReward(address account, address[] memory tokens) internal {\\r\\n        _getReward(account, tokens, account);\\r\\n    }\\r\\n\\r\\n    // *************************************************************\\r\\n    //                   VIRTUAL DEPOSIT/WITHDRAW\\r\\n    // *************************************************************\\r\\n\\r\\n    /// @dev Must be called from stakingToken when user balance changed.\\r\\n    function handleBalanceChange(address account) external {\\r\\n        address _stakingToken = msg.sender;\\r\\n        require(stakingToken == _stakingToken, \\\"Wrong staking token\\\");\\r\\n\\r\\n        uint stakedBalance = balanceOf[account];\\r\\n        uint actualBalance = IERC20(_stakingToken).balanceOf(account);\\r\\n        if (stakedBalance < actualBalance) {\\r\\n            _deposit(account, actualBalance - stakedBalance);\\r\\n        } else if (stakedBalance > actualBalance) {\\r\\n            _withdraw(account, stakedBalance - actualBalance, actualBalance == 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _deposit(\\r\\n        address account,\\r\\n        uint amount\\r\\n    ) internal {\\r\\n        _registerBalanceIncreasing(account, amount);\\r\\n        emit Deposit(account, amount);\\r\\n    }\\r\\n\\r\\n    function _withdraw(\\r\\n        address account,\\r\\n        uint amount,\\r\\n        bool fullWithdraw\\r\\n    ) internal {\\r\\n        _registerBalanceDecreasing(account, amount);\\r\\n        emit Withdraw(\\r\\n            account,\\r\\n            amount,\\r\\n            fullWithdraw,\\r\\n            0\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // *************************************************************\\r\\n    //                   REWARDS DISTRIBUTION\\r\\n    // *************************************************************\\r\\n\\r\\n    function notifyRewardAmount(address token, uint amount) external nonReentrant {\\r\\n        _notifyRewardAmount(token, amount, true);\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xb731f724fbeaeaeaec302152764518f30a97c665d32c89bce5698da7327648ef\",\"license\":\"MIT\"},\"contracts/StakelessPoolBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.24;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./interfaces/IGauge.sol\\\";\\r\\n\\r\\n/// @title Simplified abstract stakeless pool for multiple rewards\\r\\n/// @author belbix\\r\\n/// @author a17\\r\\nabstract contract StakelessPoolBase is IGauge, ReentrancyGuard {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // *************************************************************\\r\\n    //                        CONSTANTS\\r\\n    // *************************************************************\\r\\n\\r\\n    /// @dev Precision for internal calculations\\r\\n    uint internal constant _PRECISION = 10 ** 27;\\r\\n\\r\\n    // *************************************************************\\r\\n    //                        VARIABLES\\r\\n    // *************************************************************\\r\\n\\r\\n    address public governance;\\r\\n\\r\\n    /// @dev Rewards are released over this period\\r\\n    uint public duration;\\r\\n\\r\\n    /// @dev This token will be always allowed as reward\\r\\n    address public defaultRewardToken;\\r\\n\\r\\n    /// @dev Supply adjusted on derived balance logic. Use for rewards boost.\\r\\n    uint public derivedSupply;\\r\\n\\r\\n    /// @dev Account => Staking token virtual balance. Can be adjusted regarding rewards boost logic.\\r\\n    mapping(address => uint) public derivedBalances;\\r\\n\\r\\n    /// @dev Account => User virtual balance of staking token.\\r\\n    mapping(address => uint) public balanceOf;\\r\\n\\r\\n    /// @dev Total amount of attached staking tokens\\r\\n    uint public totalSupply;\\r\\n\\r\\n    /// @dev Reward token => Reward rate with precision _PRECISION\\r\\n    mapping(address => uint) public rewardRate;\\r\\n\\r\\n    /// @dev Reward token => Reward finish period in timestamp.\\r\\n    mapping(address => uint) public periodFinish;\\r\\n\\r\\n    /// @dev Reward token => Last updated time for reward token for internal calculations.\\r\\n    mapping(address => uint) public lastUpdateTime;\\r\\n\\r\\n    /// @dev Reward token => Part of SNX pool logic. Internal snapshot of reward per token value.\\r\\n    mapping(address => uint) public rewardPerTokenStored;\\r\\n\\r\\n    /// @dev Reward token => Account => amount. Already paid reward amount for snapshot calculation.\\r\\n    mapping(address => mapping(address => uint)) public userRewardPerTokenPaid;\\r\\n\\r\\n    /// @dev Reward token => Account => amount. Snapshot of user's reward per token.\\r\\n    mapping(address => mapping(address => uint)) public rewards;\\r\\n\\r\\n    /// @dev Allowed reward tokens for staking token\\r\\n    address[] public rewardTokens;\\r\\n\\r\\n    /// @dev Allowed reward tokens for staking token stored in map for fast check.\\r\\n    mapping(address => bool) public isRewardToken;\\r\\n\\r\\n    /// @notice account => recipient. All rewards for this account will receive recipient\\r\\n    mapping(address => address) public rewardsRedirect;\\r\\n\\r\\n    // *************************************************************\\r\\n    //                        EVENTS\\r\\n    // *************************************************************\\r\\n\\r\\n    event BalanceIncreased(address indexed account, uint amount);\\r\\n    event BalanceDecreased(address indexed account, uint amount);\\r\\n    event NotifyReward(address indexed from, address indexed reward, uint amount);\\r\\n    event ClaimRewards(address indexed account, address indexed reward, uint amount, address recepient);\\r\\n\\r\\n    // *************************************************************\\r\\n    //                        INIT\\r\\n    // *************************************************************\\r\\n\\r\\n    constructor(address defaultRewardToken_, uint duration_, address governance_) {\\r\\n        defaultRewardToken = defaultRewardToken_;\\r\\n        duration = duration_;\\r\\n        governance = governance_;\\r\\n    }\\r\\n\\r\\n    // *************************************************************\\r\\n    //                        RESTRICTIONS\\r\\n    // *************************************************************\\r\\n\\r\\n    modifier onlyAllowedContracts() {\\r\\n        _requireGov();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // *************************************************************\\r\\n    //                            VIEWS\\r\\n    // *************************************************************\\r\\n\\r\\n    /// @dev Length of rewards tokens array for given token\\r\\n    function rewardTokensLength() external view returns (uint) {\\r\\n        return rewardTokens.length;\\r\\n    }\\r\\n\\r\\n    /// @dev Reward paid for token for the current period.\\r\\n    function rewardPerToken(address rewardToken) public view returns (uint) {\\r\\n        uint _derivedSupply = derivedSupply;\\r\\n        if (_derivedSupply == 0) {\\r\\n            return rewardPerTokenStored[rewardToken];\\r\\n        }\\r\\n\\r\\n        return rewardPerTokenStored[rewardToken]\\r\\n            +\\r\\n            (lastTimeRewardApplicable(rewardToken) - lastUpdateTime[rewardToken])\\r\\n            * rewardRate[rewardToken]\\r\\n            / _derivedSupply;\\r\\n    }\\r\\n\\r\\n    /// @dev Returns the last time the reward was modified or periodFinish if the reward has ended\\r\\n    function lastTimeRewardApplicable(address rewardToken) public view returns (uint) {\\r\\n        uint _periodFinish = periodFinish[rewardToken];\\r\\n        return block.timestamp < _periodFinish ? block.timestamp : _periodFinish;\\r\\n    }\\r\\n\\r\\n    /// @dev Balance of holder adjusted with specific rules for boost calculation.\\r\\n    ///      Supposed to be implemented in a parent contract\\r\\n    ///      Adjust user balance with some logic, like boost logic.\\r\\n    function derivedBalance(address account) public view virtual returns (uint) {\\r\\n        return balanceOf[account];\\r\\n    }\\r\\n\\r\\n    /// @dev Amount of reward tokens left for the current period\\r\\n    function left(address rewardToken) public view returns (uint) {\\r\\n        uint _periodFinish = periodFinish[rewardToken];\\r\\n        if (block.timestamp >= _periodFinish) return 0;\\r\\n        uint _remaining = _periodFinish - block.timestamp;\\r\\n        return _remaining * rewardRate[rewardToken] / _PRECISION;\\r\\n    }\\r\\n\\r\\n    /// @dev Approximate of earned rewards ready to claim\\r\\n    function earned(address rewardToken, address account) public view returns (uint) {\\r\\n        return derivedBalance(account)\\r\\n        * (rewardPerToken(rewardToken) - userRewardPerTokenPaid[rewardToken][account])\\r\\n        / _PRECISION\\r\\n            + rewards[rewardToken][account];\\r\\n    }\\r\\n\\r\\n    // *************************************************************\\r\\n    //                  OPERATOR ACTIONS\\r\\n    // *************************************************************\\r\\n\\r\\n    /// @dev Whitelist reward token for staking token. Only operator can do it.\\r\\n    function registerRewardToken(address rewardToken) external onlyAllowedContracts {\\r\\n        require(!isRewardToken[rewardToken], \\\"Already registered\\\");\\r\\n        isRewardToken[rewardToken] = true;\\r\\n        rewardTokens.push(rewardToken);\\r\\n    }\\r\\n\\r\\n    /// @dev Remove from whitelist reward token for staking token. Only operator can do it.\\r\\n    ///      We assume that the first token can not be removed.\\r\\n    function removeRewardToken(address rewardToken) external onlyAllowedContracts {\\r\\n        require(periodFinish[rewardToken] < block.timestamp, \\\"Rewards not ended\\\");\\r\\n        require(isRewardToken[rewardToken], \\\"Not reward token\\\");\\r\\n\\r\\n        isRewardToken[rewardToken] = false;\\r\\n        uint length = rewardTokens.length;\\r\\n        uint i = 0;\\r\\n        for (; i < length; i++) {\\r\\n            address t = rewardTokens[i];\\r\\n            if (t == rewardToken) {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        // if isRewardToken map and rewardTokens array changed accordingly the token always exist\\r\\n        rewardTokens[i] = rewardTokens[length - 1];\\r\\n        rewardTokens.pop();\\r\\n    }\\r\\n\\r\\n    /// @dev Account or governance can setup a redirect of all rewards.\\r\\n    ///      It needs for 3rd party contracts integrations.\\r\\n    function setRewardsRedirect(address account, address recipient) external {\\r\\n        require(msg.sender == account || msg.sender == governance, \\\"Not allowed\\\");\\r\\n        rewardsRedirect[account] = recipient;\\r\\n    }\\r\\n\\r\\n    // *************************************************************\\r\\n    //                      BALANCE\\r\\n    // *************************************************************\\r\\n\\r\\n    /// @dev Assume to be called when linked token balance changes.\\r\\n    function _registerBalanceIncreasing(\\r\\n        address account,\\r\\n        uint amount\\r\\n    ) internal virtual nonReentrant {\\r\\n        require(amount > 0, \\\"Zero amount\\\");\\r\\n\\r\\n        _increaseBalance(account, amount);\\r\\n        emit BalanceIncreased(account, amount);\\r\\n    }\\r\\n\\r\\n    function _increaseBalance(\\r\\n        address account,\\r\\n        uint amount\\r\\n    ) internal virtual {\\r\\n        _updateRewardForAllTokens(account);\\r\\n        totalSupply += amount;\\r\\n        balanceOf[account] += amount;\\r\\n        _updateDerivedBalance(account);\\r\\n    }\\r\\n\\r\\n    /// @dev Assume to be called when linked token balance changes.\\r\\n    function _registerBalanceDecreasing(\\r\\n        address account,\\r\\n        uint amount\\r\\n    ) internal nonReentrant virtual {\\r\\n        _decreaseBalance(account, amount);\\r\\n        emit BalanceDecreased(account, amount);\\r\\n    }\\r\\n\\r\\n    function _decreaseBalance(\\r\\n        address account,\\r\\n        uint amount\\r\\n    ) internal virtual {\\r\\n        _updateRewardForAllTokens(account);\\r\\n        totalSupply -= amount;\\r\\n        balanceOf[account] -= amount;\\r\\n        _updateDerivedBalance(account);\\r\\n    }\\r\\n\\r\\n    function _updateDerivedBalance(address account) internal {\\r\\n        uint __derivedBalance = derivedBalances[account];\\r\\n        derivedSupply -= __derivedBalance;\\r\\n        __derivedBalance = derivedBalance(account);\\r\\n        derivedBalances[account] = __derivedBalance;\\r\\n        derivedSupply += __derivedBalance;\\r\\n    }\\r\\n\\r\\n    // *************************************************************\\r\\n    //                          CLAIM\\r\\n    // *************************************************************\\r\\n\\r\\n    /// @dev Caller should implement restriction checks\\r\\n    function _getReward(\\r\\n        address account,\\r\\n        address[] memory rewardTokens_,\\r\\n        address recipient\\r\\n    ) internal nonReentrant virtual {\\r\\n        address newRecipient = rewardsRedirect[recipient];\\r\\n        if (newRecipient != address(0)) {\\r\\n            recipient = newRecipient;\\r\\n        }\\r\\n        require(recipient == msg.sender, \\\"Not allowed\\\");\\r\\n\\r\\n        _updateDerivedBalance(account);\\r\\n\\r\\n        uint len = rewardTokens_.length;\\r\\n\\r\\n        for (uint i; i < len; ++i) {\\r\\n            address rewardToken = rewardTokens_[i];\\r\\n            _updateReward(rewardToken, account);\\r\\n\\r\\n            uint _reward = rewards[rewardToken][account];\\r\\n            if (_reward > 0) {\\r\\n                rewards[rewardToken][account] = 0;\\r\\n                IERC20(rewardToken).safeTransfer(recipient, _reward);\\r\\n            }\\r\\n\\r\\n            emit ClaimRewards(account, rewardToken, _reward, recipient);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // *************************************************************\\r\\n    //                    REWARDS CALCULATIONS\\r\\n    // *************************************************************\\r\\n\\r\\n    function _updateRewardForAllTokens(address account) internal {\\r\\n        address[] memory rts = rewardTokens;\\r\\n        uint length = rts.length;\\r\\n        for (uint i; i < length; ++i) {\\r\\n            _updateReward(rts[i], account);\\r\\n        }\\r\\n        _updateReward(defaultRewardToken, account);\\r\\n    }\\r\\n\\r\\n    function _updateReward(address rewardToken, address account) internal {\\r\\n        uint _rewardPerTokenStored = rewardPerToken(rewardToken);\\r\\n        rewardPerTokenStored[rewardToken] = _rewardPerTokenStored;\\r\\n        lastUpdateTime[rewardToken] = lastTimeRewardApplicable(rewardToken);\\r\\n        if (account != address(0)) {\\r\\n            rewards[rewardToken][account] = earned(rewardToken, account);\\r\\n            userRewardPerTokenPaid[rewardToken][account] = _rewardPerTokenStored;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // *************************************************************\\r\\n    //                         NOTIFY\\r\\n    // *************************************************************\\r\\n\\r\\n    function _notifyRewardAmount(\\r\\n        address rewardToken,\\r\\n        uint amount,\\r\\n        bool transferRewards\\r\\n    ) internal virtual {\\r\\n        require(amount > 0, \\\"Zero amount\\\");\\r\\n        require(defaultRewardToken == rewardToken || isRewardToken[rewardToken], \\\"Token not allowed\\\");\\r\\n\\r\\n        _updateReward(rewardToken, address(0));\\r\\n        uint _duration = duration;\\r\\n\\r\\n        if (transferRewards) {\\r\\n            uint balanceBefore = IERC20(rewardToken).balanceOf(address(this));\\r\\n            IERC20(rewardToken).safeTransferFrom(msg.sender, address(this), amount);\\r\\n            // refresh amount if token was taxable\\r\\n            amount = IERC20(rewardToken).balanceOf(address(this)) - balanceBefore;\\r\\n        }\\r\\n        // if transferRewards=false need to wisely use it in implementation!\\r\\n\\r\\n        if (block.timestamp >= periodFinish[rewardToken]) {\\r\\n            rewardRate[rewardToken] = amount * _PRECISION / _duration;\\r\\n        } else {\\r\\n            uint _remaining = periodFinish[rewardToken] - block.timestamp;\\r\\n            uint _left = _remaining * rewardRate[rewardToken];\\r\\n            // rewards should not extend period infinity, only higher amount allowed\\r\\n            require(amount > _left / _PRECISION, \\\"Amount should be higher than remaining rewards\\\");\\r\\n            rewardRate[rewardToken] = (amount * _PRECISION + _left) / _duration;\\r\\n        }\\r\\n\\r\\n        lastUpdateTime[rewardToken] = block.timestamp;\\r\\n        periodFinish[rewardToken] = block.timestamp + _duration;\\r\\n        emit NotifyReward(msg.sender, rewardToken, amount);\\r\\n    }\\r\\n\\r\\n    // *************************************************************\\r\\n    //                         ACCESS\\r\\n    // *************************************************************\\r\\n\\r\\n    function _requireGov() internal view {\\r\\n        require (msg.sender == governance, \\\"Not allowed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x94d1e6204939133c7254867431365ccd3e1bbdfd7be6e978f611eeaa69753a25\",\"license\":\"MIT\"},\"contracts/interfaces/IGauge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.24;\\r\\n\\r\\ninterface IGauge {\\r\\n\\r\\n    function duration() external view returns (uint);\\r\\n\\r\\n    function left(address rewardToken) external view returns (uint);\\r\\n\\r\\n    function getReward(address account, address[] memory tokens) external;\\r\\n\\r\\n    function getAllRewards(address account) external;\\r\\n\\r\\n    function handleBalanceChange(address account) external;\\r\\n\\r\\n    function notifyRewardAmount(address token, uint amount) external;\\r\\n\\r\\n    function setStakingToken(address stakingToken_) external;\\r\\n}\",\"keccak256\":\"0x2a74ed910be4ed9efa074cb61c388df89d89159ab16d7da6938c29c626b45944\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101d55760003560e01c806372f702f31161010f578063d35e2544116100a2578063e70b9e2711610071578063e70b9e2714610486578063f1229777146104b1578063f2c2c2c9146104c4578063ff3a4ac0146104d757600080fd5b8063d35e254414610421578063d7da4bb01461044a578063da09d19d14610453578063e46dbc981461047357600080fd5b8063ab674e0c116100de578063ab674e0c146103aa578063b5fd73f8146103d3578063b66503cf14610406578063bf199e621461041957600080fd5b806372f702f3146103515780637bb7bed11461036457806399bcc052146103775780639ce43f901461038a57600080fd5b80633609582a11610187578063638634ee11610156578063638634ee146102d357806363fb415b146102e65780637035ab981461030657806370a082311461033157600080fd5b80633609582a1461027a578063362a3fad1461028d5780633d509c97146102a05780635aa6e675146102b357600080fd5b80630fb5a6b4146101da57806318160ddd146101f65780631e9b12ef146101ff578063211dc32d14610214578063221ca18c146102275780632ce9aead1461024757806331279d3d14610267575b600080fd5b6101e360025481565b6040519081526020015b60405180910390f35b6101e360075481565b61021261020d3660046118b3565b6104ea565b005b6101e36102223660046118ce565b610588565b6101e36102353660046118b3565b60086020526000908152604090205481565b6101e36102553660046118b3565b600a6020526000908152604090205481565b610212610275366004611917565b610625565b6102126102883660046118ce565b610633565b61021261029b3660046118b3565b61069e565b6102126102ae3660046118b3565b6106aa565b6001546102c6906001600160a01b031681565b6040516101ed91906119ef565b6101e36102e13660046118b3565b610889565b6101e36102f43660046118b3565b60056020526000908152604090205481565b6101e36103143660046118ce565b600c60209081526000928352604080842090915290825290205481565b6101e361033f3660046118b3565b60066020526000908152604090205481565b6011546102c6906001600160a01b031681565b6102c6610372366004611a03565b6108b8565b6101e36103853660046118b3565b6108e2565b6101e36103983660046118b3565b600b6020526000908152604090205481565b6102c66103b83660046118b3565b6010602052600090815260409020546001600160a01b031681565b6103f66103e13660046118b3565b600f6020526000908152604090205460ff1681565b60405190151581526020016101ed565b610212610414366004611a1c565b61095c565b600e546101e3565b6101e361042f3660046118b3565b6001600160a01b031660009081526006602052604090205490565b6101e360045481565b6101e36104613660046118b3565b60096020526000908152604090205481565b6102126104813660046118b3565b61097a565b6101e36104943660046118ce565b600d60209081526000928352604080842090915290825290205481565b6101e36104bf3660046118b3565b610a46565b6102126104d23660046118b3565b610ae2565b6003546102c6906001600160a01b031681565b6011546001600160a01b0316156105325760405162461bcd60e51b8152602060048201526007602482015266416c726561647960c81b60448201526064015b60405180910390fd5b601180546001600160a01b0319166001600160a01b0383161790556040517f5f5e0071dcc5d8cc90b2c64a928a612c95681d34f6b87b46d6e775d1f074e7e59061057d9083906119ef565b60405180910390a150565b6001600160a01b038083166000818152600d6020908152604080832094861680845294825280832054938352600c825280832094835293905291822054676765c793fa10079d601b1b906105db86610a46565b6105e59190611a5c565b6001600160a01b0385166000908152600660205260409020546106089190611a6f565b6106129190611a86565b61061c9190611aa8565b90505b92915050565b61062f8282610bfa565b5050565b336001600160a01b038316148061065457506001546001600160a01b031633145b6106705760405162461bcd60e51b815260040161052990611abb565b6001600160a01b03918216600090815260106020526040902080546001600160a01b03191691909216179055565b6106a781610c05565b50565b6106b2610d15565b6001600160a01b038116600090815260096020526040902054421161070d5760405162461bcd60e51b815260206004820152601160248201527014995dd85c991cc81b9bdd08195b991959607a1b6044820152606401610529565b6001600160a01b0381166000908152600f602052604090205460ff166107685760405162461bcd60e51b815260206004820152601060248201526f2737ba103932bbb0b932103a37b5b2b760811b6044820152606401610529565b6001600160a01b0381166000908152600f60205260408120805460ff19169055600e54905b818110156107da576000600e82815481106107aa576107aa611ae0565b6000918252602090912001546001600160a01b039081169150841681036107d157506107da565b5060010161078d565b600e6107e7600184611a5c565b815481106107f7576107f7611ae0565b600091825260209091200154600e80546001600160a01b03909216918390811061082357610823611ae0565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600e80548061086257610862611af6565b600082815260209020810160001990810180546001600160a01b0319169055019055505050565b6001600160a01b0381166000908152600960205260408120544281116108af57806108b1565b425b9392505050565b600e81815481106108c857600080fd5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b03811660009081526009602052604081205442811161090b5750600092915050565b60006109174283611a5c565b6001600160a01b038516600090815260086020526040902054909150676765c793fa10079d601b1b9061094a9083611a6f565b6109549190611a86565b949350505050565b610964610d41565b61097082826001610d6b565b61062f6001600055565b610982610d15565b6001600160a01b0381166000908152600f602052604090205460ff16156109e05760405162461bcd60e51b8152602060048201526012602482015271105b1c9958591e481c9959da5cdd195c995960721b6044820152606401610529565b6001600160a01b03166000818152600f60205260408120805460ff19166001908117909155600e805491820181559091527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd0180546001600160a01b0319169091179055565b600454600090808203610a705750506001600160a01b03166000908152600b602052604090205490565b6001600160a01b038316600090815260086020908152604080832054600a90925290912054829190610aa186610889565b610aab9190611a5c565b610ab59190611a6f565b610abf9190611a86565b6001600160a01b0384166000908152600b60205260409020546108b19190611aa8565b60115433906001600160a01b03168114610b345760405162461bcd60e51b81526020600482015260136024820152722bb937b7339039ba30b5b4b733903a37b5b2b760691b6044820152606401610529565b6001600160a01b038083166000908152600660205260408082205490516370a0823160e01b815290928416906370a0823190610b749087906004016119ef565b602060405180830381865afa158015610b91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb59190611b0c565b905080821015610bd757610bd284610bcd8484611a5c565b611127565b610bf4565b80821115610bf457610bf484610bed8385611a5c565b8315611178565b50505050565b61062f8282846111d4565b600e80546000610c16826001611aa8565b67ffffffffffffffff811115610c2e57610c2e611901565b604051908082528060200260200182016040528015610c57578160200160208202803683370190505b50905060005b82811015610cc757838181548110610c7757610c77611ae0565b9060005260206000200160009054906101000a90046001600160a01b0316828281518110610ca757610ca7611ae0565b6001600160a01b0390921660209283029190910190910152600101610c5d565b5060035481516001600160a01b0390911690829084908110610ceb57610ceb611ae0565b60200260200101906001600160a01b031690816001600160a01b031681525050610bf48482610bfa565b6001546001600160a01b03163314610d3f5760405162461bcd60e51b815260040161052990611abb565b565b600260005403610d6457604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b60008211610da95760405162461bcd60e51b815260206004820152600b60248201526a16995c9bc8185b5bdd5b9d60aa1b6044820152606401610529565b6003546001600160a01b0384811691161480610ddd57506001600160a01b0383166000908152600f602052604090205460ff165b610e1d5760405162461bcd60e51b8152602060048201526011602482015270151bdad95b881b9bdd08185b1b1bddd959607a1b6044820152606401610529565b610e2883600061132f565b6002548115610f35576040516370a0823160e01b81526000906001600160a01b038616906370a0823190610e609030906004016119ef565b602060405180830381865afa158015610e7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea19190611b0c565b9050610eb86001600160a01b0386163330876113d1565b6040516370a0823160e01b815281906001600160a01b038716906370a0823190610ee69030906004016119ef565b602060405180830381865afa158015610f03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f279190611b0c565b610f319190611a5c565b9350505b6001600160a01b0384166000908152600960205260409020544210610f925780610f6a676765c793fa10079d601b1b85611a6f565b610f749190611a86565b6001600160a01b0385166000908152600860205260409020556110a0565b6001600160a01b038416600090815260096020526040812054610fb6904290611a5c565b6001600160a01b03861660009081526008602052604081205491925090610fdd9083611a6f565b9050610ff4676765c793fa10079d601b1b82611a86565b85116110595760405162461bcd60e51b815260206004820152602e60248201527f416d6f756e742073686f756c6420626520686967686572207468616e2072656d60448201526d61696e696e67207265776172647360901b6064820152608401610529565b8281611070676765c793fa10079d601b1b88611a6f565b61107a9190611aa8565b6110849190611a86565b6001600160a01b03871660009081526008602052604090205550505b6001600160a01b0384166000908152600a6020526040902042908190556110c8908290611aa8565b6001600160a01b0385166000818152600960205260409081902092909255905133907ff70d5c697de7ea828df48e5c4573cb2194c659f1901f70110c52b066dcf50826906111199087815260200190565b60405180910390a350505050565b6111318282611438565b816001600160a01b03167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c8260405161116c91815260200190565b60405180910390a25050565b61118283836114d5565b60408051838152821515602082015260008183015290516001600160a01b038516917fc169c019d290f78961d50d9dc7ebcad51a682fa7fd1fc536dfb21046bdb1f7d2919081900360600190a2505050565b6111dc610d41565b6001600160a01b03808216600090815260106020526040902054168015611201578091505b6001600160a01b03821633146112295760405162461bcd60e51b815260040161052990611abb565b61123284611522565b825160005b8181101561131d57600085828151811061125357611253611ae0565b60200260200101519050611267818861132f565b6001600160a01b038082166000908152600d60209081526040808320938b168352929052205480156112c9576001600160a01b038083166000818152600d60209081526040808320948d168352939052918220919091556112c9908783611596565b604080518281526001600160a01b03888116602083015280851692908b16917fe4394b3c25e336e9d6b7fcefab7e3234f1c6b373f13655dc3920664b080b098d910160405180910390a35050600101611237565b50505061132a6001600055565b505050565b600061133a83610a46565b6001600160a01b0384166000908152600b60205260409020819055905061136083610889565b6001600160a01b038085166000908152600a602052604090209190915582161561132a5761138e8383610588565b6001600160a01b039384166000818152600d602090815260408083209690971680835295815286822093909355908152600c825284812093815292905291902055565b6040516001600160a01b038481166024830152838116604483015260648201839052610bf49186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b0383818316178352505050506115c7565b611440610d41565b6000811161147e5760405162461bcd60e51b815260206004820152600b60248201526a16995c9bc8185b5bdd5b9d60aa1b6044820152606401610529565b6114888282611621565b816001600160a01b03167f7a702e80a9c183a6ce9d6732991df2e914555ba35a364a70aed2433984e7544b826040516114c391815260200190565b60405180910390a261062f6001600055565b6114dd610d41565b6114e78282611678565b816001600160a01b03167f9c6be7c4260e52ea2e41d7f17932147ab78756f1bb2247a2554796d969741aff826040516114c391815260200190565b6001600160a01b038116600090815260056020526040812054600480549192839261154e908490611a5c565b9091555050506001600160a01b03811660009081526006602090815260408083205460059092528220819055600480549192839261158d908490611aa8565b90915550505050565b6040516001600160a01b0383811660248301526044820183905261132a91859182169063a9059cbb90606401611406565b60006115dc6001600160a01b038416836116c0565b905080516000141580156116015750808060200190518101906115ff9190611b25565b155b1561132a5782604051635274afe760e01b815260040161052991906119ef565b61162a826116ce565b806007600082825461163c9190611aa8565b90915550506001600160a01b03821660009081526006602052604081208054839290611669908490611aa8565b9091555061062f905082611522565b611681826116ce565b80600760008282546116939190611a5c565b90915550506001600160a01b03821660009081526006602052604081208054839290611669908490611a5c565b606061061c8383600061177e565b6000600e80548060200260200160405190810160405280929190818152602001828054801561172657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611708575b505083519394506000925050505b818110156117675761175f83828151811061175157611751611ae0565b60200260200101518561132f565b600101611734565b5060035461132a906001600160a01b03168461132f565b6060814710156117a3573060405163cd78605960e01b815260040161052991906119ef565b600080856001600160a01b031684866040516117bf9190611b47565b60006040518083038185875af1925050503d80600081146117fc576040519150601f19603f3d011682016040523d82523d6000602084013e611801565b606091505b509150915061181186838361181b565b9695505050505050565b6060826118305761182b8261186e565b6108b1565b815115801561184757506001600160a01b0384163b155b156118675783604051639996b31560e01b815260040161052991906119ef565b50806108b1565b80511561187e5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b80356001600160a01b03811681146118ae57600080fd5b919050565b6000602082840312156118c557600080fd5b61061c82611897565b600080604083850312156118e157600080fd5b6118ea83611897565b91506118f860208401611897565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561192a57600080fd5b61193383611897565b915060208084013567ffffffffffffffff8082111561195157600080fd5b818601915086601f83011261196557600080fd5b81358181111561197757611977611901565b8060051b604051601f19603f8301168101818110858211171561199c5761199c611901565b6040529182528482019250838101850191898311156119ba57600080fd5b938501935b828510156119df576119d085611897565b845293850193928501926119bf565b8096505050505050509250929050565b6001600160a01b0391909116815260200190565b600060208284031215611a1557600080fd5b5035919050565b60008060408385031215611a2f57600080fd5b611a3883611897565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561061f5761061f611a46565b808202811582820484141761061f5761061f611a46565b600082611aa357634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561061f5761061f611a46565b6020808252600b908201526a139bdd08185b1b1bddd95960aa1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b600060208284031215611b1e57600080fd5b5051919050565b600060208284031215611b3757600080fd5b815180151581146108b157600080fd5b6000825160005b81811015611b685760208186018101518583015201611b4e565b50600092019182525091905056fea26469706673582212204bc836aa19981b6c7a4db002457e565431aad04088b9408dbcf8f37e6b303bcc64736f6c63430008180033",
  "devdoc": {
    "author": "belbixa17",
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "derivedBalance(address)": {
        "details": "Balance of holder adjusted with specific rules for boost calculation.      Supposed to be implemented in a parent contract      Adjust user balance with some logic, like boost logic."
      },
      "earned(address,address)": {
        "details": "Approximate of earned rewards ready to claim"
      },
      "handleBalanceChange(address)": {
        "details": "Must be called from stakingToken when user balance changed."
      },
      "lastTimeRewardApplicable(address)": {
        "details": "Returns the last time the reward was modified or periodFinish if the reward has ended"
      },
      "left(address)": {
        "details": "Amount of reward tokens left for the current period"
      },
      "registerRewardToken(address)": {
        "details": "Whitelist reward token for staking token. Only operator can do it."
      },
      "removeRewardToken(address)": {
        "details": "Remove from whitelist reward token for staking token. Only operator can do it.      We assume that the first token can not be removed."
      },
      "rewardPerToken(address)": {
        "details": "Reward paid for token for the current period."
      },
      "rewardTokensLength()": {
        "details": "Length of rewards tokens array for given token"
      },
      "setRewardsRedirect(address,address)": {
        "details": "Account or governance can setup a redirect of all rewards.      It needs for 3rd party contracts integrations."
      }
    },
    "title": "Stakeless pool for vaults",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "rewardsRedirect(address)": {
        "notice": "account => recipient. All rewards for this account will receive recipient"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3824,
        "contract": "contracts/Gauge.sol:Gauge",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 6543,
        "contract": "contracts/Gauge.sol:Gauge",
        "label": "governance",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6546,
        "contract": "contracts/Gauge.sol:Gauge",
        "label": "duration",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 6549,
        "contract": "contracts/Gauge.sol:Gauge",
        "label": "defaultRewardToken",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 6552,
        "contract": "contracts/Gauge.sol:Gauge",
        "label": "derivedSupply",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 6557,
        "contract": "contracts/Gauge.sol:Gauge",
        "label": "derivedBalances",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6562,
        "contract": "contracts/Gauge.sol:Gauge",
        "label": "balanceOf",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6565,
        "contract": "contracts/Gauge.sol:Gauge",
        "label": "totalSupply",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 6570,
        "contract": "contracts/Gauge.sol:Gauge",
        "label": "rewardRate",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6575,
        "contract": "contracts/Gauge.sol:Gauge",
        "label": "periodFinish",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6580,
        "contract": "contracts/Gauge.sol:Gauge",
        "label": "lastUpdateTime",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6585,
        "contract": "contracts/Gauge.sol:Gauge",
        "label": "rewardPerTokenStored",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6592,
        "contract": "contracts/Gauge.sol:Gauge",
        "label": "userRewardPerTokenPaid",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 6599,
        "contract": "contracts/Gauge.sol:Gauge",
        "label": "rewards",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 6603,
        "contract": "contracts/Gauge.sol:Gauge",
        "label": "rewardTokens",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 6608,
        "contract": "contracts/Gauge.sol:Gauge",
        "label": "isRewardToken",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6613,
        "contract": "contracts/Gauge.sol:Gauge",
        "label": "rewardsRedirect",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 6005,
        "contract": "contracts/Gauge.sol:Gauge",
        "label": "stakingToken",
        "offset": 0,
        "slot": "17",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}