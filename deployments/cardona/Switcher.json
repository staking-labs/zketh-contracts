{
  "address": "0xc184a3ECcA684F2621c903A7943D85fA42F56671",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "governance_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Already",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AssetsHaveNotYetBeenBridged",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoNewStrategyAnnounced",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotPending",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyGovernanceCanDoThis",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyVaultCanDoThis",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyIsNotSwitchingNow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyIsNowSwitching",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Timelock",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "AnnouncedNewStrategy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "CancelAnnouncedStrategy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Invested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "NewStrategy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "PendingStrategy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawFromStrategy",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "TIME_LOCK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newStrategy_",
          "type": "address"
        }
      ],
      "name": "announceNewStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "announceTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "announcedPendingStrategy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelAnnouncedStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finishStrategySwitching",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy_",
          "type": "address"
        }
      ],
      "name": "initStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "investAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingStrategy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset_",
          "type": "address"
        }
      ],
      "name": "setup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startStrategySwitching",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAllToVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawToVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x46874a132b3bd6ee14abd7c370f91eecfae8ed1255b03ee78959b0c851042381",
  "receipt": {
    "to": null,
    "from": "0x3d0c177E035C30bb8681e5859EB98d114b48b935",
    "contractAddress": "0xc184a3ECcA684F2621c903A7943D85fA42F56671",
    "transactionIndex": 0,
    "gasUsed": "1090699",
    "logsBloom": "0x
    "blockHash": "0xaa90c5fe258bf2d1387cc38222baeee5fc7b23ea0b57842d9be9ccd5c9f7496c",
    "transactionHash": "0x46874a132b3bd6ee14abd7c370f91eecfae8ed1255b03ee78959b0c851042381",
    "logs": [],
    "blockNumber": 2159821,
    "cumulativeGasUsed": "1090699",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3d0c177E035C30bb8681e5859EB98d114b48b935"
  ],
  "numDeployments": 1,
  "solcInputHash": "0da32b8ba57d82b1968065dc7390c51f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Already\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AssetsHaveNotYetBeenBridged\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoNewStrategyAnnounced\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPending\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyGovernanceCanDoThis\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyVaultCanDoThis\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyIsNotSwitchingNow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyIsNowSwitching\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Timelock\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"AnnouncedNewStrategy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"CancelAnnouncedStrategy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Invested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"NewStrategy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"PendingStrategy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawFromStrategy\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TIME_LOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newStrategy_\",\"type\":\"address\"}],\"name\":\"announceNewStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"announceTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"announcedPendingStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelAnnouncedStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishStrategySwitching\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy_\",\"type\":\"address\"}],\"name\":\"initStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset_\",\"type\":\"address\"}],\"name\":\"setup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startStrategySwitching\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllToVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"a17\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{},\"title\":\"Switches strategy of the vault\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"asset()\":{\"notice\":\"Underlying asset\"},\"governance()\":{\"notice\":\"Address that can manage strategies\"},\"investAll()\":{\"notice\":\"Invest all available assets to strategy\"},\"pendingStrategy()\":{\"notice\":\"New strategy\"},\"setup(address)\":{\"notice\":\"First time setup method called by vault\"},\"strategy()\":{\"notice\":\"Current active strategy\"},\"totalAssets()\":{\"notice\":\"Total assets managed by Switcher\"},\"vault()\":{\"notice\":\"Linked vault\"},\"withdrawAllToVault()\":{\"notice\":\"Withdraws all underlying assets to the vault\"},\"withdrawToVault(uint256)\":{\"notice\":\"Withdraws underlying assets to the vault\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Switcher.sol\":\"Switcher\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":150},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"contracts/Switcher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.24;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport \\\"./interfaces/ISwitcher.sol\\\";\\r\\nimport \\\"./interfaces/IBridgingStrategy.sol\\\";\\r\\n\\r\\n/// @title Switches strategy of the vault\\r\\n/// @author a17\\r\\ncontract Switcher is ISwitcher {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\r\\n    /*                         CONSTANTS                          */\\r\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\r\\n\\r\\n    uint public constant TIME_LOCK = 86400;\\r\\n\\r\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\r\\n    /*                          STORAGE                           */\\r\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\r\\n\\r\\n    /// @inheritdoc ISwitcher\\r\\n    address public asset;\\r\\n\\r\\n    /// @inheritdoc ISwitcher\\r\\n    address public vault;\\r\\n\\r\\n    /// @inheritdoc ISwitcher\\r\\n    address public immutable governance;\\r\\n\\r\\n    /// @inheritdoc ISwitcher\\r\\n    address public strategy;\\r\\n\\r\\n    address public pendingStrategy;\\r\\n\\r\\n    address public announcedPendingStrategy;\\r\\n\\r\\n    uint public announceTime;\\r\\n\\r\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\r\\n    /*                      INITIALIZATION                        */\\r\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\r\\n\\r\\n    constructor(address governance_) {\\r\\n        governance = governance_;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ISwitcher\\r\\n    function setup(address asset_) external {\\r\\n        if (vault == address(0)) {\\r\\n            asset = asset_;\\r\\n            vault = msg.sender;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\r\\n    /*                          MODIFIERS                         */\\r\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\r\\n\\r\\n    modifier onlyVault() {\\r\\n        _requireVault();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyGovernance() {\\r\\n        _requireGovernance();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\r\\n    /*                      RESTRICTED ACTIONS                    */\\r\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\r\\n\\r\\n    /// @inheritdoc ISwitcher\\r\\n    function investAll() external onlyVault {\\r\\n        _checkSwitching();\\r\\n        address _strategy = strategy;\\r\\n        address _asset = asset;\\r\\n        if (_strategy != address(0)) {\\r\\n            uint balance = IERC20(_asset).balanceOf(address(this));\\r\\n            IERC20(_asset).safeTransfer(_strategy, balance);\\r\\n            emit Invested(_strategy, balance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ISwitcher\\r\\n    function withdrawAllToVault() external onlyVault {\\r\\n        _checkSwitching();\\r\\n        address _strategy = strategy;\\r\\n        address _asset = asset;\\r\\n        if (_strategy != address(0)) {\\r\\n            uint strategyBalance = IBridgingStrategy(_strategy).totalAssets();\\r\\n            if (strategyBalance != 0) {\\r\\n                uint withdrawAmount = IBridgingStrategy(_strategy).withdrawAllToSwitcher();\\r\\n                emit WithdrawFromStrategy(_strategy, withdrawAmount);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint balanceAfter = IERC20(_asset).balanceOf(address(this));\\r\\n        if (balanceAfter != 0) {\\r\\n            IERC20(_asset).safeTransfer(vault, balanceAfter);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ISwitcher\\r\\n    function withdrawToVault(uint amount) external onlyVault {\\r\\n        _checkSwitching();\\r\\n        address _asset = asset;\\r\\n        address _vault = vault;\\r\\n\\r\\n        uint balance = IERC20(_asset).balanceOf(address(this));\\r\\n        if (balance < amount) {\\r\\n            uint remainingAmount = amount - balance;\\r\\n            address _strategy = strategy;\\r\\n\\r\\n            uint strategyBalance = IBridgingStrategy(_strategy).totalAssets();\\r\\n\\r\\n            if (strategyBalance != 0) {\\r\\n                // withdraw from strategy\\r\\n                uint withdrawAmount;\\r\\n                if (strategyBalance <= remainingAmount) {\\r\\n                    withdrawAmount = IBridgingStrategy(_strategy).withdrawAllToSwitcher();\\r\\n                } else {\\r\\n                    IBridgingStrategy(_strategy).withdrawToSwitcher(remainingAmount);\\r\\n                    withdrawAmount = remainingAmount;\\r\\n                }\\r\\n\\r\\n                emit WithdrawFromStrategy(_strategy, withdrawAmount);\\r\\n\\r\\n                balance = IERC20(_asset).balanceOf(address(this));\\r\\n//                uint currentBalance = IERC20(_asset).balanceOf(address(this));\\r\\n                // assume that we can not decrease switcher balance during withdraw process\\r\\n//                uint withdrew = currentBalance - balance;\\r\\n//                balance = currentBalance;\\r\\n\\r\\n//                remainingAmount = withdrew < remainingAmount ? remainingAmount - withdrew : 0;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (balance != 0) {\\r\\n            IERC20(_asset).transfer(_vault, Math.min(amount, balance));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function initStrategy(address strategy_) external onlyGovernance {\\r\\n        if (strategy != address(0)) {\\r\\n            revert Already();\\r\\n        }\\r\\n        strategy = strategy_;\\r\\n        emit NewStrategy(strategy_);\\r\\n    }\\r\\n\\r\\n    function announceNewStrategy(address newStrategy_) external onlyGovernance {\\r\\n        if (announcedPendingStrategy != address(0) || pendingStrategy != address(0)) {\\r\\n            revert Already();\\r\\n        }\\r\\n        announcedPendingStrategy = newStrategy_;\\r\\n        announceTime = block.timestamp;\\r\\n        emit AnnouncedNewStrategy(newStrategy_);\\r\\n    }\\r\\n\\r\\n    function cancelAnnouncedStrategy() external onlyGovernance {\\r\\n        address _announcedPendingStrategy = announcedPendingStrategy;\\r\\n        if (_announcedPendingStrategy != address(0)) {\\r\\n            announcedPendingStrategy = address(0);\\r\\n            emit CancelAnnouncedStrategy(_announcedPendingStrategy);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\r\\n    /*                         USER ACTIONS                       */\\r\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\r\\n\\r\\n    function startStrategySwitching() external {\\r\\n        address _announcedPendingStrategy = announcedPendingStrategy;\\r\\n        if (_announcedPendingStrategy == address(0)) {\\r\\n            revert NoNewStrategyAnnounced();\\r\\n        }\\r\\n        if (block.timestamp < announceTime + TIME_LOCK) {\\r\\n            revert Timelock();\\r\\n        }\\r\\n        pendingStrategy = _announcedPendingStrategy;\\r\\n        announcedPendingStrategy = address(0);\\r\\n        IBridgingStrategy _strategy = IBridgingStrategy(strategy);\\r\\n        uint bridgedAssets = _strategy.bridgedAssets();\\r\\n        uint totalRequested = _strategy.totalRequested();\\r\\n        uint needRequest = bridgedAssets >= totalRequested ? bridgedAssets - totalRequested : bridgedAssets;\\r\\n        if (needRequest != 0) {\\r\\n            _strategy.requestClaimAllAssets();\\r\\n        }\\r\\n        emit PendingStrategy(_announcedPendingStrategy);\\r\\n    }\\r\\n\\r\\n    function finishStrategySwitching() external {\\r\\n        address _pendingStrategy = pendingStrategy;\\r\\n        if (_pendingStrategy == address(0)) {\\r\\n            revert StrategyIsNotSwitchingNow();\\r\\n        }\\r\\n        IBridgingStrategy _strategy = IBridgingStrategy(strategy);\\r\\n        if (\\r\\n            _strategy.bridgedAssets() != 0\\r\\n            || _strategy.pendingRequestedBridgingAssets() != 0\\r\\n        ) {\\r\\n            revert AssetsHaveNotYetBeenBridged();\\r\\n        }\\r\\n\\r\\n        _strategy.withdrawAllToSwitcher();\\r\\n\\r\\n        strategy = _pendingStrategy;\\r\\n        pendingStrategy = address(0);\\r\\n        emit NewStrategy(_pendingStrategy);\\r\\n    }\\r\\n\\r\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\r\\n    /*                      VIEW FUNCTIONS                        */\\r\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\r\\n\\r\\n    /// @inheritdoc ISwitcher\\r\\n    function totalAssets() public view override returns (uint) {\\r\\n        uint bal = IERC20(asset).balanceOf(address(this));\\r\\n        address _strategy = strategy;\\r\\n        return _strategy == address(0) ? bal : bal + IBridgingStrategy(_strategy).totalAssets();\\r\\n    }\\r\\n\\r\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\r\\n    /*                       INTERNAL LOGIC                       */\\r\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\r\\n\\r\\n    function _requireVault() internal view {\\r\\n        if (msg.sender != vault) {\\r\\n            revert OnlyVaultCanDoThis();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _requireGovernance() internal view {\\r\\n        if (msg.sender != governance) {\\r\\n            revert OnlyGovernanceCanDoThis();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _checkSwitching() internal view {\\r\\n        if (pendingStrategy != address(0)) {\\r\\n            revert StrategyIsNowSwitching();\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x875bedab1010301afdb0d77044152cfa83b6348d2d21469ab28bbae39b5b824a\",\"license\":\"MIT\"},\"contracts/interfaces/IBridgingStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @notice Strategy for staking an asset on another network\\ninterface IBridgingStrategy {\\n    event Destination(address contractL1);\\n    event RequestAssets(address indexed owner, uint vaultSharesAmount);\\n    event BridgeAssetsToL1(uint amount);\\n    event BridgeRequestMessageToL1(uint amount);\\n\\n    /// @notice Underlying asset\\n    function asset() external view returns (address);\\n\\n    /// @notice Linked switcher that manage strategy of the vault\\n    function switcher() external view returns (address);\\n\\n    /// @notice Strategy contract on another network\\n    function destination() external view returns (address);\\n\\n    /// @notice Total amount of assets under strategy management\\n    function totalAssets() external view returns (uint);\\n\\n    /// @notice Amount of assets under strategy management on another network\\n    function bridgedAssets() external view returns (uint);\\n\\n    /// @notice Total requested assets for withdraw from another network\\n    function totalRequested() external view returns (uint);\\n\\n    /// @notice Assets in process of bridging\\n    function pendingRequestedBridgingAssets() external view returns (uint);\\n\\n    /// @notice Is ready to call bridge\\n    /// @return need Is need to call bridge now\\n    /// @return toL1 Need bridge assets to L1\\n    /// @return amount Amount of asset for bridging or request withdraw\\n    function needBridgingNow() external view returns (bool need, bool toL1, uint amount);\\n\\n    /// @notice Withdraws all assets under strategy management to the Switcher\\n    /// @dev Will only be executed if all assets have already been transferred to the current network\\n    function withdrawAllToSwitcher() external returns(uint amount);\\n\\n    /// @notice Withdraws assets to the Switcher\\n    function withdrawToSwitcher(uint amount) external;\\n\\n    /// @notice Bridge assets for staking on another network or request withdraw from it\\n    function callBridge() external;\\n\\n    /// @notice Send message to another network for claiming all invested assets\\n    /// Only Switcher can call it.\\n    function requestClaimAllAssets() external;\\n\\n    /// @notice Transfer vault shares from user and put claim request to shuttle\\n    /// Only vault shares owner can call it.\\n    function requestClaimAssets(uint vaultSharesAmount) external;\\n\\n    /// @notice Claim requested and bridged from another network assets\\n    function claimRequestedAssets(address[] calldata sharesHolders) external;\\n\\n}\\n\",\"keccak256\":\"0xec829836466feee073c4972f0926aae4efad7338dad9f1a6295a79abd5701d1d\",\"license\":\"MIT\"},\"contracts/interfaces/ISwitcher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.24;\\r\\n\\r\\ninterface ISwitcher {\\r\\n    event NewStrategy(address strategy);\\r\\n    event AnnouncedNewStrategy(address strategy);\\r\\n    event CancelAnnouncedStrategy(address strategy);\\r\\n    event PendingStrategy(address strategy);\\r\\n    event Invested(address indexed strategy, uint amount);\\r\\n    event WithdrawFromStrategy(address indexed strategy, uint amount);\\r\\n\\r\\n    error OnlyVaultCanDoThis();\\r\\n    error OnlyGovernanceCanDoThis();\\r\\n    error Already();\\r\\n    error NoNewStrategyAnnounced();\\r\\n    error Timelock();\\r\\n    error NotPending();\\r\\n    error AssetsHaveNotYetBeenBridged();\\r\\n    error StrategyIsNowSwitching();\\r\\n    error StrategyIsNotSwitchingNow();\\r\\n\\r\\n    /// @notice Underlying asset\\r\\n    function asset() external view returns (address);\\r\\n\\r\\n    /// @notice Linked vault\\r\\n    function vault() external view returns (address);\\r\\n\\r\\n    /// @notice Current active strategy\\r\\n    function strategy() external view returns (address);\\r\\n\\r\\n    /// @notice New strategy\\r\\n    function pendingStrategy() external view returns (address);\\r\\n\\r\\n    /// @notice Address that can manage strategies\\r\\n    function governance() external view returns (address);\\r\\n\\r\\n    /// @notice Total assets managed by Switcher\\r\\n    function totalAssets() external view returns (uint);\\r\\n\\r\\n//    function doHardWork() external;\\r\\n\\r\\n    /// @notice Invest all available assets to strategy\\r\\n    function investAll() external;\\r\\n\\r\\n    /// @notice Withdraws all underlying assets to the vault\\r\\n    function withdrawAllToVault() external;\\r\\n\\r\\n    /// @notice Withdraws underlying assets to the vault\\r\\n    function withdrawToVault(uint amount) external;\\r\\n\\r\\n    /// @notice First time setup method called by vault\\r\\n    function setup(address asset_) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x2416d7a19a9b6287e8e87c11c793f96e74804a2dfdd542da24f1cc308f5f67af\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c80639077d1f0116100a2578063ce8c42e811610071578063ce8c42e814610212578063df87253614610225578063e0a09c681461022d578063e34d2e0b14610237578063fbfa77cf1461023f57600080fd5b80639077d1f0146101dc578063a8c62e76146101e4578063bfd131f1146101f7578063ccf9066b146101ff57600080fd5b8063465fc5d2116100e9578063465fc5d2146101745780635aa6e6751461018757806366d38203146101ae57806382796402146101c15780638e541db8146101c957600080fd5b806301e1d1141461011b5780632a41870f1461013657806338d52e0f1461013f5780633ccdde231461015f575b600080fd5b610123610252565b6040519081526020015b60405180910390f35b61012360055481565b600054610152906001600160a01b031681565b60405161012d919061118a565b61017261016d36600461119e565b610353565b005b600354610152906001600160a01b031681565b6101527f000000000000000000000000000000000000000000000000000000000000000081565b6101726101bc36600461119e565b6103f6565b610172610433565b6101726101d736600461119e565b61063a565b6101726106b7565b600254610152906001600160a01b031681565b610172610711565b600454610152906001600160a01b031681565b6101726102203660046111c7565b6108ec565b610172610c37565b6101236201518081565b610172610d2f565b600154610152906001600160a01b031681565b600080546040516370a0823160e01b815282916001600160a01b0316906370a082319061028390309060040161118a565b602060405180830381865afa1580156102a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c491906111e0565b6002549091506001600160a01b0316801561034a57806001600160a01b03166301e1d1146040518163ffffffff1660e01b8152600401602060405180830381865afa158015610317573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033b91906111e0565b610345908361120f565b61034c565b815b9250505090565b61035b610f1b565b6004546001600160a01b031615158061037e57506003546001600160a01b031615155b1561039c57604051633008ba1360e11b815260040160405180910390fd5b600480546001600160a01b0319166001600160a01b038316179055426005556040517f460331ce80e333c4a57afa9c3901c2745777d98d9a8c6a0ecdf3ea946625a62f906103eb90839061118a565b60405180910390a150565b6001546001600160a01b031661043057600080546001600160a01b0383166001600160a01b03199182161790915560018054909116331790555b50565b6004546001600160a01b03168061045d57604051630803fa8560e21b815260040160405180910390fd5b6201518060055461046e919061120f565b42101561048e57604051635f107c5f60e11b815260040160405180910390fd5b600380546001600160a01b038084166001600160a01b0319928316179092556004805490911681556002546040805163143d728160e01b815290519190931692600092849263143d72819280830192602092918290030181865afa1580156104fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051e91906111e0565b90506000826001600160a01b031663880b678d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610560573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058491906111e0565b905060008183101561059657826105a0565b6105a08284611222565b905080156105fc57836001600160a01b031663a78a9b4a6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156105e357600080fd5b505af11580156105f7573d6000803e3d6000fd5b505050505b7f9d46a117ee69d363a494630270b700b540aab365e97b7ee086835e6acf639f598560405161062b919061118a565b60405180910390a15050505050565b610642610f1b565b6002546001600160a01b03161561066c57604051633008ba1360e11b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0383161790556040517f6a8bdf1118a9228c75e2430d8861e4925555a5a4b3165a133c5ee38b7225fa92906103eb90839061118a565b6106bf610f1b565b6004546001600160a01b0316801561043057600480546001600160a01b03191690556040517fcbec2cc173314c203997db56c1062b2af97022087e8b8bd77f663f97583400a5906103eb90839061118a565b610719610f66565b610721610f91565b6002546000546001600160a01b0391821691168115610855576000826001600160a01b03166301e1d1146040518163ffffffff1660e01b8152600401602060405180830381865afa15801561077a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079e91906111e0565b90508015610853576000836001600160a01b03166357339c296040518163ffffffff1660e01b81526004016020604051808303816000875af11580156107e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080c91906111e0565b9050836001600160a01b03167fb28e99afed98b3607aeea074f84c346dc4135d86f35b1c28bc35ab6782e7ce308260405161084991815260200190565b60405180910390a2505b505b6040516370a0823160e01b81526000906001600160a01b038316906370a082319061088490309060040161118a565b602060405180830381865afa1580156108a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c591906111e0565b905080156108e7576001546108e7906001600160a01b03848116911683610fbb565b505050565b6108f4610f66565b6108fc610f91565b600080546001546040516370a0823160e01b81526001600160a01b0392831693919092169183906370a082319061093790309060040161118a565b602060405180830381865afa158015610954573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097891906111e0565b905083811015610ba057600061098e8286611222565b90506000600260009054906101000a90046001600160a01b031690506000816001600160a01b03166301e1d1146040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109ea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0e91906111e0565b90508015610b9c576000838211610a8a57826001600160a01b03166357339c296040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610a5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8391906111e0565b9050610ae8565b6040516349b1b8dd60e11b8152600481018590526001600160a01b0384169063936371ba90602401600060405180830381600087803b158015610acc57600080fd5b505af1158015610ae0573d6000803e3d6000fd5b505050508390505b826001600160a01b03167fb28e99afed98b3607aeea074f84c346dc4135d86f35b1c28bc35ab6782e7ce3082604051610b2391815260200190565b60405180910390a26040516370a0823160e01b81526001600160a01b038816906370a0823190610b5790309060040161118a565b602060405180830381865afa158015610b74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9891906111e0565b9450505b5050505b8015610c3157826001600160a01b031663a9059cbb83610bc0878561100d565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610c0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2f9190611235565b505b50505050565b610c3f610f66565b610c47610f91565b6002546000546001600160a01b0391821691168115610d2b576040516370a0823160e01b81526000906001600160a01b038316906370a0823190610c8f90309060040161118a565b602060405180830381865afa158015610cac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd091906111e0565b9050610ce66001600160a01b0383168483610fbb565b826001600160a01b03167fc3f75dfc78f6efac88ad5abb5e606276b903647d97b2a62a1ef89840a658bbc382604051610d2191815260200190565b60405180910390a2505b5050565b6003546001600160a01b031680610d595760405163ac8f366360e01b815260040160405180910390fd5b6002546040805163143d728160e01b815290516001600160a01b0390921691829163143d72819160048083019260209291908290030181865afa158015610da4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc891906111e0565b151580610e355750806001600160a01b03166327eb25106040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3291906111e0565b15155b15610e5357604051637c12e30960e11b815260040160405180910390fd5b806001600160a01b03166357339c296040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610e93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb791906111e0565b50600280546001600160a01b0384166001600160a01b0319918216179091556003805490911690556040517f6a8bdf1118a9228c75e2430d8861e4925555a5a4b3165a133c5ee38b7225fa9290610f0f90849061118a565b60405180910390a15050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610f64576040516343c0578f60e11b815260040160405180910390fd5b565b6001546001600160a01b03163314610f645760405163c5e72f2b60e01b815260040160405180910390fd5b6003546001600160a01b031615610f6457604051633faa928360e01b815260040160405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526108e7908490611027565b600081831061101c578161101e565b825b90505b92915050565b600061103c6001600160a01b0384168361108a565b9050805160001415801561106157508080602001905181019061105f9190611235565b155b156108e75782604051635274afe760e01b8152600401611081919061118a565b60405180910390fd5b606061101e8383600084600080856001600160a01b031684866040516110b09190611257565b60006040518083038185875af1925050503d80600081146110ed576040519150601f19603f3d011682016040523d82523d6000602084013e6110f2565b606091505b509150915061110286838361110e565b925050505b9392505050565b6060826111235761111e82611161565b611107565b815115801561113a57506001600160a01b0384163b155b1561115a5783604051639996b31560e01b8152600401611081919061118a565b5080611107565b8051156111715780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6001600160a01b0391909116815260200190565b6000602082840312156111b057600080fd5b81356001600160a01b038116811461110757600080fd5b6000602082840312156111d957600080fd5b5035919050565b6000602082840312156111f257600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b80820180821115611021576110216111f9565b81810381811115611021576110216111f9565b60006020828403121561124757600080fd5b8151801515811461110757600080fd5b6000825160005b81811015611278576020818601810151858301520161125e565b50600092019182525091905056fea26469706673582212200f03c653f8bcf71799246e2dea51e69fd9d84bfe64067eb47059630f51af8b4664736f6c63430008180033",
  "devdoc": {
    "author": "a17",
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {},
    "title": "Switches strategy of the vault",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "asset()": {
        "notice": "Underlying asset"
      },
      "governance()": {
        "notice": "Address that can manage strategies"
      },
      "investAll()": {
        "notice": "Invest all available assets to strategy"
      },
      "pendingStrategy()": {
        "notice": "New strategy"
      },
      "setup(address)": {
        "notice": "First time setup method called by vault"
      },
      "strategy()": {
        "notice": "Current active strategy"
      },
      "totalAssets()": {
        "notice": "Total assets managed by Switcher"
      },
      "vault()": {
        "notice": "Linked vault"
      },
      "withdrawAllToVault()": {
        "notice": "Withdraws all underlying assets to the vault"
      },
      "withdrawToVault(uint256)": {
        "notice": "Withdraws underlying assets to the vault"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2930,
        "contract": "contracts/Switcher.sol:Switcher",
        "label": "asset",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2933,
        "contract": "contracts/Switcher.sol:Switcher",
        "label": "vault",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2939,
        "contract": "contracts/Switcher.sol:Switcher",
        "label": "strategy",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2941,
        "contract": "contracts/Switcher.sol:Switcher",
        "label": "pendingStrategy",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2943,
        "contract": "contracts/Switcher.sol:Switcher",
        "label": "announcedPendingStrategy",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2945,
        "contract": "contracts/Switcher.sol:Switcher",
        "label": "announceTime",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}