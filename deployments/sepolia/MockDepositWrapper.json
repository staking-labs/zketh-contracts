{
  "address": "0x33222Ee7eAb1aBE6fC1724eAce207fA3Fa62C7C3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "comptroller_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "weth_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "comptroller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_comptrollerProxy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "exchangeEthAndBuyShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "sharesReceived_",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa64c0fe796e2166c1724e4e469b5adc771c2dddc34e2d6ab51c253991ddbdc94",
  "receipt": {
    "to": null,
    "from": "0x3d0c177E035C30bb8681e5859EB98d114b48b935",
    "contractAddress": "0x33222Ee7eAb1aBE6fC1724eAce207fA3Fa62C7C3",
    "transactionIndex": 39,
    "gasUsed": "275572",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xeafd14d7dd5d296f66389f6d12a23f82d8d5f944c17fb67a01148f3249966ef4",
    "transactionHash": "0xa64c0fe796e2166c1724e4e469b5adc771c2dddc34e2d6ab51c253991ddbdc94",
    "logs": [],
    "blockNumber": 5668638,
    "cumulativeGasUsed": "9500309",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4Aca671A420eEB58ecafE83700686a2AD06b20D8",
    "0xdb998e95a22fe1Ee74eF1F5CDD7FCA151456a04E"
  ],
  "numDeployments": 1,
  "solcInputHash": "b0fd921354e138a657dd1cedcdbe093b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"comptroller_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"exchangeEthAndBuyShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sharesReceived_\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/MockDepositWrapper.sol\":\"MockDepositWrapper\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":150},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"contracts/interfaces/IComptroller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.24;\\r\\n\\r\\ninterface IComptroller {\\r\\n    /// @notice Redeems a specified amount of the sender's shares\\r\\n    /// for a proportionate slice of the vault's assets\\r\\n    /// @param _recipient The account that will receive the proportionate slice of assets\\r\\n    /// @param _sharesQuantity The quantity of shares to redeem\\r\\n    /// @param _additionalAssets Additional (non-tracked) assets to claim\\r\\n    /// @param _assetsToSkip Tracked assets to forfeit\\r\\n    /// @return payoutAssets_ The assets paid out to the _recipient\\r\\n    /// @return payoutAmounts_ The amount of each asset paid out to the _recipient\\r\\n    /// @dev Redeem all shares of the sender by setting _sharesQuantity to the max uint value.\\r\\n    /// Any claim to passed _assetsToSkip will be forfeited entirely. This should generally\\r\\n    /// only be exercised if a bad asset is causing redemption to fail.\\r\\n    /// This function should never fail without a way to bypass the failure, which is assured\\r\\n    /// through two mechanisms:\\r\\n    /// 1. The FeeManager is called with the try/catch pattern to assure that calls to it\\r\\n    /// can never block redemption.\\r\\n    /// 2. If a token fails upon transfer(), that token can be skipped (and its balance forfeited)\\r\\n    /// by explicitly specifying _assetsToSkip.\\r\\n    /// Because of these assurances, shares should always be redeemable, with the exception\\r\\n    /// of the timelock period on shares actions that must be respected.\\r\\n    function redeemSharesInKind(\\r\\n        address _recipient,\\r\\n        uint256 _sharesQuantity,\\r\\n        address[] calldata _additionalAssets,\\r\\n        address[] calldata _assetsToSkip\\r\\n    ) external returns (address[] memory payoutAssets_, uint256[] memory payoutAmounts_);\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x30f16c8721a2bb390f35e2d6cec30ce2b1a6cdf79f39702a4d5c9ffeabc98c36\",\"license\":\"MIT\"},\"contracts/interfaces/IDepositWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.24;\\r\\n\\r\\ninterface IDepositWrapper {\\r\\n    /// @notice Exchanges ETH into a fund's denomination asset and then buys shares\\r\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\r\\n    /// @param _minSharesQuantity The minimum quantity of shares to buy with the sent ETH\\r\\n    /// @param _exchange The exchange on which to execute the swap to the denomination asset\\r\\n    /// @param _exchangeApproveTarget The address that should be given an allowance of WETH\\r\\n    /// for the given _exchange\\r\\n    /// @param _exchangeData The data with which to call the exchange to execute the swap\\r\\n    /// to the denomination asset\\r\\n    /// @param _exchangeMinReceived The minimum amount of the denomination asset\\r\\n    /// to receive in the trade for investment (not necessary for WETH)\\r\\n    /// @return sharesReceived_ The actual amount of shares received\\r\\n    /// @dev Use a reasonable _exchangeMinReceived always, in case the exchange\\r\\n    /// does not perform as expected (low incoming asset amount, blend of assets, etc).\\r\\n    /// If the fund's denomination asset is WETH, _exchange, _exchangeApproveTarget, _exchangeData,\\r\\n    /// and _exchangeMinReceived will be ignored.\\r\\n    function exchangeEthAndBuyShares(\\r\\n        address _comptrollerProxy,\\r\\n        uint _minSharesQuantity,\\r\\n        address _exchange,\\r\\n        address _exchangeApproveTarget,\\r\\n        bytes calldata _exchangeData,\\r\\n        uint _exchangeMinReceived\\r\\n    ) external payable returns (uint sharesReceived_);\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xbccde1b47559f710564437c05f0c3cc519e8fd37ecc1f81b90fcfca20face282\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.24;\\r\\n\\r\\ninterface IWETH9 {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function withdraw(uint wad) external;\\r\\n}\",\"keccak256\":\"0x1c89c0632e2c924f2b8b032cb3e0d91af4b47c28e4d5ddec8d9208fd24b1e5e5\",\"license\":\"MIT\"},\"contracts/test/MockComptroller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.24;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {IComptroller} from \\\"../interfaces/IComptroller.sol\\\";\\r\\n\\r\\ncontract MockComptroller is IComptroller {\\r\\n\\r\\n    address public weth;\\r\\n\\r\\n    uint public totalUserShares;\\r\\n\\r\\n    mapping(address => uint) public userBalance;\\r\\n\\r\\n    constructor(address weth_) {\\r\\n        weth = weth_;\\r\\n    }\\r\\n\\r\\n    function redeemSharesInKind(\\r\\n        address _recipient,\\r\\n        uint256 _sharesQuantity,\\r\\n        address[] calldata,\\r\\n        address[] calldata\\r\\n    ) external returns (address[] memory payoutAssets_, uint256[] memory payoutAmounts_) {\\r\\n        uint _userBalance = userBalance[msg.sender];\\r\\n        if (_sharesQuantity == type(uint).max) {\\r\\n            _sharesQuantity = _userBalance;\\r\\n        } else {\\r\\n            require(_userBalance >= _sharesQuantity, \\\"Not enough balance\\\");\\r\\n        }\\r\\n        uint totalWethBalance = IERC20(weth).balanceOf(address(this));\\r\\n        uint forUser = totalWethBalance * _sharesQuantity / totalUserShares;\\r\\n        IERC20(weth).transfer(_recipient, forUser);\\r\\n        userBalance[msg.sender] = _userBalance - _sharesQuantity;\\r\\n        totalUserShares -= _sharesQuantity;\\r\\n        payoutAssets_ = new address[](0);\\r\\n        payoutAmounts_ = new uint[](0);\\r\\n    }\\r\\n\\r\\n    function addUserBalance(address user, uint amountShares) external {\\r\\n        userBalance[user] += amountShares;\\r\\n        totalUserShares += amountShares;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7ad9fc5d755f99610e9541f6f68b18b60100064904de5cbea7331bcf1cdfdba5\",\"license\":\"MIT\"},\"contracts/test/MockDepositWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.24;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {IDepositWrapper} from \\\"../interfaces/IDepositWrapper.sol\\\";\\r\\nimport {IWETH9} from \\\"../interfaces/IWETH9.sol\\\";\\r\\nimport {MockComptroller} from \\\"./MockComptroller.sol\\\";\\r\\n\\r\\ncontract MockDepositWrapper is IDepositWrapper {\\r\\n    address public immutable comptroller;\\r\\n    address public immutable weth;\\r\\n\\r\\n    constructor(address comptroller_, address weth_) {\\r\\n        comptroller = comptroller_;\\r\\n        weth = weth_;\\r\\n    }\\r\\n\\r\\n    function exchangeEthAndBuyShares(\\r\\n        address _comptrollerProxy,\\r\\n        uint,\\r\\n        address,\\r\\n        address,\\r\\n        bytes calldata,\\r\\n        uint\\r\\n    ) external payable returns (uint sharesReceived_) {\\r\\n        IWETH9(weth).deposit{value: msg.value}();\\r\\n        uint fee = msg.value / 10000;\\r\\n        IERC20(weth).transfer(_comptrollerProxy, msg.value - fee);\\r\\n        sharesReceived_ = msg.value;\\r\\n        MockComptroller(_comptrollerProxy).addUserBalance(msg.sender, msg.value);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x41bafbd7047b45422fc4fa44077fcff4cd250adc09061a0b955ecf03d358ff1b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b506040516104c13803806104c183398101604081905261002f91610062565b6001600160a01b039182166080521660a052610095565b80516001600160a01b038116811461005d57600080fd5b919050565b6000806040838503121561007557600080fd5b61007e83610046565b915061008c60208401610046565b90509250929050565b60805160a0516103fc6100c560003960008181604b0152818160e3015261017101526000609c01526103fc6000f3fe6080604052600436106100345760003560e01c80633fc8cef3146100395780635fe3b5671461008a5780639a98f01b146100be575b600080fd5b34801561004557600080fd5b5061006d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561009657600080fd5b5061006d7f000000000000000000000000000000000000000000000000000000000000000081565b6100d16100cc36600461029c565b6100df565b604051908152602001610081565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561013c57600080fd5b505af1158015610150573d6000803e3d6000fd5b50505050506000612710346101659190610354565b90506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663a9059cbb8a6101a18434610376565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156101ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610210919061039d565b506040516301a36ec960e21b8152336004820152346024820181905292506001600160a01b038a169063068dbb2490604401600060405180830381600087803b15801561025c57600080fd5b505af1158015610270573d6000803e3d6000fd5b5050505050979650505050505050565b80356001600160a01b038116811461029757600080fd5b919050565b600080600080600080600060c0888a0312156102b757600080fd5b6102c088610280565b9650602088013595506102d560408901610280565b94506102e360608901610280565b9350608088013567ffffffffffffffff8082111561030057600080fd5b818a0191508a601f83011261031457600080fd5b81358181111561032357600080fd5b8b602082850101111561033557600080fd5b60208301955080945050505060a0880135905092959891949750929550565b60008261037157634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561039757634e487b7160e01b600052601160045260246000fd5b92915050565b6000602082840312156103af57600080fd5b815180151581146103bf57600080fd5b939250505056fea264697066735822122042abc4811f150601aef907165f0253a6d0d0374c9e54a63f13c9e114d2e7bcf964736f6c63430008180033",
  "deployedBytecode": "0x6080604052600436106100345760003560e01c80633fc8cef3146100395780635fe3b5671461008a5780639a98f01b146100be575b600080fd5b34801561004557600080fd5b5061006d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561009657600080fd5b5061006d7f000000000000000000000000000000000000000000000000000000000000000081565b6100d16100cc36600461029c565b6100df565b604051908152602001610081565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561013c57600080fd5b505af1158015610150573d6000803e3d6000fd5b50505050506000612710346101659190610354565b90506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663a9059cbb8a6101a18434610376565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156101ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610210919061039d565b506040516301a36ec960e21b8152336004820152346024820181905292506001600160a01b038a169063068dbb2490604401600060405180830381600087803b15801561025c57600080fd5b505af1158015610270573d6000803e3d6000fd5b5050505050979650505050505050565b80356001600160a01b038116811461029757600080fd5b919050565b600080600080600080600060c0888a0312156102b757600080fd5b6102c088610280565b9650602088013595506102d560408901610280565b94506102e360608901610280565b9350608088013567ffffffffffffffff8082111561030057600080fd5b818a0191508a601f83011261031457600080fd5b81358181111561032357600080fd5b8b602082850101111561033557600080fd5b60208301955080945050505060a0880135905092959891949750929550565b60008261037157634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561039757634e487b7160e01b600052601160045260246000fd5b92915050565b6000602082840312156103af57600080fd5b815180151581146103bf57600080fd5b939250505056fea264697066735822122042abc4811f150601aef907165f0253a6d0d0374c9e54a63f13c9e114d2e7bcf964736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}