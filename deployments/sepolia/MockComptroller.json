{
  "address": "0x02Af36760deDf3a2ac3Fa7f5af072b9aDaf3F504",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "weth_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountShares",
          "type": "uint256"
        }
      ],
      "name": "addUserBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_sharesQuantity",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "name": "redeemSharesInKind",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "payoutAssets_",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "payoutAmounts_",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalUserShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x60e0b9bdff263b0a55b7a5ea60499ae469021714f5f9bf03b6e31c6eecc0e0c1",
  "receipt": {
    "to": null,
    "from": "0x3d0c177E035C30bb8681e5859EB98d114b48b935",
    "contractAddress": "0x02Af36760deDf3a2ac3Fa7f5af072b9aDaf3F504",
    "transactionIndex": 66,
    "gasUsed": "395064",
    "logsBloom": "0x
    "blockHash": "0xe5ae8334d4e1c342063d7294d81b307d435c8710a5a95f7ef2a09910c5dd1bb6",
    "transactionHash": "0x60e0b9bdff263b0a55b7a5ea60499ae469021714f5f9bf03b6e31c6eecc0e0c1",
    "logs": [],
    "blockNumber": 5614537,
    "cumulativeGasUsed": "11457935",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE0D142466d1BF88FE23D5D265d76068077E4D6F0"
  ],
  "numDeployments": 1,
  "solcInputHash": "cd9d925b63ac700938c46a08eefd7125",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"weth_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountShares\",\"type\":\"uint256\"}],\"name\":\"addUserBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sharesQuantity\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"name\":\"redeemSharesInKind\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"payoutAssets_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"payoutAmounts_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUserShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/MockComptroller.sol\":\"MockComptroller\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":150},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"contracts/interfaces/IComptroller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.24;\\r\\n\\r\\ninterface IComptroller {\\r\\n    /// @notice Redeems a specified amount of the sender's shares\\r\\n    /// for a proportionate slice of the vault's assets\\r\\n    /// @param _recipient The account that will receive the proportionate slice of assets\\r\\n    /// @param _sharesQuantity The quantity of shares to redeem\\r\\n    /// @param _additionalAssets Additional (non-tracked) assets to claim\\r\\n    /// @param _assetsToSkip Tracked assets to forfeit\\r\\n    /// @return payoutAssets_ The assets paid out to the _recipient\\r\\n    /// @return payoutAmounts_ The amount of each asset paid out to the _recipient\\r\\n    /// @dev Redeem all shares of the sender by setting _sharesQuantity to the max uint value.\\r\\n    /// Any claim to passed _assetsToSkip will be forfeited entirely. This should generally\\r\\n    /// only be exercised if a bad asset is causing redemption to fail.\\r\\n    /// This function should never fail without a way to bypass the failure, which is assured\\r\\n    /// through two mechanisms:\\r\\n    /// 1. The FeeManager is called with the try/catch pattern to assure that calls to it\\r\\n    /// can never block redemption.\\r\\n    /// 2. If a token fails upon transfer(), that token can be skipped (and its balance forfeited)\\r\\n    /// by explicitly specifying _assetsToSkip.\\r\\n    /// Because of these assurances, shares should always be redeemable, with the exception\\r\\n    /// of the timelock period on shares actions that must be respected.\\r\\n    function redeemSharesInKind(\\r\\n        address _recipient,\\r\\n        uint256 _sharesQuantity,\\r\\n        address[] calldata _additionalAssets,\\r\\n        address[] calldata _assetsToSkip\\r\\n    ) external returns (address[] memory payoutAssets_, uint256[] memory payoutAmounts_);\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x30f16c8721a2bb390f35e2d6cec30ce2b1a6cdf79f39702a4d5c9ffeabc98c36\",\"license\":\"MIT\"},\"contracts/test/MockComptroller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.24;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {IComptroller} from \\\"../interfaces/IComptroller.sol\\\";\\r\\n\\r\\ncontract MockComptroller is IComptroller {\\r\\n\\r\\n    address public weth;\\r\\n\\r\\n    uint public totalUserShares;\\r\\n\\r\\n    mapping(address => uint) public userBalance;\\r\\n\\r\\n    constructor(address weth_) {\\r\\n        weth = weth_;\\r\\n    }\\r\\n\\r\\n    function redeemSharesInKind(\\r\\n        address _recipient,\\r\\n        uint256 _sharesQuantity,\\r\\n        address[] calldata,\\r\\n        address[] calldata\\r\\n    ) external returns (address[] memory payoutAssets_, uint256[] memory payoutAmounts_) {\\r\\n        uint _userBalance = userBalance[msg.sender];\\r\\n        if (_sharesQuantity == type(uint).max) {\\r\\n            _sharesQuantity = _userBalance;\\r\\n        } else {\\r\\n            require(_userBalance >= _sharesQuantity, \\\"Not enough balance\\\");\\r\\n        }\\r\\n        uint totalWethBalance = IERC20(weth).balanceOf(address(this));\\r\\n        uint forUser = totalWethBalance * _sharesQuantity / totalUserShares;\\r\\n        IERC20(weth).transfer(_recipient, forUser);\\r\\n        userBalance[msg.sender] = _userBalance - _sharesQuantity;\\r\\n        totalUserShares -= _sharesQuantity;\\r\\n        payoutAssets_ = new address[](0);\\r\\n        payoutAmounts_ = new uint[](0);\\r\\n    }\\r\\n\\r\\n    function addUserBalance(address user, uint amountShares) external {\\r\\n        userBalance[user] += amountShares;\\r\\n        totalUserShares += amountShares;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7ad9fc5d755f99610e9541f6f68b18b60100064904de5cbea7331bcf1cdfdba5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161065138038061065183398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6105be806100936000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80630103c92b1461005c578063049947121461008f578063068dbb24146100985780633fc8cef3146100ad5780636af8e7eb146100d8575b600080fd5b61007c61006a36600461032c565b60026020526000908152604090205481565b6040519081526020015b60405180910390f35b61007c60015481565b6100ab6100a636600461034e565b6100f9565b005b6000546100c0906001600160a01b031681565b6040516001600160a01b039091168152602001610086565b6100eb6100e63660046103c4565b610143565b60405161008692919061044e565b6001600160a01b038216600090815260026020526040812080548392906101219084906104e8565b92505081905550806001600082825461013a91906104e8565b90915550505050565b33600090815260026020526040902054606090819060018801610168578097506101b1565b878110156101b15760405162461bcd60e51b81526020600482015260126024820152714e6f7420656e6f7567682062616c616e636560701b604482015260640160405180910390fd5b600080546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156101fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021e9190610501565b905060006001548a83610231919061051a565b61023b9190610531565b60005460405163a9059cbb60e01b81526001600160a01b038e811660048301526024820184905292935091169063a9059cbb906044016020604051808303816000875af1158015610290573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b49190610553565b506102bf8a84610575565b33600090815260026020526040812091909155600180548c92906102e4908490610575565b9091555050604080516000808252602082019081528183019092529c909b509950505050505050505050565b80356001600160a01b038116811461032757600080fd5b919050565b60006020828403121561033e57600080fd5b61034782610310565b9392505050565b6000806040838503121561036157600080fd5b61036a83610310565b946020939093013593505050565b60008083601f84011261038a57600080fd5b50813567ffffffffffffffff8111156103a257600080fd5b6020830191508360208260051b85010111156103bd57600080fd5b9250929050565b600080600080600080608087890312156103dd57600080fd5b6103e687610310565b955060208701359450604087013567ffffffffffffffff8082111561040a57600080fd5b6104168a838b01610378565b9096509450606089013591508082111561042f57600080fd5b5061043c89828a01610378565b979a9699509497509295939492505050565b604080825283519082018190526000906020906060840190828701845b828110156104905781516001600160a01b03168452928401929084019060010161046b565b5050508381038285015284518082528583019183019060005b818110156104c5578351835292840192918401916001016104a9565b5090979650505050505050565b634e487b7160e01b600052601160045260246000fd5b808201808211156104fb576104fb6104d2565b92915050565b60006020828403121561051357600080fd5b5051919050565b80820281158282048414176104fb576104fb6104d2565b60008261054e57634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561056557600080fd5b8151801515811461034757600080fd5b818103818111156104fb576104fb6104d256fea2646970667358221220557ed7cfaf53071d4cc9edf8f6335a485a228fc0fad3a566063388f6b48cd1dd64736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c80630103c92b1461005c578063049947121461008f578063068dbb24146100985780633fc8cef3146100ad5780636af8e7eb146100d8575b600080fd5b61007c61006a36600461032c565b60026020526000908152604090205481565b6040519081526020015b60405180910390f35b61007c60015481565b6100ab6100a636600461034e565b6100f9565b005b6000546100c0906001600160a01b031681565b6040516001600160a01b039091168152602001610086565b6100eb6100e63660046103c4565b610143565b60405161008692919061044e565b6001600160a01b038216600090815260026020526040812080548392906101219084906104e8565b92505081905550806001600082825461013a91906104e8565b90915550505050565b33600090815260026020526040902054606090819060018801610168578097506101b1565b878110156101b15760405162461bcd60e51b81526020600482015260126024820152714e6f7420656e6f7567682062616c616e636560701b604482015260640160405180910390fd5b600080546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156101fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021e9190610501565b905060006001548a83610231919061051a565b61023b9190610531565b60005460405163a9059cbb60e01b81526001600160a01b038e811660048301526024820184905292935091169063a9059cbb906044016020604051808303816000875af1158015610290573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b49190610553565b506102bf8a84610575565b33600090815260026020526040812091909155600180548c92906102e4908490610575565b9091555050604080516000808252602082019081528183019092529c909b509950505050505050505050565b80356001600160a01b038116811461032757600080fd5b919050565b60006020828403121561033e57600080fd5b61034782610310565b9392505050565b6000806040838503121561036157600080fd5b61036a83610310565b946020939093013593505050565b60008083601f84011261038a57600080fd5b50813567ffffffffffffffff8111156103a257600080fd5b6020830191508360208260051b85010111156103bd57600080fd5b9250929050565b600080600080600080608087890312156103dd57600080fd5b6103e687610310565b955060208701359450604087013567ffffffffffffffff8082111561040a57600080fd5b6104168a838b01610378565b9096509450606089013591508082111561042f57600080fd5b5061043c89828a01610378565b979a9699509497509295939492505050565b604080825283519082018190526000906020906060840190828701845b828110156104905781516001600160a01b03168452928401929084019060010161046b565b5050508381038285015284518082528583019183019060005b818110156104c5578351835292840192918401916001016104a9565b5090979650505050505050565b634e487b7160e01b600052601160045260246000fd5b808201808211156104fb576104fb6104d2565b92915050565b60006020828403121561051357600080fd5b5051919050565b80820281158282048414176104fb576104fb6104d2565b60008261054e57634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561056557600080fd5b8151801515811461034757600080fd5b818103818111156104fb576104fb6104d256fea2646970667358221220557ed7cfaf53071d4cc9edf8f6335a485a228fc0fad3a566063388f6b48cd1dd64736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9143,
        "contract": "contracts/test/MockComptroller.sol:MockComptroller",
        "label": "weth",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9145,
        "contract": "contracts/test/MockComptroller.sol:MockComptroller",
        "label": "totalUserShares",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 9149,
        "contract": "contracts/test/MockComptroller.sol:MockComptroller",
        "label": "userBalance",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}